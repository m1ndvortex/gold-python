version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB and Enhanced Schema
  db:
    image: timescale/timescaledb:latest-pg15
    container_name: goldshop_db
    environment:
      POSTGRES_DB: goldshop
      POSTGRES_USER: goldshop_user
      POSTGRES_PASSWORD: goldshop_password
      TIMESCALEDB_TELEMETRY: off
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backend/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/analytics_init.sql:/docker-entrypoint-initdb.d/02-analytics_init.sql
      - ./backend/database_schema_extension.sql:/docker-entrypoint-initdb.d/03-schema_extension.sql
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - goldshop_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goldshop_user -d goldshop"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache with Enhanced Configuration
  redis:
    image: redis:7-alpine
    container_name: goldshop_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    networks:
      - goldshop_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Backend with Enhanced Configuration
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: goldshop_backend
    environment:
      DATABASE_URL: postgresql://goldshop_user:goldshop_password@db:5432/goldshop
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      SMS_API_KEY: your-sms-api-key
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      CORS_ORIGINS: "https://localhost,https://goldshop.local"
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - goldshop_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: goldshop_frontend
    environment:
      REACT_APP_API_URL: https://localhost/api
      REACT_APP_ENVIRONMENT: development
      GENERATE_SOURCEMAP: "false"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - ./logs/frontend:/app/logs
    depends_on:
      - backend
    networks:
      - goldshop_network
    command: npm start
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy with SSL
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: goldshop_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - uploads_data:/var/www/html/uploads:ro
    depends_on:
      - backend
      - frontend
    networks:
      - goldshop_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: goldshop_backup
    environment:
      PGPASSWORD: goldshop_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    depends_on:
      - db
    networks:
      - goldshop_network
    command: ["sh", "-c", "while true; do sleep 86400; /usr/local/bin/backup.sh; done"]
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: goldshop_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - goldshop_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Monitoring Dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: goldshop_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
    networks:
      - goldshop_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  frontend_node_modules:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  goldshop_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16