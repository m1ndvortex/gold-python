version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  db:
    image: timescale/timescaledb:latest-pg15
    container_name: goldshop_db
    environment:
      POSTGRES_DB: goldshop
      POSTGRES_USER: goldshop_user
      POSTGRES_PASSWORD: goldshop_password
      TIMESCALEDB_TELEMETRY: off
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backend/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/analytics_init.sql:/docker-entrypoint-initdb.d/02-analytics_init.sql
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - goldshop_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goldshop_user -d goldshop"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for Analytics
  redis:
    image: redis:7-alpine
    container_name: goldshop_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - goldshop_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: goldshop_backend
    environment:
      DATABASE_URL: postgresql://goldshop_user:goldshop_password@db:5432/goldshop
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      SMS_API_KEY: your-sms-api-key
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - goldshop_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: goldshop_frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_ENVIRONMENT: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - goldshop_network
    command: npm start

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  goldshop_network:
    driver: bridge