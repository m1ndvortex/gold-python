{
  "totalComponents": 234,
  "totalTranslationKeys": 1106,
  "totalHardcodedStrings": 1073,
  "components": [
    {
      "name": "ThemeProvider",
      "path": "/app/src/components/theme/ThemeProvider.tsx",
      "relativePath": "components/theme/ThemeProvider.tsx",
      "category": "other",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "useTheme must be used within a ThemeProvider",
          "type": "errorMessages",
          "context": "if (context === undefined) { throw new Error('useTheme must be used within a ThemeProvider'); } return context; }; // Theme tog"
        },
        {
          "text": "Toggle theme",
          "type": "ariaLabels",
          "context": "nt hover:text-accent-foreground h-10 w-10\" aria-label=\"Toggle theme\" > {actualTheme === 'light' ? ( <svg xmlns="
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SMSTemplateManager",
      "path": "/app/src/components/sms/SMSTemplateManager.tsx",
      "relativePath": "components/sms/SMSTemplateManager.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Template Name",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"name\">Template Name</Label> <Input id=\"name\" va"
        },
        {
          "text": "Template Type",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"template_type\">Template Type</Label> <Select value={formData"
        },
        {
          "text": "Message Template",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"message_template\">Message Template</Label> <Textarea id=\"message"
        },
        {
          "text": "Available Variables",
          "type": "formLabels",
          "context": "</div> </div> <div> <Label className=\"text-sm font-medium\">Available Variables</Label> <div className=\"mt-2 fle"
        },
        {
          "text": "Active Template",
          "type": "formLabels",
          "context": "rev, is_active: checked }))} /> <Label htmlFor=\"is_active\">Active Template</Label> </div> <Separator /> <di"
        },
        {
          "text": "Original Template",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label>Original Template</Label> <div className=\"p-3 bg-muted rounded-md\"> <pre"
        },
        {
          "text": "Select Customer for Preview",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"customer_select\">Select Customer for Preview</Label> <Select value={selecte"
        },
        {
          "text": "Preview Message",
          "type": "formLabels",
          "context": "( <div className=\"space-y-2\"> <Label>Preview Message</Label> <div className=\"p-3 bg-green-50 border border-green-200 ro"
        },
        {
          "text": "Filter by Type:",
          "type": "formLabels",
          "context": "assName=\"flex items-center space-x-2\"> <Label htmlFor=\"type-filter\">Filter by Type:</Label> <Select value={filterType} onValueCh"
        },
        {
          "text": "Active Only",
          "type": "formLabels",
          "context": "ange={setShowActiveOnly} /> <Label htmlFor=\"active-only\">Active Only</Label> </div> </div> {/* Template"
        },
        {
          "text": "Message Preview",
          "type": "formLabels",
          "context": "e-y-4\"> <div> <Label className=\"text-sm font-medium\">Message Preview</Label> <div className=\"mt"
        },
        {
          "text": "setIsCreateDialogOpen(true)}>",
          "type": "buttonText",
          "context": "\" } </p> <Button onClick={() => setIsCreateDialogOpen(true)}> <Plus className=\"h-4 w-4 mr-2\" /"
        },
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "erId: selectedCustomerId }); } catch (error) { // Error handled by mutation } }; return ( <div className=\"space-y"
        },
        {
          "text": "Enter template name",
          "type": "placeholders",
          "context": "{ ...prev, name: e.target.value }))} placeholder=\"Enter template name\" required /> </div> <di"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 10,
        "inputs": 1,
        "labels": 11,
        "alerts": 0,
        "modals": 13,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 14 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SMSHistoryTracker",
      "path": "/app/src/components/sms/SMSHistoryTracker.tsx",
      "relativePath": "components/sms/SMSHistoryTracker.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Message ID",
          "type": "formLabels",
          "context": "rid grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium\">Message ID</Label> <p className=\"text-sm text-mute"
        },
        {
          "text": "Campaign ID",
          "type": "formLabels",
          "context": "id}</p> </div> <div> <Label className=\"text-sm font-medium\">Campaign ID</Label> <p className=\"text-sm text-mut"
        },
        {
          "text": "Phone Number",
          "type": "formLabels",
          "context": "rid grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium\">Phone Number</Label> <p className=\"text-sm\">{messa"
        },
        {
          "text": "Customer ID",
          "type": "formLabels",
          "context": "er}</p> </div> <div> <Label className=\"text-sm font-medium\">Customer ID</Label> <p className=\"text-sm text-mut"
        },
        {
          "text": "Message Content",
          "type": "formLabels",
          "context": "</div> </div> <div> <Label className=\"text-sm font-medium\">Message Content</Label> <div className=\"mt-1 p-3 bg-"
        },
        {
          "text": "Delivery Status",
          "type": "formLabels",
          "context": "</div> </div> <div> <Label className=\"text-sm font-medium\">Delivery Status</Label> <div className=\"flex items"
        },
        {
          "text": "Retry Count",
          "type": "formLabels",
          "context": "rid grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium\">Retry Count</Label> <p className=\"text-sm\">{messag"
        },
        {
          "text": "Gateway Message ID",
          "type": "formLabels",
          "context": "es}</p> </div> <div> <Label className=\"text-sm font-medium\">Gateway Message ID</Label> <p className=\"text-sm t"
        },
        {
          "text": "Created At",
          "type": "formLabels",
          "context": "rid grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium\">Created At</Label> <p className=\"text-sm\">{new Dat"
        },
        {
          "text": "Sent At",
          "type": "formLabels",
          "context": "()}</p> </div> <div> <Label className=\"text-sm font-medium\">Sent At</Label> <p className=\"text-sm\">"
        },
        {
          "text": "Delivered At",
          "type": "formLabels",
          "context": "ssage.delivered_at && ( <div> <Label className=\"text-sm font-medium\">Delivered At</Label> <p className=\"text-sm\">{new D"
        },
        {
          "text": "Error Message",
          "type": "formLabels",
          "context": "sage.error_message && ( <div> <Label className=\"text-sm font-medium\">Error Message</Label> <Alert> <AlertC"
        },
        {
          "text": "Messages to Retry",
          "type": "formLabels",
          "context": "( <div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Messages to Retry</Label> <div className=\"max-h-40"
        },
        {
          "text": "Per Page",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"per-page\">Per Page</Label> <Select value={filters.pe"
        },
        {
          "text": "Select All",
          "type": "buttonText",
          "context": "<div className=\"flex space-x-2\"> <Button variant=\"outline\" size=\"sm\" onClick={handleSelectAll}> Select All"
        },
        {
          "text": "Deselect All",
          "type": "buttonText",
          "context": "elect All </Button> <Button variant=\"outline\" size=\"sm\" onClick={handleDeselectAll}> Deselect All"
        },
        {
          "text": "text-sm font-medium",
          "type": "errorMessages",
          "context": "}</p> </div> )} {message.error_message && ( <div> <Label className=\"text-sm font-medium\">Error Message</L"
        },
        {
          "text": "flex justify-end",
          "type": "errorMessages",
          "context": "4 w-4\" /> <AlertDescription>{message.error_message}</AlertDescription> </Alert> </div> )} <div classN"
        },
        {
          "text": "text-red-600 text-xs",
          "type": "errorMessages",
          "context": ".message_content}</div> {message.error_message && ( <div className=\"text-red-600 text-xs\">{message.error_message}<"
        },
        {
          "text": "flex justify-end space-x-2",
          "type": "errorMessages",
          "context": "<div className=\"text-red-600 text-xs\">{message.error_message}</div> )} </div> ))} </div>"
        },
        {
          "text": "All campaigns",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All campaigns\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All customers",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All customers\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All statuses",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All statuses\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 10,
        "inputs": 0,
        "labels": 18,
        "alerts": 6,
        "modals": 8,
        "tables": 21,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 23 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SMSCampaignManager",
      "path": "/app/src/components/sms/SMSCampaignManager.tsx",
      "relativePath": "components/sms/SMSCampaignManager.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Campaign Name",
          "type": "formLabels",
          "context": "y-6\"> <div className=\"space-y-2\"> <Label htmlFor=\"campaign_name\">Campaign Name</Label> <Input id=\"campaign_name\""
        },
        {
          "text": "Use SMS Template",
          "type": "formLabels",
          "context": "plate(checked === true)} /> <Label htmlFor=\"use_template\">Use SMS Template</Label> </div> {useTemplate && ("
        },
        {
          "text": "Select Template",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"template_select\">Select Template</Label> <Select onValueChange={handleT"
        },
        {
          "text": "Message Content",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"message_content\">Message Content</Label> <Textarea id=\"messa"
        },
        {
          "text": "Filter by Status:",
          "type": "formLabels",
          "context": "assName=\"flex items-center space-x-2\"> <Label htmlFor=\"status-filter\">Filter by Status:</Label> <Select value={statusFilter} onV"
        },
        {
          "text": "Message Content",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Message Content</Label> <div className=\""
        },
        {
          "text": "Campaign Statistics",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Campaign Statistics</Label> <CampaignSta"
        },
        {
          "text": "Select All",
          "type": "buttonText",
          "context": "<div className=\"space-x-2\"> <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={handleSelectAll}> Select A"
        },
        {
          "text": "Deselect All",
          "type": "buttonText",
          "context": "Select All </Button> <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={handleDeselectAll}> Desele"
        },
        {
          "text": "setIsCreateDialogOpen(true)}>",
          "type": "buttonText",
          "context": "` } </p> <Button onClick={() => setIsCreateDialogOpen(true)}> <Plus className=\"h-4 w-4 mr-2\" /"
        },
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "nc(batchRequest); onClose(); } catch (error) { // Error handled by mutation } }; const isLoading = createCampaignMutat"
        },
        {
          "text": "Are you sure you want to retry failed messages in this campaign?",
          "type": "errorMessages",
          "context": "Mutation.mutateAsync(campaignId); } catch (error) { // Error handled by mutation } } }; const handleRetryCampaign"
        },
        {
          "text": "Enter campaign name",
          "type": "placeholders",
          "context": "({ ...prev, name: e.target.value }))} placeholder=\"Enter campaign name\" required /> </div> <div classN"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 8,
        "inputs": 2,
        "labels": 9,
        "alerts": 4,
        "modals": 5,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 13 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SystemHealthOverview",
      "path": "/app/src/components/system-admin/SystemHealthOverview.tsx",
      "relativePath": "components/system-admin/SystemHealthOverview.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "system.health.error",
        "system.health.overall",
        "system.status.${systemHealth.overall.status}",
        "system.health.score",
        "system.resources.cpu",
        "system.resources.memory",
        "system.resources.disk",
        "system.alerts.active",
        "system.health.lastUpdated"
      ],
      "hardcodedStrings": [
        {
          "text": "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6",
          "type": "errorMessages",
          "context": "() => { const { data: systemHealth, isLoading, error } = useSystemHealth(); const { t } = useLanguage(); if (isLoading) { return ("
        },
        {
          "text": "border-destructive/50 bg-destructive/5",
          "type": "errorMessages",
          "context": "))} </div> ); } if (error || !systemHealth) { return ( <Card className=\"border-destructive/50 bg-destructive"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 25
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ServiceStatusGrid",
      "path": "/app/src/components/system-admin/ServiceStatusGrid.tsx",
      "relativePath": "components/system-admin/ServiceStatusGrid.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "system.services.error",
        "system.status.${service.status}",
        "system.metrics.cpu",
        "system.metrics.memory",
        "system.metrics.uptime",
        "system.metrics.lastRestart",
        "system.actions.restart",
        "system.logs.empty"
      ],
      "hardcodedStrings": [
        {
          "text": "border-destructive/50 bg-destructive/5",
          "type": "errorMessages",
          "context": "))} </div> ); } if (error || !services) { return ( <Card className=\"border-destructive/50 bg-destructive/5\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 5,
        "tables": 0,
        "cards": 9
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "SecurityMonitoring",
      "path": "/app/src/components/system-admin/SecurityMonitoring.tsx",
      "relativePath": "components/system-admin/SecurityMonitoring.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "security.ssl.title",
        "security.ssl.renew",
        "security.ssl.domain",
        "security.ssl.issuer",
        "security.ssl.validFrom",
        "security.ssl.validTo",
        "security.ssl.daysLeft",
        "common.days",
        "security.ssl.autoRenewal",
        "common.enabled",
        "common.disabled",
        "security.ssl.notAvailable",
        "security.headers.title",
        "security.headers.score",
        "security.headers.notAvailable",
        "security.rateLimit.title",
        "security.rateLimit.status",
        "security.rateLimit.requestsPerMinute",
        "security.rateLimit.blockedRequests",
        "security.rateLimit.topBlockedIPs",
        "security.rateLimit.notAvailable",
        "security.scan.title",
        "security.scan.run",
        "security.scan.lastScan",
        "security.scan.vulnerabilities",
        "security.scan.found",
        "security.scan.noVulnerabilities",
        "security.scan.notAvailable"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 16
      },
      "recommendations": []
    },
    {
      "name": "RedisManagement",
      "path": "/app/src/components/system-admin/RedisManagement.tsx",
      "relativePath": "components/system-admin/RedisManagement.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "redis.error",
        "redis.title",
        "redis.clearCache",
        "redis.clearWarning",
        "redis.clearWarningText",
        "redis.pattern",
        "redis.patternPlaceholder",
        "redis.patternHelp",
        "common.cancel",
        "redis.confirmClear",
        "redis.memory.title",
        "redis.status.${memoryStatus}",
        "redis.memory.peak",
        "redis.memory.fragmentation",
        "redis.performance.title",
        "redis.performance.hitRate",
        "redis.performance.missRate",
        "redis.performance.opsPerSec",
        "redis.connections.title",
        "redis.connections.connected",
        "redis.connections.blocked",
        "redis.connections.rejected",
        "redis.keyspace.title",
        "redis.keyspace.totalKeys",
        "redis.keyspace.expired",
        "redis.keyspace.evicted",
        "redis.keyBrowser.title",
        "redis.keyBrowser.placeholder",
        "common.search",
        "redis.keyBrowser.noKeys"
      ],
      "hardcodedStrings": [
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "false); setClearPattern(''); } catch (error) { // Error handled by the hook } }; if (isLoading) { return ("
        },
        {
          "text": "border-destructive/50 bg-destructive/5",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error || !redisStatus) { return ( <Card className=\"border-destructive/50 bg-destructive/"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 2,
        "labels": 0,
        "alerts": 1,
        "modals": 5,
        "tables": 0,
        "cards": 28
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "PerformanceMetrics",
      "path": "/app/src/components/system-admin/PerformanceMetrics.tsx",
      "relativePath": "components/system-admin/PerformanceMetrics.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "performance.error",
        "performance.title",
        "performance.timeRange.${range.value}",
        "performance.metrics.${metric.name}",
        "performance.threshold",
        "performance.summary.title",
        "performance.summary.healthy",
        "performance.summary.healthyDesc",
        "performance.summary.warning",
        "performance.summary.warningDesc",
        "performance.summary.critical",
        "performance.summary.criticalDesc"
      ],
      "hardcodedStrings": [
        {
          "text": "border-destructive/50 bg-destructive/5",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error || !metrics) { return ( <Card className=\"border-destructive/50 bg-destructive/5\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 3,
        "modals": 0,
        "tables": 0,
        "cards": 19
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "LogViewer",
      "path": "/app/src/components/system-admin/LogViewer.tsx",
      "relativePath": "components/system-admin/LogViewer.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "logs.title",
        "logs.autoRefresh",
        "csv",
        "logs.export",
        "logs.searchPlaceholder",
        "common.search",
        "logs.services",
        "logs.levels",
        "logs.limit",
        "logs.entries",
        "logs.entriesCount",
        "logs.error",
        "logs.empty"
      ],
      "hardcodedStrings": [
        {
          "text": "text-center py-8 text-destructive",
          "type": "errorMessages",
          "context": "))} </div> ) : error ? ( <div className=\"text-center py-8 text-destructive\"> <XCircle c"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 1,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "DatabaseAdministration",
      "path": "/app/src/components/system-admin/DatabaseAdministration.tsx",
      "relativePath": "components/system-admin/DatabaseAdministration.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "database.error",
        "database.title",
        "database.healthCheck",
        "database.optimize",
        "database.connectionPool.title",
        "database.status.${poolStatus}",
        "database.connectionPool.active",
        "database.connectionPool.idle",
        "database.queryPerformance.title",
        "database.queryPerformance.avgResponse",
        "database.queryPerformance.slowQueries",
        "database.queryPerformance.totalQueries",
        "database.storage.title",
        "database.storage.size",
        "database.storage.freeSpace",
        "database.storage.tables",
        "database.replication.title",
        "database.replication.status",
        "database.replication.${dbStatus.replication.status}",
        "database.replication.lagWarning",
        "database.replication.lagDescription",
        "database.replication.lag",
        "database.actions.title",
        "database.actions.healthCheck",
        "database.actions.healthCheckDesc",
        "database.actions.optimize",
        "database.actions.optimizeDesc",
        "database.actions.analyze",
        "database.actions.analyzeDesc"
      ],
      "hardcodedStrings": [
        {
          "text": "border-destructive/50 bg-destructive/5",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error || !dbStatus) { return ( <Card className=\"border-destructive/50 bg-destructive/5\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 28
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "BackupManagement",
      "path": "/app/src/components/system-admin/BackupManagement.tsx",
      "relativePath": "components/system-admin/BackupManagement.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "backup.restore.confirmRequired",
        "backup.delete.confirm",
        "backup.error",
        "backup.status.title",
        "backup.create.title",
        "backup.create.type",
        "backup.type.full",
        "backup.type.incremental",
        "backup.create.includeImages",
        "backup.create.includeConfigs",
        "backup.create.description",
        "backup.create.descriptionPlaceholder",
        "common.cancel",
        "backup.create.confirm",
        "backup.status.lastBackup",
        "backup.status.size",
        "backup.status.type",
        "backup.type.${latestBackup.type}",
        "backup.status.noBackups",
        "backup.files.title",
        "backup.type.${backup.type}",
        "backup.verified",
        "backup.restore.title",
        "backup.restore.warning",
        "backup.restore.warningText",
        "backup.restore.type",
        "backup.restore.full",
        "backup.restore.selective",
        "backup.restore.confirmDataLoss",
        "backup.restore.confirm",
        "backup.files.empty"
      ],
      "hardcodedStrings": [
        {
          "text": "/api/admin/backups/${filename}/download",
          "type": "errorMessages",
          "context": "ckupDelete.mutateAsync(filename); } catch (error) { // Error handled by the hook } } }; const handleDownloadBackup"
        },
        {
          "text": "border-destructive/50 bg-destructive/5",
          "type": "errorMessages",
          "context": "</Card> </div> ); } if (error || !backups) { return ( <Card className=\"border-destructive/50 bg-destructive/5\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 8,
        "inputs": 0,
        "labels": 6,
        "alerts": 2,
        "modals": 10,
        "tables": 0,
        "cards": 13
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "use-toast",
      "path": "/app/src/components/ui/use-toast.ts",
      "relativePath": "components/ui/use-toast.ts",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "tooltip",
      "path": "/app/src/components/ui/tooltip.tsx",
      "relativePath": "components/ui/tooltip.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "toaster",
      "path": "/app/src/components/ui/toaster.tsx",
      "relativePath": "components/ui/toaster.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "toast",
      "path": "/app/src/components/ui/toast.tsx",
      "relativePath": "components/ui/toast.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "useToast must be used within a ToastProvider",
          "type": "errorMessages",
          "context": "(ToastContext); if (!context) { throw new Error('useToast must be used within a ToastProvider'); } return context; }; export const T"
        },
        {
          "text": "from-red-500 to-pink-600",
          "type": "errorMessages",
          "context": "-200', text: 'text-green-800' }, error: { icon: AlertCircle, gradient: 'from-red-500 to-pink-600', bg: 'from-red"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "textarea",
      "path": "/app/src/components/ui/textarea.tsx",
      "relativePath": "components/ui/textarea.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "border-error-500 focus-visible:ring-error-500 text-error-700 hover:border-error-600",
          "type": "errorMessages",
          "context": "t-success-700 hover:border-success-600\", error: \"border-error-500 focus-visible:ring-error-500 text-error-700 hover:border-error-600\","
        },
        {
          "text": "h-4 w-4 text-error-500",
          "type": "errorMessages",
          "context": "ght-3 flex items-center space-x-1\"> {error && <AlertCircle className=\"h-4 w-4 text-error-500\" />} {success && <CheckCircle2"
        },
        {
          "text": "text-error-600",
          "type": "errorMessages",
          "context": "s-center text-xs\"> <div> {error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-succ"
        },
        {
          "text": "text-success-600",
          "type": "errorMessages",
          "context": "{error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-success-600\">{success}</p>} {wa"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "tabs",
      "path": "/app/src/components/ui/tabs.tsx",
      "relativePath": "components/ui/tabs.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "table",
      "path": "/app/src/components/ui/table.tsx",
      "relativePath": "components/ui/table.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "switch",
      "path": "/app/src/components/ui/switch.tsx",
      "relativePath": "components/ui/switch.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "slider",
      "path": "/app/src/components/ui/slider.tsx",
      "relativePath": "components/ui/slider.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "skeleton",
      "path": "/app/src/components/ui/skeleton.tsx",
      "relativePath": "components/ui/skeleton.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "sheet",
      "path": "/app/src/components/ui/sheet.tsx",
      "relativePath": "components/ui/sheet.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "separator",
      "path": "/app/src/components/ui/separator.tsx",
      "relativePath": "components/ui/separator.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "select",
      "path": "/app/src/components/ui/select.tsx",
      "relativePath": "components/ui/select.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "searchable-select",
      "path": "/app/src/components/ui/searchable-select.tsx",
      "relativePath": "components/ui/searchable-select.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "border-error-500 focus:ring-error-500",
          "type": "errorMessages",
          "context": "der-success-500 focus:ring-success-500\", error: \"border-error-500 focus:ring-error-500\", warning: \"border-warning-500 focus:ring-war"
        },
        {
          "text": "No options found",
          "type": "errorMessages",
          "context": "ssName, variant, size, label, error, success, warning, helpText, emptyMessage = \"No options found\", loadi"
        },
        {
          "text": "h-4 w-4 text-error-500",
          "type": "errorMessages",
          "context": "{/* Validation Icons */} {error && <AlertCircle className=\"h-4 w-4 text-error-500\" />} {success && <CheckCircle2"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "d validation messages if needed if (label || error || success || warning || helpText) { return ( <div className=\"space-y-2\">"
        },
        {
          "text": "text-error-600",
          "type": "errorMessages",
          "context": "<div className=\"text-xs\"> {error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-su"
        },
        {
          "text": "text-success-600",
          "type": "errorMessages",
          "context": "{error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-success-600\">{success}</p>}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "scroll-area",
      "path": "/app/src/components/ui/scroll-area.tsx",
      "relativePath": "components/ui/scroll-area.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "radio-group",
      "path": "/app/src/components/ui/radio-group.tsx",
      "relativePath": "components/ui/radio-group.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "progress",
      "path": "/app/src/components/ui/progress.tsx",
      "relativePath": "components/ui/progress.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "popover",
      "path": "/app/src/components/ui/popover.tsx",
      "relativePath": "components/ui/popover.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "pagination",
      "path": "/app/src/components/ui/pagination.tsx",
      "relativePath": "components/ui/pagination.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Go to previous page",
          "type": "ariaLabels",
          "context": "eof PaginationLink>) => ( <PaginationLink aria-label=\"Go to previous page\" size=\"default\" className={cn(\"gap-1 pl-2.5\", className)}"
        },
        {
          "text": "Go to next page",
          "type": "ariaLabels",
          "context": "eof PaginationLink>) => ( <PaginationLink aria-label=\"Go to next page\" size=\"default\" className={cn(\"gap-1 pr-2.5\", className)}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "loading-states",
      "path": "/app/src/components/ui/loading-states.tsx",
      "relativePath": "components/ui/loading-states.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "loading-spinner",
      "path": "/app/src/components/ui/loading-spinner.tsx",
      "relativePath": "components/ui/loading-spinner.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "list",
      "path": "/app/src/components/ui/list.tsx",
      "relativePath": "components/ui/list.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "label",
      "path": "/app/src/components/ui/label.tsx",
      "relativePath": "components/ui/label.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 1,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "jalali-calendar",
      "path": "/app/src/components/ui/jalali-calendar.tsx",
      "relativePath": "components/ui/jalali-calendar.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "input",
      "path": "/app/src/components/ui/input.tsx",
      "relativePath": "components/ui/input.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "border-error-500 focus-visible:ring-error-500 text-error-700 hover:border-error-600",
          "type": "errorMessages",
          "context": "t-success-700 hover:border-success-600\", error: \"border-error-500 focus-visible:ring-error-500 text-error-700 hover:border-error-600\","
        },
        {
          "text": "peer-focus:text-error-600",
          "type": "errorMessages",
          "context": "background px-1 -translate-y-1/2\", error && \"peer-focus:text-error-600\", success && \"peer-focus:text-success-600\","
        },
        {
          "text": "h-4 w-4 text-error-500",
          "type": "errorMessages",
          "context": "{/* Validation Icons */} {error && <AlertCircle className=\"h-4 w-4 text-error-500\" />} {success && <CheckCircle2"
        },
        {
          "text": "mt-1 text-xs",
          "type": "errorMessages",
          "context": "elp Text and Validation Messages */} {(error || success || warning || helpText) && ( <div className=\"mt-1 text-xs\">"
        },
        {
          "text": "text-error-600",
          "type": "errorMessages",
          "context": "<div className=\"mt-1 text-xs\"> {error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-su"
        },
        {
          "text": "text-success-600",
          "type": "errorMessages",
          "context": "{error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-success-600\">{success}</p>}"
        },
        {
          "text": "h-4 w-4 text-error-500",
          "type": "errorMessages",
          "context": "{/* Validation Icons */} {error && <AlertCircle className=\"h-4 w-4 text-error-500\" />} {success && <CheckCircle2"
        },
        {
          "text": "text-error-600",
          "type": "errorMessages",
          "context": "<div className=\"text-xs\"> {error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-succ"
        },
        {
          "text": "text-success-600",
          "type": "errorMessages",
          "context": "{error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-success-600\">{success}</p>} {wa"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 4,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 9 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "form-loading",
      "path": "/app/src/components/ui/form-loading.tsx",
      "relativePath": "components/ui/form-loading.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 1,
        "labels": 1,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "form-field",
      "path": "/app/src/components/ui/form-field.tsx",
      "relativePath": "components/ui/form-field.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "text-red-700",
          "type": "errorMessages",
          "context": "nd\", success: \"text-green-700\", error: \"text-red-700\", warning: \"text-orange-700\", info: \"text-blue-700\","
        },
        {
          "text": "text-red-600 bg-red-50/50 border border-red-200 rounded-md px-2 py-1",
          "type": "errorMessages",
          "context": "border-green-200 rounded-md px-2 py-1\", error: \"text-red-600 bg-red-50/50 border border-red-200 rounded-md px-2 py-1\", warning: \"te"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "\"\", success: \"text-green-600\", error: \"text-red-600\", warning: \"text-orange-600\", info: \"text-blue-600\","
        },
        {
          "text": "h-3 w-3 flex-shrink-0",
          "type": "errorMessages",
          "context": "ge const getMessageIcon = () => { if (error) return <AlertCircle className=\"h-3 w-3 flex-shrink-0\" /> if (success) return <CheckCir"
        },
        {
          "text": "ml-2 inline-block",
          "type": "errorMessages",
          "context": "e text const getMessage = () => { if (error) return error if (success) return success if (warning) return warning if"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "file-upload",
      "path": "/app/src/components/ui/file-upload.tsx",
      "relativePath": "components/ui/file-upload.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [
        "."
      ],
      "hardcodedStrings": [
        {
          "text": "border-error-300 bg-error-50/50",
          "type": "errorMessages",
          "context": ": \"border-success-300 bg-success-50/50\", error: \"border-error-300 bg-error-50/50\", warning: \"border-warning-300 bg-warning-50/50\","
        },
        {
          "text": "image/",
          "type": "errorMessages",
          "context": "fileId = `${Date.now()}-${index}` const error = validateFile(file) const fileUpload: FileUploadFile = { file,"
        },
        {
          "text": "border-error-300 bg-error-50/50",
          "type": "errorMessages",
          "context": "border rounded-lg\", fileUpload.error && \"border-error-300 bg-error-50/50\" )} > {/*"
        },
        {
          "text": "text-xs text-error-600 mt-1",
          "type": "errorMessages",
          "context": ")} {/* Error Message */} {fileUpload.error && ( <p className=\"text-"
        },
        {
          "text": "flex-shrink-0 ml-3",
          "type": "errorMessages",
          "context": "ror-600 mt-1\"> {fileUpload.error} </p> )} </div>"
        },
        {
          "text": "h-4 w-4 text-error-500",
          "type": "errorMessages",
          "context": "ex-shrink-0 ml-3\"> {fileUpload.error ? ( <AlertCircle className=\"h-4 w-4 text-error-500\" />"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "d validation messages if needed if (label || error || success || warning || helpText) { return ( <div className=\"space-y-2\">"
        },
        {
          "text": "text-error-600",
          "type": "errorMessages",
          "context": "<div className=\"text-xs\"> {error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-su"
        },
        {
          "text": "text-success-600",
          "type": "errorMessages",
          "context": "{error && <p className=\"text-error-600\">{error}</p>} {success && <p className=\"text-success-600\">{success}</p>}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 9 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "dropdown-menu",
      "path": "/app/src/components/ui/dropdown-menu.tsx",
      "relativePath": "components/ui/dropdown-menu.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "dialog",
      "path": "/app/src/components/ui/dialog.tsx",
      "relativePath": "components/ui/dialog.tsx",
      "category": "ui-component",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 7,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "date-picker",
      "path": "/app/src/components/ui/date-picker.tsx",
      "relativePath": "components/ui/date-picker.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "data-table",
      "path": "/app/src/components/ui/data-table.tsx",
      "relativePath": "components/ui/data-table.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [
        "."
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 8,
        "inputs": 4,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "command",
      "path": "/app/src/components/ui/command.tsx",
      "relativePath": "components/ui/command.tsx",
      "category": "ui-component",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 2,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "collapsible",
      "path": "/app/src/components/ui/collapsible.tsx",
      "relativePath": "components/ui/collapsible.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "checkbox",
      "path": "/app/src/components/ui/checkbox.tsx",
      "relativePath": "components/ui/checkbox.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "card",
      "path": "/app/src/components/ui/card.tsx",
      "relativePath": "components/ui/card.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "calendar",
      "path": "/app/src/components/ui/calendar.tsx",
      "relativePath": "components/ui/calendar.tsx",
      "category": "ui-component",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "button",
      "path": "/app/src/components/ui/button.tsx",
      "relativePath": "components/ui/button.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "bg-red-500 text-white hover:bg-red-600",
          "type": "errorMessages",
          "context": "nge-500 text-white hover:bg-orange-600\", error: \"bg-red-500 text-white hover:bg-red-600\", info: \"bg-blue-500 text-white hover:bg-blu"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "breadcrumb",
      "path": "/app/src/components/ui/breadcrumb.tsx",
      "relativePath": "components/ui/breadcrumb.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "badge",
      "path": "/app/src/components/ui/badge.tsx",
      "relativePath": "components/ui/badge.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "border-transparent bg-gradient-to-r from-red-500 to-rose-600 text-white shadow-sm",
          "type": "errorMessages",
          "context": "500 to-orange-600 text-white shadow-sm\", error: \"border-transparent bg-gradient-to-r from-red-500 to-rose-600 text-white shadow-sm\","
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "avatar",
      "path": "/app/src/components/ui/avatar.tsx",
      "relativePath": "components/ui/avatar.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "alert",
      "path": "/app/src/components/ui/alert.tsx",
      "relativePath": "components/ui/alert.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "alert-system",
      "path": "/app/src/components/ui/alert-system.tsx",
      "relativePath": "components/ui/alert-system.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "from-red-500 to-pink-600",
          "type": "errorMessages",
          "context": "ent-to-r from-green-500 to-teal-600' }, error: { icon: AlertCircle, gradient: 'from-red-500 to-pink-600', bg: variant ="
        },
        {
          "text": "from-red-500 to-pink-600",
          "type": "errorMessages",
          "context": "een-800', dot: 'bg-green-500' }, error: { gradient: 'from-red-500 to-pink-600', bg: 'bg-red-100', text: 'text-re"
        },
        {
          "text": "from-red-500 to-pink-600",
          "type": "errorMessages",
          "context": "teal-600', text: 'text-white' }, error: { icon: AlertCircle, gradient: 'from-red-500 to-pink-600', text: 'text-w"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 5,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "alert-dialog",
      "path": "/app/src/components/ui/alert-dialog.tsx",
      "relativePath": "components/ui/alert-dialog.tsx",
      "category": "ui-component",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 8,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "UserManagement",
      "path": "/app/src/components/settings/UserManagement.tsx",
      "relativePath": "components/settings/UserManagement.tsx",
      "category": "settings",
      "type": "form",
      "translationKeys": [
        "settings.user_management",
        "settings.user_management_desc",
        "settings.add_new_user",
        "settings.user",
        "settings.role",
        "common.status",
        "settings.created",
        "common.actions",
        "settings.no_role",
        "common.active",
        "common.inactive",
        "settings.you",
        "settings.previous",
        "settings.next",
        "settings.create_new_user",
        "settings.add_user_desc",
        "settings.username",
        "settings.username_required",
        "settings.enter_username",
        "settings.email",
        "settings.email_required",
        "settings.invalid_email",
        "settings.enter_email",
        "settings.password",
        "settings.password_required",
        "settings.password_min_length",
        "settings.enter_password",
        "settings.select_role",
        "common.cancel",
        "settings.creating",
        "settings.create_user"
      ],
      "hardcodedStrings": [
        {
          "text": "Active Status",
          "type": "formLabels",
          "context": "<div className=\"flex flex-col\"> <Label htmlFor=\"edit-active\">Active Status</Label> {currentUser?.id === selectedUs"
        },
        {
          "text": "Current Password",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"current-password\">Current Password</Label> <Input"
        },
        {
          "text": "New Password",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"new-password\">New Password</Label> <Input id=\"new-"
        },
        {
          "text": "Confirm New Password",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"confirm-password\">Confirm New Password</Label> <Input"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "me')} /> {userErrors.username && ( <p className=\"text-sm text-destructive\">{userErrors.usernam"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{userErrors.username.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "il')} /> {userErrors.email && ( <p className=\"text-sm text-destructive\">{userErrors.email.mess"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{userErrors.email.message}</p> )} </div> </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "ssword')} /> {userErrors.password && ( <p className=\"text-sm text-destructive\">{userErrors.password."
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{userErrors.password.message}</p> )} </div> <div className=\""
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "name\" /> {userErrors.username && ( <p className=\"text-sm text-destructive\">{userErrors.usernam"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{userErrors.username.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "mail\" /> {userErrors.email && ( <p className=\"text-sm text-destructive\">{userErrors.email.mess"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{userErrors.email.message}</p> )} </div> </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "word\" /> {passwordErrors.current_password && ( <p className=\"text-sm text-destructive\">{passwordErro"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{passwordErrors.current_password.message}</p> )} </div> <div cla"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "word\" /> {passwordErrors.new_password && ( <p className=\"text-sm text-destructive\">{passwordErrors.n"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{passwordErrors.new_password.message}</p> )} </div> <div classNa"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "word\" /> {passwordErrors.confirm_password && ( <p className=\"text-sm text-destructive\">{passwordErro"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{passwordErrors.confirm_password.message}</p> )} {newPassword && confirmPassw"
        },
        {
          "text": "Enter username",
          "type": "placeholders",
          "context": "d: 'Username is required' })} placeholder=\"Enter username\" /> {userErrors.username && ("
        },
        {
          "text": "Enter email",
          "type": "placeholders",
          "context": "} })} placeholder=\"Enter email\" /> {userErrors.email && ("
        },
        {
          "text": "Select a role",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select a role\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Enter current password",
          "type": "placeholders",
          "context": "rrent password is required' })} placeholder=\"Enter current password\" /> {passwordErrors.current_pass"
        },
        {
          "text": "Enter new password",
          "type": "placeholders",
          "context": "acters' } })} placeholder=\"Enter new password\" /> {passwordErrors.new_password &&"
        },
        {
          "text": "Confirm new password",
          "type": "placeholders",
          "context": "ot match' })} placeholder=\"Confirm new password\" /> {passwordErrors.confirm_passwo"
        }
      ],
      "uiElements": {
        "forms": 3,
        "buttons": 12,
        "inputs": 8,
        "labels": 11,
        "alerts": 0,
        "modals": 15,
        "tables": 15,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 26 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "RolePermissionManager",
      "path": "/app/src/components/settings/RolePermissionManager.tsx",
      "relativePath": "components/settings/RolePermissionManager.tsx",
      "category": "settings",
      "type": "form",
      "translationKeys": [
        "settings.role_permission_management",
        "settings.role_permission_desc",
        "settings.create_role",
        "settings.permissions",
        "settings.assigned_users",
        "settings.create_new_role",
        "settings.create_role_desc",
        "settings.role_name",
        "settings.role_name_required",
        "settings.role_name_placeholder",
        "settings.description",
        "settings.role_description_placeholder",
        "common.cancel",
        "settings.creating_role"
      ],
      "hardcodedStrings": [
        {
          "text": "Role Name",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"edit-name\">Role Name</Label> <Input id=\"edit"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "lder')} /> {errors.name && ( <p className=\"text-sm text-destructive\">{errors.name.message}<"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.name.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "anager\" /> {errors.name && ( <p className=\"text-sm text-destructive\">{errors.name.message}<"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.name.message}</p> )} </div>"
        },
        {
          "text": "Brief description of the role",
          "type": "placeholders",
          "context": "{...register('description')} placeholder=\"Brief description of the role\" /> </div>"
        }
      ],
      "uiElements": {
        "forms": 2,
        "buttons": 7,
        "inputs": 4,
        "labels": 9,
        "alerts": 0,
        "modals": 10,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "InvoiceTemplateDesigner",
      "path": "/app/src/components/settings/InvoiceTemplateDesigner.tsx",
      "relativePath": "components/settings/InvoiceTemplateDesigner.tsx",
      "category": "settings",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Template Name",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"name\">Template Name</Label> <Input id=\"n"
        },
        {
          "text": "Page Layout",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"layout\">Page Layout</Label> <Select value={watchedValues.layout"
        },
        {
          "text": "Page Size",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"page_size\">Page Size</Label> <Select value={watchedValues.page_"
        },
        {
          "text": "Font Family",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"font_family\">Font Family</Label> <Select value={watchedValues.f"
        },
        {
          "text": "Top (px)",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"margin_top\">Top (px)</Label> <Input"
        },
        {
          "text": "Right (px)",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"margin_right\">Right (px)</Label> <Input"
        },
        {
          "text": "Bottom (px)",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"margin_bottom\">Bottom (px)</Label> <Input"
        },
        {
          "text": "Left (px)",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"margin_left\">Left (px)</Label> <Input"
        },
        {
          "text": "Primary Color",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"primary_color\">Primary Color</Label> <div className=\"flex gap"
        },
        {
          "text": "Secondary Color",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"secondary_color\">Secondary Color</Label> <div className=\"flex"
        },
        {
          "text": "Default Template",
          "type": "errorMessages",
          "context": "set, setValue, watch, formState: { errors, isDirty }, } = useForm<TemplateFormData>(); const watchedValues = watch(); useE"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "me\" /> {errors.name && ( <p className=\"text-sm text-destructive\">{errors.name.message"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.name.message}</p> )} </div> <div"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "/> {errors.margin_top && ( <p className=\"text-sm text-destructive\">{errors.marg"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.margin_top.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "/> {errors.margin_right && ( <p className=\"text-sm text-destructive\">{errors.ma"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.margin_right.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "/> {errors.margin_bottom && ( <p className=\"text-sm text-destructive\">{errors.m"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.margin_bottom.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "/> {errors.margin_left && ( <p className=\"text-sm text-destructive\">{errors.mar"
        },
        {
          "text": "Enter template name",
          "type": "placeholders",
          "context": "late name is required' })} placeholder=\"Enter template name\" /> {errors.name && ("
        },
        {
          "text": "Select layout",
          "type": "placeholders",
          "context": "ectTrigger> <SelectValue placeholder=\"Select layout\" /> </SelectTrigger> <Selec"
        },
        {
          "text": "Select page size",
          "type": "placeholders",
          "context": "ectTrigger> <SelectValue placeholder=\"Select page size\" /> </SelectTrigger> <Se"
        },
        {
          "text": "Select font",
          "type": "placeholders",
          "context": "ectTrigger> <SelectValue placeholder=\"Select font\" /> </SelectTrigger> <SelectC"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 5,
        "inputs": 9,
        "labels": 10,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 24 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "GoldPriceConfig",
      "path": "/app/src/components/settings/GoldPriceConfig.tsx",
      "relativePath": "components/settings/GoldPriceConfig.tsx",
      "category": "settings",
      "type": "form",
      "translationKeys": [
        "settings.gold_price_config",
        "settings.gold_price_manage_desc",
        "settings.current_gold_price",
        "settings.per_gram",
        "settings.auto_update_on",
        "settings.manual_update",
        "settings.last_updated",
        "settings.update_gold_price",
        "settings.price_required",
        "settings.price_greater_zero",
        "settings.updating",
        "settings.update_price",
        "settings.automatic_price_updates",
        "settings.enable_auto_updates",
        "settings.auto_update_config",
        "settings.update_frequency",
        "settings.every_24_hours",
        "settings.api_source",
        "settings.gold_api_service",
        "settings.next_update",
        "common.status",
        "common.active",
        "settings.auto_update_note",
        "settings.recent_price_changes",
        "settings.today",
        "settings.yesterday",
        "settings.days_ago_2"
      ],
      "hardcodedStrings": [
        {
          "text": "Auto-update toggled:",
          "type": "errorMessages",
          "context": "handleSubmit, reset, formState: { errors, isDirty }, } = useForm<GoldPriceFormData>(); useEffect(() => { if (config) {"
        },
        {
          "text": "text-sm text-destructive mt-1",
          "type": "errorMessages",
          "context": "\"50.00\" /> {errors.price && ( <p className=\"text-sm text-destructive mt-1\">{errors.price.me"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 1,
        "inputs": 1,
        "labels": 3,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "DisasterRecoveryDashboard",
      "path": "/app/src/components/settings/DisasterRecoveryDashboard.tsx",
      "relativePath": "components/settings/DisasterRecoveryDashboard.tsx",
      "category": "settings",
      "type": "card",
      "translationKeys": [
        "Retention policy applied: ${result.backups_deleted} backups deleted, ${result.backups_archived} archived",
        "Off-site sync completed: ${result.uploaded_count} backups uploaded"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to fetch system status",
          "type": "errorMessages",
          "context": "very/status'); if (!response.ok) throw new Error('Failed to fetch system status'); const data = await response.json(); setSystemS"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "ystemStatus(data); } catch (err) { setError(err instanceof Error ? err.message : 'Unknown error'); } }; const fetchBackups ="
        },
        {
          "text": "Failed to fetch backups",
          "type": "errorMessages",
          "context": "backup/list'); if (!response.ok) throw new Error('Failed to fetch backups'); const data = await response.json(); setBackups(data)"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "setBackups(data); } catch (err) { setError(err instanceof Error ? err.message : 'Unknown error'); } }; const fetchProcedures"
        },
        {
          "text": "Failed to fetch procedures",
          "type": "errorMessages",
          "context": "/procedures'); if (!response.ok) throw new Error('Failed to fetch procedures'); const data = await response.json(); setProcedures"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "tProcedures(data); } catch (err) { setError(err instanceof Error ? err.message : 'Unknown error'); } }; const fetchOffSiteSta"
        },
        {
          "text": "Failed to fetch off-site storage status",
          "type": "errorMessages",
          "context": "rage/status'); if (!response.ok) throw new Error('Failed to fetch off-site storage status'); const data = await response.json();"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "fSiteStatus(data); } catch (err) { setError(err instanceof Error ? err.message : 'Unknown error'); } }; const refreshData = a"
        },
        {
          "text": "Failed to execute recovery procedure",
          "type": "errorMessages",
          "context": "}); if (!response.ok) throw new Error('Failed to execute recovery procedure'); const result = await response.json();"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "ta(); } } catch (err) { alert(`Error: ${err instanceof Error ? err.message : 'Unknown error'}`); } }; const applyReten"
        },
        {
          "text": "Failed to apply retention policy",
          "type": "errorMessages",
          "context": "}); if (!response.ok) throw new Error('Failed to apply retention policy'); const result = await response.json();"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "refreshData(); } catch (err) { alert(`Error: ${err instanceof Error ? err.message : 'Unknown error'}`); } }; const syncToOffS"
        },
        {
          "text": "Failed to sync to off-site storage",
          "type": "errorMessages",
          "context": "}); if (!response.ok) throw new Error('Failed to sync to off-site storage'); const result = await response.json();"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "refreshData(); } catch (err) { alert(`Error: ${err instanceof Error ? err.message : 'Unknown error'}`); } }; const formatByte"
        },
        {
          "text": "border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <Alert className=\"border-red-200 bg-red-50\"> <AlertTriangle c"
        },
        {
          "text": "Error loading disaster recovery data: {error}",
          "type": "alerts",
          "context": "); } if (error) { return ( <Alert className=\"border-red-200 bg-red-50\"> <AlertTriangle className=\"h-4 w-4 text-red-600"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 14,
        "inputs": 0,
        "labels": 0,
        "alerts": 6,
        "modals": 0,
        "tables": 0,
        "cards": 53
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 16 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "CompanySettingsForm",
      "path": "/app/src/components/settings/CompanySettingsForm.tsx",
      "relativePath": "components/settings/CompanySettingsForm.tsx",
      "category": "settings",
      "type": "form",
      "translationKeys": [
        "settings.company_information",
        "settings.company_details_desc",
        "settings.company_logo",
        "settings.upload_logo_desc",
        "settings.company_name",
        "settings.company_name_required",
        "settings.enter_company_name",
        "settings.company_address",
        "settings.enter_company_address",
        "settings.default_pricing_settings",
        "settings.gold_price_per_gram",
        "settings.gold_price_required",
        "settings.price_positive",
        "settings.labor_cost_percent",
        "settings.labor_required",
        "settings.percentage_positive",
        "settings.percentage_max",
        "settings.profit_margin_percent",
        "settings.profit_required",
        "settings.vat_rate_percent",
        "settings.vat_required",
        "settings.saving",
        "settings.save_changes"
      ],
      "hardcodedStrings": [
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "company_name')} /> {errors.company_name && ( <p className=\"text-sm text-destructive\">{errors.company_na"
        },
        {
          "text": "space-y-2 md:col-span-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.company_name.message}</p> )} </div> <div className"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "der=\"50.00\" /> {errors.default_gold_price && ( <p className=\"text-sm text-destructive\">{errors.de"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.default_gold_price.message}</p> )} </div> <d"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "und\" /> </div> {errors.default_labor_percentage && ( <p className=\"text-sm text-destructive\">{err"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.default_labor_percentage.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "und\" /> </div> {errors.default_profit_percentage && ( <p className=\"text-sm text-destructive\">{er"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.default_profit_percentage.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "und\" /> </div> {errors.default_vat_percentage && ( <p className=\"text-sm text-destructive\">{error"
        },
        {
          "text": "flex justify-end",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.default_vat_percentage.message}</p> )} </div> </"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 1,
        "inputs": 6,
        "labels": 7,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "SalesReports",
      "path": "/app/src/components/reports/SalesReports.tsx",
      "relativePath": "components/reports/SalesReports.tsx",
      "category": "reports",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "text-center py-8",
          "type": "errorMessages",
          "context": "data: topProducts }); } }; if (trendsError || productsError) { return ( <div className=\"text-center py-8\"> <p classN"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 31
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SalesChart",
      "path": "/app/src/components/reports/SalesChart.tsx",
      "relativePath": "components/reports/SalesChart.tsx",
      "category": "reports",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "ReportFilters",
      "path": "/app/src/components/reports/ReportFilters.tsx",
      "relativePath": "components/reports/ReportFilters.tsx",
      "category": "reports",
      "type": "interactive",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 0,
        "labels": 4,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "ReportCanvas",
      "path": "/app/src/components/reports/ReportCanvas.tsx",
      "relativePath": "components/reports/ReportCanvas.tsx",
      "category": "reports",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Visualization title",
          "type": "placeholders",
          "context": "ull h-8 px-2 text-xs border rounded\" placeholder=\"Visualization title\" /> </div> </div> </div> ); };"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 2,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ReportBuilder",
      "path": "/app/src/components/reports/ReportBuilder.tsx",
      "relativePath": "components/reports/ReportBuilder.tsx",
      "category": "reports",
      "type": "interactive",
      "translationKeys": [
        "Please enter a report name",
        "Please select at least one data source"
      ],
      "hardcodedStrings": [
        {
          "text": "Report Name",
          "type": "placeholders",
          "context": "-y-2\"> <Input placeholder=\"Report Name\" value={reportConfig.name} onChange={"
        },
        {
          "text": "Report Description (optional)",
          "type": "placeholders",
          "context": "/> <Textarea placeholder=\"Report Description (optional)\" value={reportConfig.description}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 1,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "LayoutDesigner",
      "path": "/app/src/components/reports/LayoutDesigner.tsx",
      "relativePath": "components/reports/LayoutDesigner.tsx",
      "category": "reports",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Page Size",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Page Size</Label> <Select onValueChange={handlePageSiz"
        },
        {
          "text": "Width (px)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Width (px)</Label> <Input type=\"n"
        },
        {
          "text": "Height (px)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Height (px)</Label> <Input type=\""
        },
        {
          "text": "Primary Color",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Primary Color</Label> <div className=\"flex gap-2\">"
        },
        {
          "text": "Background Color",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Background Color</Label> <div className=\"flex gap-2\">"
        },
        {
          "text": "Font Family",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Font Family</Label> <Select value"
        },
        {
          "text": "Font Size",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Font Size</Label> <div className=\"flex items-center ga"
        },
        {
          "text": "Horizontal Alignment",
          "type": "formLabels",
          "context": "e-y-3\"> <div> <Label className=\"text-xs font-medium mb-2 block\">Horizontal Alignment</Label> <d"
        },
        {
          "text": "Vertical Alignment",
          "type": "formLabels",
          "context": "/div> <div> <Label className=\"text-xs font-medium mb-2 block\">Vertical Alignment</Label> <div"
        },
        {
          "text": "Show Grid",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm\">Show Grid</Label> <p className=\"text-xs text-muted-for"
        },
        {
          "text": "Snap to Grid",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm\">Snap to Grid</Label> <p className=\"text-xs text-muted-"
        },
        {
          "text": "Grid Size",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs\">Grid Size</Label> <div className=\"flex items-center gap-"
        },
        {
          "text": "Auto-save Layout",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm\">Auto-save Layout</Label> <p className=\"text-xs text-mu"
        },
        {
          "text": "Responsive Layout",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm\">Responsive Layout</Label> <p className=\"text-xs text-m"
        },
        {
          "text": "Select size",
          "type": "placeholders",
          "context": "electTrigger> <SelectValue placeholder=\"Select size\" /> </SelectTrigger> <SelectConte"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 16,
        "inputs": 4,
        "labels": 16,
        "alerts": 0,
        "modals": 0,
        "tables": 1,
        "cards": 36
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 15 hardcoded strings with translation keys"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "InventoryReports",
      "path": "/app/src/components/reports/InventoryReports.tsx",
      "relativePath": "components/reports/InventoryReports.tsx",
      "category": "reports",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "text-center py-8",
          "type": "errorMessages",
          "context": ": lowStockData }); } }; if (valuationError || lowStockError) { return ( <div className=\"text-center py-8\"> <p classN"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 38,
        "cards": 31
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "InventoryChart",
      "path": "/app/src/components/reports/InventoryChart.tsx",
      "relativePath": "components/reports/InventoryChart.tsx",
      "category": "reports",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "FilterBuilder",
      "path": "/app/src/components/reports/FilterBuilder.tsx",
      "relativePath": "components/reports/FilterBuilder.tsx",
      "category": "reports",
      "type": "card",
      "translationKeys": [
        "T",
        "\\n"
      ],
      "hardcodedStrings": [
        {
          "text": "Enter values (one per line)",
          "type": "placeholders",
          "context": "ter(v => v.trim()) })} placeholder=\"Enter values (one per line)\" rows={3} /> <div classN"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 6,
        "labels": 3,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 12
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "FieldPalette",
      "path": "/app/src/components/reports/FieldPalette.tsx",
      "relativePath": "components/reports/FieldPalette.tsx",
      "category": "reports",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "DataSourceSelector",
      "path": "/app/src/components/reports/DataSourceSelector.tsx",
      "relativePath": "components/reports/DataSourceSelector.tsx",
      "category": "reports",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Add Relationship",
          "type": "buttonText",
          "context": "e}> Cancel </Button> <Button size=\"sm\" onClick={handleAddRelationship} disabled={!sour"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 1,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CustomerReports",
      "path": "/app/src/components/reports/CustomerReports.tsx",
      "relativePath": "components/reports/CustomerReports.tsx",
      "category": "reports",
      "type": "table",
      "translationKeys": [
        "pdf",
        "csv"
      ],
      "hardcodedStrings": [
        {
          "text": "text-center py-8",
          "type": "errorMessages",
          "context": "ata: debtReport }); } }; if (analysisError || debtError) { return ( <div className=\"text-center py-8\"> <p className="
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 40,
        "cards": 31
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "CustomerChart",
      "path": "/app/src/components/reports/CustomerChart.tsx",
      "relativePath": "components/reports/CustomerChart.tsx",
      "category": "reports",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "ChartConfigPanel",
      "path": "/app/src/components/reports/ChartConfigPanel.tsx",
      "relativePath": "components/reports/ChartConfigPanel.tsx",
      "category": "reports",
      "type": "chart",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Data Fields",
          "type": "formLabels",
          "context": "\" /> </div> <Label className=\"text-sm font-medium\">Data Fields</Label> </div>"
        },
        {
          "text": "Dimensions (Categories)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs font-medium text-muted-foreground\">Dimensions (Categories)</Label>"
        },
        {
          "text": "Measures (Values)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs font-medium text-muted-foreground\">Measures (Values)</Label>"
        },
        {
          "text": "Visualization Type",
          "type": "formLabels",
          "context": "\" /> </div> <Label className=\"text-sm font-medium\">Visualization Type</Label> </div>"
        },
        {
          "text": "Chart Type",
          "type": "formLabels",
          "context": "</div> <Label className=\"text-sm font-medium\">Chart Type</Label> </div>"
        },
        {
          "text": "Chart Title",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"chart-title\" className=\"text-sm font-medium\">Chart Title</Label> <I"
        },
        {
          "text": "X-Axis Label",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"x-axis-label\" className=\"text-sm font-medium\">X-Axis Label</Label>"
        },
        {
          "text": "Y-Axis Label",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"y-axis-label\" className=\"text-sm font-medium\">Y-Axis Label</Label>"
        },
        {
          "text": "Color Palette",
          "type": "formLabels",
          "context": "\" /> </div> <Label className=\"text-sm font-medium\">Color Palette</Label> </div>"
        },
        {
          "text": "Custom Colors",
          "type": "formLabels",
          "context": "x items-center justify-between\"> <Label className=\"text-sm font-medium\">Custom Colors</Label> <Button variant=\"outli"
        },
        {
          "text": "Display Options",
          "type": "formLabels",
          "context": "\" /> </div> <Label className=\"text-sm font-medium\">Display Options</Label> </div>"
        },
        {
          "text": "Show Legend",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm font-medium\">Show Legend</Label> <p className=\"text-x"
        },
        {
          "text": "Show Grid",
          "type": "formLabels",
          "context": "div className=\"space-y-1\"> <Label className=\"text-sm font-medium\">Show Grid</Label> <p className=\"text-x"
        },
        {
          "text": "Show Data Labels",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm font-medium\">Show Data Labels</Label> <p className=\"t"
        },
        {
          "text": "Smooth Lines",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label className=\"text-sm font-medium\">Smooth Lines</Label> <p className=\"text-"
        },
        {
          "text": "Animation Duration (ms)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Animation Duration (ms)</Label> <Input"
        },
        {
          "text": "Add Color",
          "type": "buttonText",
          "context": "nt-medium\">Custom Colors</Label> <Button variant=\"outline\" size=\"sm\" onClick={addCustomColor}> Add Color"
        },
        {
          "text": "Enter chart title",
          "type": "placeholders",
          "context": "te({ title: e.target.value })} placeholder=\"Enter chart title\" /> </div> {visualiz"
        },
        {
          "text": "X-axis label",
          "type": "placeholders",
          "context": "sLabel: e.target.value })} placeholder=\"X-axis label\" /> </div> <div"
        },
        {
          "text": "Y-axis label",
          "type": "placeholders",
          "context": "sLabel: e.target.value })} placeholder=\"Y-axis label\" /> </div> </div>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 5,
        "labels": 17,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 20 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "index",
      "path": "/app/src/components/qr-cards/index.ts",
      "relativePath": "components/qr-cards/index.ts",
      "category": "other",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "QRCardManager",
      "path": "/app/src/components/qr-cards/QRCardManager.tsx",
      "relativePath": "components/qr-cards/QRCardManager.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Invoice Type",
          "type": "formLabels",
          "context": "</div> <div> <Label htmlFor=\"invoice_type\">Invoice Type</Label> <Select value={fi"
        },
        {
          "text": "border-0 shadow-lg",
          "type": "errorMessages",
          "context": "</Card> ))} </div> ) : error ? ( <Card className=\"border-0 shadow-lg\"> <CardContent className=\"p-6 text"
        },
        {
          "text": "All types",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All types\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All themes",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All themes\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All statuses",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All statuses\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 9,
        "inputs": 1,
        "labels": 4,
        "alerts": 0,
        "modals": 10,
        "tables": 0,
        "cards": 13
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "QRCardIntegration",
      "path": "/app/src/components/qr-cards/QRCardIntegration.tsx",
      "relativePath": "components/qr-cards/QRCardIntegration.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "a"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to download QR code:",
          "type": "errorMessages",
          "context": "URL.revokeObjectURL(url); } catch (error) { console.error('Failed to download QR code:', error); } } }; //"
        },
        {
          "text": "border-0 shadow-lg ${className}",
          "type": "errorMessages",
          "context": "console.error('Failed to download QR code:', error); } } }; // Preview mode (before invoice creation) if (showPreview && !"
        },
        {
          "text": "border-0 shadow-lg ${className}",
          "type": "errorMessages",
          "context": "/CardContent> </Card> ); } // Error state or no card exists if (error || !qrCard) { return ( <Card className={`bord"
        },
        {
          "text": "Failed to load QR card",
          "type": "errorMessages",
          "context": "lassName=\"text-sm text-gray-600\"> {error ? 'Failed to load QR card' : 'No QR card found for this invoice'} </p>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 5,
        "tables": 0,
        "cards": 16
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "QRCardDisplay",
      "path": "/app/src/components/qr-cards/QRCardDisplay.tsx",
      "relativePath": "components/qr-cards/QRCardDisplay.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "a"
      ],
      "hardcodedStrings": [
        {
          "text": "Copy Failed",
          "type": "errorMessages",
          "context": "RL copied to clipboard', }); } catch (error) { toast({ title: 'Copy Failed', description: 'Failed to copy URL to"
        },
        {
          "text": "Copy Failed",
          "type": "errorMessages",
          "context": "RL copied to clipboard', }); } catch (error) { toast({ title: 'Copy Failed', description: 'Failed to copy short U"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "QRCardCustomizer",
      "path": "/app/src/components/qr-cards/QRCardCustomizer.tsx",
      "relativePath": "components/qr-cards/QRCardCustomizer.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Card Theme",
          "type": "formLabels",
          "context": "<div className=\"space-y-4\"> <Label className=\"text-base font-medium\">Card Theme</Label> {themesLo"
        },
        {
          "text": "Color Customization",
          "type": "formLabels",
          "context": "<div className=\"space-y-4\"> <Label className=\"text-base font-medium\">Color Customization</Label>"
        },
        {
          "text": "Background Color",
          "type": "formLabels",
          "context": "gap-4\"> <div> <Label htmlFor=\"background_color\">Background Color</Label> <div className=\"flex g"
        },
        {
          "text": "Text Color",
          "type": "formLabels",
          "context": "/div> <div> <Label htmlFor=\"text_color\">Text Color</Label> <div className=\"flex gap-2\">"
        },
        {
          "text": "Accent Color",
          "type": "formLabels",
          "context": "/div> <div> <Label htmlFor=\"accent_color\">Accent Color</Label> <div className=\"flex gap-2\">"
        },
        {
          "text": "Access Control",
          "type": "formLabels",
          "context": "<div className=\"space-y-4\"> <Label className=\"text-base font-medium\">Access Control</Label> <div"
        },
        {
          "text": "Public Access",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label htmlFor=\"is_public\">Public Access</Label> <p className=\"text-sm text-gra"
        },
        {
          "text": "Password Protection",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label htmlFor=\"requires_password\">Password Protection</Label> <p className=\"te"
        },
        {
          "text": "Access Password",
          "type": "formLabels",
          "context": "& ( <div> <Label htmlFor=\"access_password\">Access Password</Label> <Input"
        },
        {
          "text": "Expiration Date (Optional)",
          "type": "formLabels",
          "context": ")} <div> <Label htmlFor=\"expires_at\">Expiration Date (Optional)</Label> <Input"
        },
        {
          "text": "text-sm text-red-500",
          "type": "errorMessages",
          "context": ")} {form.formState.errors.theme && ( <p className=\"text-sm text-red-500\">{form.formState.errors.theme."
        },
        {
          "text": "space-y-4",
          "type": "errorMessages",
          "context": "className=\"text-sm text-red-500\">{form.formState.errors.theme.message}</p> )} </div> <Separator />"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "</div> {form.formState.errors.background_color && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "</div> {form.formState.errors.text_color && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "</div> {form.formState.errors.accent_color && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "space-y-4",
          "type": "errorMessages",
          "context": "500 mt-1\"> {form.formState.errors.accent_color.message} </p> )} </div>"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.access_password && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "Enter password",
          "type": "placeholders",
          "context": "gister('access_password')} placeholder=\"Enter password\" /> {form.formState.errors.acc"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 4,
        "inputs": 8,
        "labels": 11,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 18 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "QRCardAnalytics",
      "path": "/app/src/components/qr-cards/QRCardAnalytics.tsx",
      "relativePath": "components/qr-cards/QRCardAnalytics.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "border-0 shadow-lg ${className}",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error || !analytics) { return ( <Card className={`border-0 shadow-lg ${className}`}>"
        },
        {
          "text": "text-gray-500",
          "type": "errorMessages",
          "context": "<span className=\"text-red-800\">Analytics Error</span> </CardTitle> </CardHeader> <CardContent> <p cla"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 1,
        "cards": 12
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "PublicQRCardViewer",
      "path": "/app/src/components/qr-cards/PublicQRCardViewer.tsx",
      "relativePath": "components/qr-cards/PublicQRCardViewer.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Password required",
          "type": "errorMessages",
          "context": "setCardData(mockCardData); } catch (error: any) { const errorMessage = error.response?.data?.detail || error.message;"
        },
        {
          "text": "Invalid password",
          "type": "errorMessages",
          "context": "if (errorMessage.includes('Password required') || errorMessage.includes('Invalid password')) { setShowPasswordInput(true); setError("
        },
        {
          "text": "mb-4 p-3 bg-red-50 border border-red-200 rounded-lg",
          "type": "errorMessages",
          "context": "protected</p> </div> {error && ( <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">"
        },
        {
          "text": "space-y-4",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{error}</p> </div> )} <div className=\"space-y-4\">"
        },
        {
          "text": "max-w-md mx-auto ${className}",
          "type": "errorMessages",
          "context": "</Card> </div> ); } if (error && !showPasswordInput) { return ( <div className={`max-w-md mx-auto ${className}`}"
        },
        {
          "text": "Enter password",
          "type": "placeholders",
          "context": "type=\"password\" placeholder=\"Enter password\" value={password} onChange={(e) => set"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 1,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "UniversalSearch",
      "path": "/app/src/components/search/UniversalSearch.tsx",
      "relativePath": "components/search/UniversalSearch.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [
        "search.entityTypes.inventory",
        "search.entityTypes.invoices",
        "search.entityTypes.customers",
        "search.entityTypes.accounting",
        "search.title",
        "search.analytics",
        "search.presets",
        "search.filters",
        "search.placeholder",
        "search.activeFilters",
        "search.clearFilters"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to save preset:",
          "type": "errorMessages",
          "context": "searchResults, isSearching, searchError, totalResults, totalPages, hasNextPage, hasPrevPage, suggestions,"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 6,
        "inputs": 1,
        "labels": 0,
        "alerts": 0,
        "modals": 10,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "TagFilter",
      "path": "/app/src/components/search/TagFilter.tsx",
      "relativePath": "components/search/TagFilter.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "search.filters.addTag",
        "search.filters.suggestions",
        "search.filters.createTag",
        "search.filters.popularTags",
        "search.filters.predefinedTagsOnly",
        "search.filters.clearAllTags"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 1,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 2
      },
      "recommendations": []
    },
    {
      "name": "SearchSuggestions",
      "path": "/app/src/components/search/SearchSuggestions.tsx",
      "relativePath": "components/search/SearchSuggestions.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "search.suggestions.queries",
        "search.entityTypes.${suggestion.entity_type}",
        "search.suggestions.categories",
        "search.suggestions.tags",
        "search.suggestions.recent"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "SearchResults",
      "path": "/app/src/components/search/SearchResults.tsx",
      "relativePath": "components/search/SearchResults.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [
        "search.results.sku",
        "search.results.stock",
        "search.results.price",
        "search.results.invoiceNumber",
        "search.results.amount",
        "search.results.status",
        "search.results.phone",
        "search.results.email",
        "search.results.debt",
        "search.results.accountCode",
        "search.results.entryType",
        "search.entityTypes.${item.entity_type}",
        "search.results.updated",
        "search.results.view",
        "search.results.edit",
        "search.results.share",
        "search.results.item",
        "search.results.type",
        "search.results.details",
        "search.results.relevance",
        "search.results.actions",
        "search.results.noResults",
        "search.results.noResultsDescription",
        "search.sort.relevance",
        "search.sort.date",
        "search.sort.name",
        "search.sort.updated",
        "search.pagination.previous",
        "search.pagination.next"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 10,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 1,
        "cards": 14
      },
      "recommendations": []
    },
    {
      "name": "SearchPresets",
      "path": "/app/src/components/search/SearchPresets.tsx",
      "relativePath": "components/search/SearchPresets.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "search.presets.entityTypes",
        "search.presets.categories",
        "search.presets.tags",
        "search.presets.priceRange",
        "search.presets.dateRange",
        "search.presets.noFilters",
        "search.presets.title",
        "search.presets.description",
        "search.presets.create",
        "search.presets.createTitle",
        "search.presets.name",
        "search.presets.namePlaceholder",
        "search.presets.descriptionPlaceholder",
        "search.presets.makePublic",
        "search.presets.makeDefault",
        "common.cancel",
        "common.save",
        "search.presets.currentFilters",
        "search.presets.saveCurrentFilters",
        "search.presets.noPresets",
        "search.presets.default",
        "search.presets.public",
        "search.presets.private",
        "search.presets.created",
        "search.presets.used",
        "search.presets.times",
        "search.presets.lastUsed",
        "search.presets.apply",
        "search.presets.deleteTitle",
        "common.delete",
        "search.presets.editTitle"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to create preset:",
          "type": "errorMessages",
          "context": "setShowCreateDialog(false); } catch (error) { console.error('Failed to create preset:', error); } }; // Handle update"
        },
        {
          "text": "Failed to update preset:",
          "type": "errorMessages",
          "context": "false); setIsDefault(false); } catch (error) { console.error('Failed to update preset:', error); } }; // Start editing"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 9,
        "inputs": 2,
        "labels": 8,
        "alerts": 9,
        "modals": 9,
        "tables": 0,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "SearchFilters",
      "path": "/app/src/components/search/SearchFilters.tsx",
      "relativePath": "components/search/SearchFilters.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "search.filters.minPrice",
        "search.filters.maxPrice",
        "search.filters.fromDate",
        "search.filters.selectDate",
        "search.filters.toDate",
        "search.filters.status.${status}",
        "search.filters.title",
        "search.filters.categories",
        "search.filters.tags",
        "search.filters.priceRange",
        "search.entityTypes.${entityType}",
        "search.filters.dateRange",
        "search.filters.status.title",
        "search.filters.customAttributes",
        "search.filters.invoiceSpecific",
        "search.filters.invoiceType",
        "search.filters.invoiceType.${type}",
        "search.filters.paymentStatus",
        "search.filters.paymentStatus.${status}",
        "search.filters.customerSpecific",
        "search.filters.hasDebt",
        "search.filters.debtRange",
        "search.filters.minDebt",
        "search.filters.maxDebt"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 8,
        "inputs": 4,
        "labels": 13,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "SearchAnalytics",
      "path": "/app/src/components/search/SearchAnalytics.tsx",
      "relativePath": "components/search/SearchAnalytics.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "T",
        "search.analytics.errorLoading",
        "search.analytics.title",
        "search.analytics.description",
        "search.analytics.periods.1d",
        "search.analytics.periods.7d",
        "search.analytics.periods.30d",
        "search.analytics.periods.90d",
        "search.analytics.periods.custom",
        "search.analytics.export",
        "search.analytics.startDate",
        "search.analytics.selectStartDate",
        "search.analytics.endDate",
        "search.analytics.selectEndDate",
        "search.analytics.totalSearches",
        "search.analytics.uniqueUsers",
        "search.analytics.avgResults",
        "search.analytics.avgResponseTime",
        "search.analytics.mostSearchedTerms",
        "search.analytics.searches",
        "search.analytics.mostUsedFilters",
        "search.analytics.uses",
        "search.analytics.entityDistribution",
        "search.entityTypes.${entityType}",
        "search.analytics.searchPerformance",
        "search.analytics.averageResponseTime",
        "search.analytics.slowQueries",
        "search.analytics.conversionRates",
        "search.analytics.searchToView",
        "search.analytics.searchToAction"
      ],
      "hardcodedStrings": [
        {
          "text": "space-y-4",
          "type": "errorMessages",
          "context": "getDateRange(); const { analytics, isLoading, error } = useSearchAnalytics(start, end); if (isLoading) { return ( <div className="
        },
        {
          "text": "p-6 text-center",
          "type": "errorMessages",
          "context": "))} </div> ); } if (error || !analytics) { return ( <Card> <CardContent className=\"p-6 text-center\""
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 34
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "CategoryTreeFilter",
      "path": "/app/src/components/search/CategoryTreeFilter.tsx",
      "relativePath": "components/search/CategoryTreeFilter.tsx",
      "category": "other",
      "type": "interactive",
      "translationKeys": [
        "search.filters.selectAll",
        "search.filters.searchCategories",
        "search.filters.clearAll",
        "search.filters.noCategoriesFound",
        "search.filters.noCategories",
        "search.filters.selectTopLevel"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 1,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "AttributeFilter",
      "path": "/app/src/components/search/AttributeFilter.tsx",
      "relativePath": "components/search/AttributeFilter.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "search.filters.operators.equals",
        "search.filters.operators.notEquals",
        "search.filters.operators.contains",
        "search.filters.operators.notContains",
        "search.filters.operators.startsWith",
        "search.filters.operators.endsWith",
        "search.filters.operators.greaterThan",
        "search.filters.operators.lessThan",
        "search.filters.operators.greaterEqual",
        "search.filters.operators.lessEqual",
        "search.filters.operators.between",
        "search.filters.operators.after",
        "search.filters.operators.before",
        "search.filters.operators.in",
        "search.filters.operators.notIn",
        "search.filters.enterValue",
        "search.filters.min",
        "search.filters.max",
        "search.filters.enterNumber",
        "search.filters.fromDate",
        "search.filters.toDate",
        "search.filters.selectDate",
        "search.filters.selectOption",
        "search.filters.true",
        "search.filters.false",
        "search.filters.attributeTypes.${attribute.type}",
        "search.filters.operator",
        "search.filters.value",
        "search.filters.addAttributeFilter",
        "search.filters.selectAttribute",
        "common.cancel",
        "search.filters.clearAllFilters",
        "search.filters.noAttributesAvailable"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 4,
        "labels": 5,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": []
    },
    {
      "name": "Sidebar",
      "path": "/app/src/components/layout/Sidebar.tsx",
      "relativePath": "components/layout/Sidebar.tsx",
      "category": "layout",
      "type": "interactive",
      "translationKeys": [
        "app.title",
        "common.gold_shop_management",
        "common.professional_edition",
        "common.version",
        "common.system_online"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "MobileSidebar",
      "path": "/app/src/components/layout/MobileSidebar.tsx",
      "relativePath": "components/layout/MobileSidebar.tsx",
      "category": "layout",
      "type": "interactive",
      "translationKeys": [
        "common.gold_shop_management"
      ],
      "hardcodedStrings": [
        {
          "text": "Open navigation menu",
          "type": "ariaLabels",
          "context": "-sm hover:shadow-md' )} aria-label=\"Open navigation menu\" > <motion.div whileHover={{"
        },
        {
          "text": "Close navigation menu",
          "type": "ariaLabels",
          "context": ":to-teal-100 hover:text-green-700\" aria-label=\"Close navigation menu\" > <X className=\"h-4 w-4\" />"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "MainLayout",
      "path": "/app/src/components/layout/MainLayout.tsx",
      "relativePath": "components/layout/MainLayout.tsx",
      "category": "layout",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "Header",
      "path": "/app/src/components/layout/Header.tsx",
      "relativePath": "components/layout/Header.tsx",
      "category": "layout",
      "type": "interactive",
      "translationKeys": [
        " ",
        "common.gold_shop_management",
        "common.professional_edition",
        "common.search",
        "common.language",
        "common.profile",
        "auth.logout"
      ],
      "hardcodedStrings": [
        {
          "text": "View all notifications",
          "type": "buttonText",
          "context": "order-border bg-muted/20\"> <Button variant=\"ghost\" size=\"sm\""
        },
        {
          "text": "Change language",
          "type": "ariaLabels",
          "context": "r:shadow-md' )} aria-label=\"Change language\" > <Globe className=\"h-4 w-4\" />"
        },
        {
          "text": "User menu",
          "type": "ariaLabels",
          "context": "r:shadow-md' )} aria-label=\"User menu\" > <Avatar className=\"h-8 w-8 ring-2 ring-prim"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        }
      ]
    },
    {
      "name": "BreadcrumbNav",
      "path": "/app/src/components/layout/BreadcrumbNav.tsx",
      "relativePath": "components/layout/BreadcrumbNav.tsx",
      "category": "layout",
      "type": "interactive",
      "translationKeys": [
        "/",
        "common.quick_access"
      ],
      "hardcodedStrings": [
        {
          "text": "Go back",
          "type": "ariaLabels",
          "context": "uted-foreground' )} aria-label=\"Go back\" > <ArrowLeft className=\"h-4 w-4\" /> </"
        },
        {
          "text": "Go forward",
          "type": "ariaLabels",
          "context": "uted-foreground' )} aria-label=\"Go forward\" > <ArrowRight className=\"h-4 w-4\" />"
        },
        {
          "text": "Navigation history",
          "type": "ariaLabels",
          "context": "ary-600' )} aria-label=\"Navigation history\" > <History className=\"h-4 w-4\" /"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "QRCardAnalytics",
      "path": "/app/src/components/invoices/QRCardAnalytics.tsx",
      "relativePath": "components/invoices/QRCardAnalytics.tsx",
      "category": "invoices",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 4,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "PriceOverrideDialog",
      "path": "/app/src/components/invoices/PriceOverrideDialog.tsx",
      "relativePath": "components/invoices/PriceOverrideDialog.tsx",
      "category": "invoices",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "New Unit Price *",
          "type": "formLabels",
          "context": "rride Input */} <div> <Label htmlFor=\"override_price\">New Unit Price *</Label> <Input id=\""
        },
        {
          "text": "Reason for Override *",
          "type": "formLabels",
          "context": "eason Input */} <div> <Label htmlFor=\"reason\">Reason for Override *</Label> <Input id=\"rea"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.override_price && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.reason && ( <p className=\"text-sm text-red-500 mt-1\"> {fo"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 2,
        "inputs": 2,
        "labels": 2,
        "alerts": 4,
        "modals": 4,
        "tables": 0,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "PaymentForm",
      "path": "/app/src/components/invoices/PaymentForm.tsx",
      "relativePath": "components/invoices/PaymentForm.tsx",
      "category": "invoices",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Payment Amount *",
          "type": "formLabels",
          "context": "{/* Amount */} <div> <Label htmlFor=\"amount\">Payment Amount *</Label> <Input id=\"amount\""
        },
        {
          "text": "Payment Method *",
          "type": "formLabels",
          "context": "Payment Method */} <div> <Label htmlFor=\"payment_method\">Payment Method *</Label> <Select value={"
        },
        {
          "text": "Description (Optional)",
          "type": "formLabels",
          "context": "{/* Description */} <div> <Label htmlFor=\"description\">Description (Optional)</Label> <Textarea id"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "})} /> {form.formState.errors.amount && ( <p className=\"text-sm text-red-500 mt-1\"> {form.f"
        },
        {
          "text": "text-xs text-gray-500 mt-1",
          "type": "errorMessages",
          "context": "t-red-500 mt-1\"> {form.formState.errors.amount.message} </p> )} <p className=\"text-xs text-g"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "</Select> {form.formState.errors.payment_method && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "Select payment method",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select payment method\" /> </SelectTrigger> <SelectContent"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 2,
        "inputs": 1,
        "labels": 3,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 7 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "PDFGenerator",
      "path": "/app/src/components/invoices/PDFGenerator.tsx",
      "relativePath": "components/invoices/PDFGenerator.tsx",
      "category": "invoices",
      "type": "utility",
      "translationKeys": [
        "blob"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "InvoicePreview",
      "path": "/app/src/components/invoices/InvoicePreview.tsx",
      "relativePath": "components/invoices/InvoicePreview.tsx",
      "category": "invoices",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "InvoiceList",
      "path": "/app/src/components/invoices/InvoiceList.tsx",
      "relativePath": "components/invoices/InvoiceList.tsx",
      "category": "invoices",
      "type": "table",
      "translationKeys": [
        "Cannot delete invoice with payments. Please cancel instead."
      ],
      "hardcodedStrings": [
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "ame=\"p-6\"> <p className=\"text-red-500\">Error loading invoices: {error instanceof Error ? error.message : 'Unknown error'}</p> </Ca"
        },
        {
          "text": "All Types",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All Types\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All Statuses",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All Statuses\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All Customers",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All Customers\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All Workflows",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All Workflows\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All Dates",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All Dates\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 1,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 29,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "InvoiceForm",
      "path": "/app/src/components/invoices/InvoiceForm.tsx",
      "relativePath": "components/invoices/InvoiceForm.tsx",
      "category": "invoices",
      "type": "form",
      "translationKeys": [
        "piece"
      ],
      "hardcodedStrings": [
        {
          "text": "Choose Invoice Type *",
          "type": "formLabels",
          "context": "<div className=\"space-y-4\"> <Label className=\"text-base font-medium\">Choose Invoice Type *</Label> <RadioGroup"
        },
        {
          "text": "Gold Invoice",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"gold\" className=\"text-base font-medium text-amber-800 cursor-pointer\">"
        },
        {
          "text": "General Invoice",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"general\" className=\"text-base font-medium text-blue-800 cursor-pointer\">"
        },
        {
          "text": "Customer *",
          "type": "formLabels",
          "context": "me=\"space-y-4\"> <div> <Label htmlFor=\"customer_id\">Customer *</Label> <Select value={form."
        },
        {
          "text": "Gold Price (per gram) *",
          "type": "formLabels",
          "context": "s-4 gap-4\"> <div> <Label htmlFor=\"gold_price_per_gram\">Gold Price (per gram) *</Label> <Input"
        },
        {
          "text": "Select from Inventory (Optional)",
          "type": "formLabels",
          "context": "\"col-span-12 md:col-span-4\"> <Label>Select from Inventory (Optional)</Label> <Select"
        },
        {
          "text": "Item Name *",
          "type": "formLabels",
          "context": "\"col-span-12 md:col-span-3\"> <Label>Item Name *</Label> <Input placeholder=\"Enter ite"
        },
        {
          "text": "Quantity *",
          "type": "formLabels",
          "context": "=\"col-span-6 md:col-span-2\"> <Label>Quantity *</Label> <Input type=\"number\""
        },
        {
          "text": "Unit Price *",
          "type": "formLabels",
          "context": "col-span-6 md:col-span-2\"> <Label>Unit Price *</Label> <Input type=\"number\""
        },
        {
          "text": "Weight (grams) *",
          "type": "formLabels",
          "context": "col-span-6 md:col-span-2\"> <Label>Weight (grams) *</Label> <Input type=\"number\""
        },
        {
          "text": "Total Price",
          "type": "formLabels",
          "context": "div className=\"text-sm\"> <Label>Total Price</Label> <p className=\"font-medium text-lg\">"
        },
        {
          "text": "Require approval before affecting inventory stock",
          "type": "formLabels",
          "context": "border-gray-300\" /> <Label htmlFor=\"requires_approval\" className=\"text-sm font-medium\"> Require approva"
        },
        {
          "text": "Notes (Optional)",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"notes\">Notes (Optional)</Label> <textarea id=\"notes\""
        },
        {
          "text": "Please select invoice type",
          "type": "errorMessages",
          "context": "{ type: z.enum(['gold', 'general'], { required_error: 'Please select invoice type' }), customer_id: z.string().min(1, 'Please select a customer'"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "p> {form.formState.errors.type && ( <p className=\"text-sm text-red-500 mt-1\"> {form"
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-br from-green-50 to-emerald-100/50",
          "type": "errorMessages",
          "context": "red-500 mt-1\"> {form.formState.errors.type.message} </p> )} </div> </CardCo"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "</Select> {form.formState.errors.customer_id && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "p-3 bg-green-100/50 rounded-lg border border-green-200",
          "type": "errorMessages",
          "context": "red-500 mt-1\"> {form.formState.errors.customer_id.message} </p> )} </div>"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.gold_fields?.gold_price_per_gram && ( <p className=\"text-sm text-red-500 m"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.gold_fields?.labor_cost_percentage && ( <p className=\"text-sm text-red-500"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.gold_fields?.profit_percentage && ( <p className=\"text-sm text-red-500 mt-"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.gold_fields?.vat_percentage && ( <p className=\"text-sm text-red-500 mt-1\">"
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-br from-purple-50 to-violet-100/50",
          "type": "errorMessages",
          "context": "d-500 mt-1\"> {form.formState.errors.gold_fields.vat_percentage.message} </p> )}"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.items?.[index]?.item_name && ( <p className=\"text-sm text-red-500 mt-1"
        },
        {
          "text": "col-span-6 md:col-span-2",
          "type": "errorMessages",
          "context": "0 mt-1\"> {form.formState.errors.items[index]?.item_name?.message} </p> )}"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "/> {form.formState.errors.items?.[index]?.weight_grams && ( <p className=\"text-sm text-red-500"
        },
        {
          "text": "text-sm text-red-500",
          "type": "errorMessages",
          "context": "> ))} {form.formState.errors.items && ( <p className=\"text-sm text-red-500\"> {form.formSta"
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-br from-indigo-50 to-blue-100/50",
          "type": "errorMessages",
          "context": "m text-red-500\"> {form.formState.errors.items.message} </p> )} </CardContent> </Card>"
        },
        {
          "text": "Select a customer",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select a customer\" /> </SelectTrigger> <SelectContent"
        },
        {
          "text": "Enter item name",
          "type": "placeholders",
          "context": "<Input placeholder=\"Enter item name\" {...form.register(`items.${index}.item_name`)}"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 8,
        "inputs": 8,
        "labels": 16,
        "alerts": 5,
        "modals": 0,
        "tables": 0,
        "cards": 40
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 30 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "UniversalInventoryItemForm",
      "path": "/app/src/components/inventory/UniversalInventoryItemForm.tsx",
      "relativePath": "components/inventory/UniversalInventoryItemForm.tsx",
      "category": "inventory",
      "type": "form",
      "translationKeys": [
        "inventory.select_option",
        ",",
        "inventory.edit_item",
        "inventory.add_item",
        "inventory.basic_info",
        "inventory.attributes",
        "inventory.images",
        "inventory.advanced",
        "inventory.item_name",
        "inventory.name_required",
        "inventory.enter_item_name",
        "inventory.persian_name",
        "inventory.enter_persian_name",
        "inventory.category",
        "inventory.category_required",
        "inventory.select_category",
        "inventory.sku",
        "inventory.sku_required",
        "inventory.auto_generated",
        "inventory.unit_of_measure",
        "inventory.piece",
        "inventory.kilogram",
        "inventory.gram",
        "inventory.liter",
        "inventory.meter",
        "inventory.box",
        "inventory.cost_price",
        "inventory.cost_price_required",
        "inventory.price_positive",
        "inventory.sale_price",
        "inventory.sale_price_required",
        "inventory.suggested",
        "inventory.currency",
        "inventory.current_stock",
        "inventory.stock_required",
        "inventory.stock_positive",
        "inventory.low_stock_threshold",
        "inventory.threshold_positive",
        "inventory.reorder_point",
        "inventory.reorder_positive",
        "inventory.description",
        "inventory.enter_description",
        "inventory.category_attributes",
        "inventory.custom_attributes",
        "inventory.add_attribute",
        "inventory.attribute_name",
        "inventory.enter_name",
        "inventory.attribute_value",
        "inventory.enter_value",
        "inventory.tags",
        "inventory.enter_tags_comma_separated",
        "inventory.tags_help",
        "inventory.product_images",
        "inventory.upload_images",
        "inventory.choose_files",
        "inventory.identifiers",
        "inventory.barcode",
        "inventory.enter_barcode",
        "inventory.generate",
        "inventory.qr_code",
        "inventory.enter_qr_code",
        "inventory.gold_specific",
        "inventory.weight_grams",
        "inventory.advanced_stock",
        "inventory.max_stock_level",
        "inventory.optional",
        "inventory.max_stock_help",
        "common.cancel",
        "common.saving",
        "common.update",
        "common.create"
      ],
      "hardcodedStrings": [
        {
          "text": "{isSubmitting || isLoading ? (",
          "type": "buttonText",
          "context": "mon.cancel')} </Button> <Button type=\"submit\" disabled={isSubmitting || isLoading}"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": ")} </Label> {renderField()} {error && ( <p className=\"text-sm text-red-600\">{error}</p> )} </div> ); };"
        },
        {
          "text": "Failed to save item:",
          "type": "errorMessages",
          "context": "Submit(formData); onClose(); } catch (error) { console.error('Failed to save item:', error); } }; const getCategoryAtt"
        },
        {
          "text": "max-w-4xl max-h-[90vh] overflow-hidden",
          "type": "errorMessages",
          "context": "r) { console.error('Failed to save item:', error); } }; const getCategoryAttributes = (): AttributeDefinition[] => { return s"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "')} /> {errors.name && ( <p className=\"text-sm text-red-600\">{errors.name.message}</p"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.name.message}</p> )} </div> <div"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": ")} /> {errors.category_id && ( <p className=\"text-sm text-red-600\">{errors.category_"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.category_id.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "')} /> {errors.sku && ( <p className=\"text-sm text-red-600\">{errors.sku.message}</p>"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.sku.message}</p> )} </div> <div"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "00\" /> {errors.cost_price && ( <p className=\"text-sm text-red-600\">{errors.cost_price"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.cost_price.message}</p> )} </div>"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "00\" /> {errors.sale_price && ( <p className=\"text-sm text-red-600\">{errors.sale_price"
        },
        {
          "text": "text-xs text-muted-foreground",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.sale_price.message}</p> )} {watchedCostPrice > 0 &&"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "\"0\" /> {errors.stock_quantity && ( <p className=\"text-sm text-red-600\">{errors.stock_"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.stock_quantity.message}</p> )} </div>"
        },
        {
          "text": "flex items-center justify-between",
          "type": "errorMessages",
          "context": "e={field.onChange} error={fieldState.error?.message} /> )}"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 8,
        "inputs": 20,
        "labels": 21,
        "alerts": 0,
        "modals": 5,
        "tables": 0,
        "cards": 24
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 17 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "UniversalCategoryTreeView",
      "path": "/app/src/components/inventory/UniversalCategoryTreeView.tsx",
      "relativePath": "components/inventory/UniversalCategoryTreeView.tsx",
      "category": "inventory",
      "type": "interactive",
      "translationKeys": [
        "inventory.items",
        "inventory.add_subcategory",
        "inventory.edit_category",
        "inventory.manage_images",
        "inventory.delete_category",
        "inventory.no_categories",
        "inventory.create_first_category",
        "inventory.add_category"
      ],
      "hardcodedStrings": [
        {
          "text": "handleAdd()} variant=\"outline\">",
          "type": "buttonText",
          "context": "y.create_first_category')} </p> <Button onClick={() => handleAdd()} variant=\"outline\"> <Plus className=\"h-4 w-4 mr-2\" />"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        }
      ]
    },
    {
      "name": "UniversalAdvancedSearch",
      "path": "/app/src/components/inventory/UniversalAdvancedSearch.tsx",
      "relativePath": "components/inventory/UniversalAdvancedSearch.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [
        "inventory.advanced_search",
        "inventory.quick_filters",
        "inventory.search",
        "inventory.search_items",
        "inventory.suggestions",
        "inventory.sku",
        "inventory.search_by_sku",
        "inventory.barcode",
        "inventory.search_by_barcode",
        "inventory.categories",
        "inventory.no_categories",
        "inventory.tags",
        "inventory.add_tag",
        "inventory.available_tags",
        "inventory.price_range",
        "inventory.min_price",
        "inventory.max_price",
        "inventory.stock_filters",
        "inventory.low_stock_only",
        "inventory.out_of_stock_only",
        "inventory.general_filters",
        "inventory.has_images",
        "inventory.show_inactive",
        "inventory.sort_by",
        "inventory.name",
        "inventory.price",
        "inventory.stock",
        "inventory.created",
        "inventory.updated",
        "inventory.ascending",
        "inventory.descending",
        "inventory.preset_name",
        "inventory.save_filters"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 16,
        "inputs": 7,
        "labels": 18,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "ProductVariantManager",
      "path": "/app/src/components/inventory/ProductVariantManager.tsx",
      "relativePath": "components/inventory/ProductVariantManager.tsx",
      "category": "inventory",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Variant Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"variant-name\">Variant Name *</Label> <Input id=\""
        },
        {
          "text": "SKU *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"variant-sku\">SKU *</Label> <Input id=\"variant-sk"
        },
        {
          "text": "Purchase Price ($) *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"purchase-price\">Purchase Price ($) *</Label> <Input"
        },
        {
          "text": "Sell Price ($) *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"sell-price\">Sell Price ($) *</Label> <Input id=\""
        },
        {
          "text": "Markup Percentage",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Markup Percentage</Label> <div className=\"flex items-center gap-2\">"
        },
        {
          "text": "Stock Quantity *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"stock-quantity\">Stock Quantity *</Label> <Input"
        },
        {
          "text": "Min Stock Level",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"min-stock\">Min Stock Level</Label> <Input id=\"mi"
        },
        {
          "text": "Weight (grams) *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"weight\">Weight (grams) *</Label> <Input id=\"weig"
        },
        {
          "text": "Variant is active and available for sale",
          "type": "formLabels",
          "context": "tive: !!checked }))} /> <Label>Variant is active and available for sale</Label> </div> </div>"
        },
        {
          "text": "SELL PRICE",
          "type": "formLabels",
          "context": "4\"> <div> <Label className=\"text-xs font-medium text-muted-foreground\">SELL PRICE</Label>"
        },
        {
          "text": "Attribute name",
          "type": "placeholders",
          "context": "'name', e.target.value)} placeholder=\"Attribute name\" /> <Input"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 12,
        "inputs": 12,
        "labels": 14,
        "alerts": 10,
        "modals": 5,
        "tables": 19,
        "cards": 16
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 11 hardcoded strings with translation keys"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ProductManagement",
      "path": "/app/src/components/inventory/ProductManagement.tsx",
      "relativePath": "components/inventory/ProductManagement.tsx",
      "category": "inventory",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Product Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"name\">Product Name *</Label> <Input id=\""
        },
        {
          "text": "SKU *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"sku\">SKU *</Label> <Input id=\"sku\""
        },
        {
          "text": "Purchase Price ($) *",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"purchase_price\">Purchase Price ($) *</Label> <Input"
        },
        {
          "text": "Sell Price ($) *",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"sell_price\">Sell Price ($) *</Label> <Input"
        },
        {
          "text": "Markup (%)",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"markup_percentage\">Markup (%)</Label> <Input"
        },
        {
          "text": "Weight (grams) *",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"weight_grams\">Weight (grams) *</Label> <Input"
        },
        {
          "text": "Current Stock *",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"stock_quantity\">Current Stock *</Label> <Input"
        },
        {
          "text": "Minimum Stock Level",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"min_stock_level\">Minimum Stock Level</Label> <Input"
        },
        {
          "text": "Selected Categories",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label>Selected Categories</Label> <div className=\"flex flex-wrap gap-2\">"
        },
        {
          "text": "Variant Name",
          "type": "formLabels",
          "context": "ame=\"space-y-2\"> <Label>Variant Name</Label> <Input"
        },
        {
          "text": "Variant SKU",
          "type": "formLabels",
          "context": "ame=\"space-y-2\"> <Label>Variant SKU</Label> <Input"
        },
        {
          "text": "Purchase Price ($)",
          "type": "formLabels",
          "context": "ame=\"space-y-2\"> <Label>Purchase Price ($)</Label> <Input"
        },
        {
          "text": "Sell Price ($)",
          "type": "formLabels",
          "context": "ame=\"space-y-2\"> <Label>Sell Price ($)</Label> <Input"
        },
        {
          "text": "Stock Quantity",
          "type": "formLabels",
          "context": "ame=\"space-y-2\"> <Label>Stock Quantity</Label> <Input"
        },
        {
          "text": "Meta Title",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"meta_title\">Meta Title</Label> <Input id"
        },
        {
          "text": "Meta Description",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"meta_description\">Meta Description</Label> <Textarea"
        },
        {
          "text": "Product is active and visible",
          "type": "formLabels",
          "context": "ed)} /> <Label>Product is active and visible</Label> </div> </div>"
        },
        {
          "text": "Failed to upload images:",
          "type": "errorMessages",
          "context": "setValue('images', updatedImages); } catch (error) { console.error('Failed to upload images:', error); } finally { setIsUploa"
        },
        {
          "text": "Failed to save product:",
          "type": "errorMessages",
          "context": "Data); } onClose(); } catch (error) { console.error('Failed to save product:', error); } }; return ( <Di"
        },
        {
          "text": "max-w-6xl max-h-[90vh] overflow-hidden",
          "type": "errorMessages",
          "context": "{ console.error('Failed to save product:', error); } }; return ( <Dialog open onOpenChange={onClose}> <DialogContent c"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "8K\" /> {errors.name && ( <p className=\"text-sm text-red-600\">{errors.name.message}</p"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.name.message}</p> )} </div> <div"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "01\" /> {errors.sku && ( <p className=\"text-sm text-red-600\">{errors.sku.message}</p>"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.sku.message}</p> )} </div> </div>"
        },
        {
          "text": "SEO-friendly title for search engines",
          "type": "placeholders",
          "context": "egister('seo.meta_title')} placeholder=\"SEO-friendly title for search engines\" /> </div"
        },
        {
          "text": "Brief description for search engine results",
          "type": "placeholders",
          "context": "r('seo.meta_description')} placeholder=\"Brief description for search engine results\" rows={3}"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 9,
        "inputs": 17,
        "labels": 22,
        "alerts": 0,
        "modals": 5,
        "tables": 0,
        "cards": 10
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 26 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "MultiCategorySelector",
      "path": "/app/src/components/inventory/MultiCategorySelector.tsx",
      "relativePath": "components/inventory/MultiCategorySelector.tsx",
      "category": "inventory",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Selected Categories:",
          "type": "formLabels",
          "context": "( <div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Selected Categories:</Label> <div className=\"flex"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 1,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "InventoryList",
      "path": "/app/src/components/inventory/InventoryList.tsx",
      "relativePath": "components/inventory/InventoryList.tsx",
      "category": "inventory",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "setShowForm(true)} className=\"flex items-center gap-2\">",
          "type": "buttonText",
          "context": "k levels </p> </div> <Button onClick={() => setShowForm(true)} className=\"flex items-center gap-2\"> <Plus clas"
        },
        {
          "text": "Are you sure you want to delete",
          "type": "errorMessages",
          "context": "h data const { data: inventoryData, isLoading, error } = useInventoryItems({ search: search || undefined, category_id: categoryFilter ||"
        },
        {
          "text": "Failed to delete item:",
          "type": "errorMessages",
          "context": "temMutation.mutateAsync(item.id); } catch (error) { console.error('Failed to delete item:', error); } } }; const h"
        },
        {
          "text": "All Categories",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All Categories\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 1,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 23,
        "cards": 10
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "InventoryItemForm",
      "path": "/app/src/components/inventory/InventoryItemForm.tsx",
      "relativePath": "components/inventory/InventoryItemForm.tsx",
      "category": "inventory",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Product Image",
          "type": "formLabels",
          "context": "<div className=\"space-y-4\"> <Label>Product Image</Label> <Card> <CardContent className=\"p-4\">"
        },
        {
          "text": "Item Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"name\">Item Name *</Label> <Input id=\"name\""
        },
        {
          "text": "Category *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"category_id\">Category *</Label> <Select value={watch"
        },
        {
          "text": "Weight (grams) *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"weight_grams\">Weight (grams) *</Label> <Input id=\"we"
        },
        {
          "text": "Purchase Price ($) *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"purchase_price\">Purchase Price ($) *</Label> <Input"
        },
        {
          "text": "Sell Price ($) *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"sell_price\">Sell Price ($) *</Label> <Input id=\"sell"
        },
        {
          "text": "Current Stock *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"stock_quantity\">Current Stock *</Label> <Input id=\"s"
        },
        {
          "text": "Minimum Stock Level",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"min_stock_level\">Minimum Stock Level</Label> <Input"
        },
        {
          "text": "Failed to save item:",
          "type": "errorMessages",
          "context": "Data); } onClose(); } catch (error) { setIsUploading(false); console.error('Failed to save item:', error); }"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "Gold Ring 18K\" /> {errors.name && ( <p className=\"text-sm text-red-600\">{errors.name.message}</p>"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.name.message}</p> )} </div> <div className=\"space-"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "Content> </Select> {errors.category_id && ( <p className=\"text-sm text-red-600\">{errors.category_id.mes"
        },
        {
          "text": "grid grid-cols-1 md:grid-cols-3 gap-4",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.category_id.message}</p> )} </div> </div>"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "eholder=\"0.000\" /> {errors.weight_grams && ( <p className=\"text-sm text-red-600\">{errors.weight_grams.m"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.weight_grams.message}</p> )} </div> <div className"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "ceholder=\"0.00\" /> {errors.purchase_price && ( <p className=\"text-sm text-red-600\">{errors.purchase_pri"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.purchase_price.message}</p> )} </div> <div classNa"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "ceholder=\"0.00\" /> {errors.sell_price && ( <p className=\"text-sm text-red-600\">{errors.sell_price.messa"
        },
        {
          "text": "text-xs text-muted-foreground",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.sell_price.message}</p> )} {watchedPurchasePrice > 0 && ("
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "placeholder=\"0\" /> {errors.stock_quantity && ( <p className=\"text-sm text-red-600\">{errors.stock_quanti"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.stock_quantity.message}</p> )} </div> <div classNa"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "placeholder=\"5\" /> {errors.min_stock_level && ( <p className=\"text-sm text-red-600\">{errors.min_stock_l"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.min_stock_level.message}</p> )} </div> </div>"
        },
        {
          "text": "Select category",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select category\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 4,
        "inputs": 7,
        "labels": 10,
        "alerts": 0,
        "modals": 5,
        "tables": 0,
        "cards": 2
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 24 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "InventoryIntelligenceDashboard",
      "path": "/app/src/components/inventory/InventoryIntelligenceDashboard.tsx",
      "relativePath": "components/inventory/InventoryIntelligenceDashboard.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Last 7 Days",
          "type": "errorMessages",
          "context": "data: dashboardData, isLoading, error, refetch } = useInventoryIntelligenceDashboard( dateRange.start, dateRange."
        },
        {
          "text": "text-sm text-muted-foreground",
          "type": "errorMessages",
          "context": "<p className=\"text-destructive mb-2\">Error loading inventory intelligence</p> <p className=\"text-sm text-muted-foreground\">{"
        },
        {
          "text": "An unknown error occurred",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-muted-foreground\">{error instanceof Error ? error.message : 'An unknown error occurred'}</p> <Button"
        },
        {
          "text": "Performance Overview",
          "type": "titles",
          "context": "dashboard_data?.overview_metrics} title=\"Performance Overview\" /> <TurnoverAnalysisChart dat"
        },
        {
          "text": "Turnover Analysis Summary",
          "type": "titles",
          "context": "ard_data?.turnover_analysis || []} title=\"Turnover Analysis Summary\" /> </div> </TabsContent>"
        },
        {
          "text": "Detailed Turnover Analysis",
          "type": "titles",
          "context": "board_data?.turnover_analysis || []} title=\"Detailed Turnover Analysis\" detailed={true} /> </TabsContent"
        },
        {
          "text": "Stock Optimization Recommendations",
          "type": "titles",
          "context": "oard_data?.stock_optimization || []} title=\"Stock Optimization Recommendations\" /> </TabsContent> <TabsCon"
        },
        {
          "text": "Demand Forecasting",
          "type": "titles",
          "context": "hboard_data?.demand_forecasts || []} title=\"Demand Forecasting\" /> </TabsContent> <TabsContent variant=\"gr"
        },
        {
          "text": "Seasonal Analysis",
          "type": "titles",
          "context": "board_data?.seasonal_insights || []} title=\"Seasonal Analysis\" /> </TabsContent> </Tabs> {/* Loading"
        },
        {
          "text": "Export Inventory Intelligence",
          "type": "titles",
          "context": "false)} onExport={handleExport} title=\"Export Inventory Intelligence\" /> </div> ); };"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 13
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ImageGalleryManager",
      "path": "/app/src/components/inventory/ImageGalleryManager.tsx",
      "relativePath": "components/inventory/ImageGalleryManager.tsx",
      "category": "inventory",
      "type": "modal",
      "translationKeys": [
        "Maximum ${maxImages} images allowed",
        "a",
        "/"
      ],
      "hardcodedStrings": [
        {
          "text": "Alt Text",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"alt-text\">Alt Text</Label> <Textarea id=\"alt-text\""
        },
        {
          "text": "Set as primary image",
          "type": "formLabels",
          "context": "className=\"rounded\" /> <Label htmlFor=\"is-primary\">Set as primary image</Label> </div> {i"
        },
        {
          "text": "Save Changes",
          "type": "buttonText",
          "context": "Cancel </Button> <Button onClick={handleSave}> Save Changes </Button> </DialogFooter"
        },
        {
          "text": "Failed to upload images:",
          "type": "errorMessages",
          "context": "sChange([...images, ...newImages]); } catch (error) { console.error('Failed to upload images:', error); alert(error instanceof Erro"
        },
        {
          "text": "Failed to upload images",
          "type": "errorMessages",
          "context": "console.error('Failed to upload images:', error); alert(error instanceof Error ? error.message : 'Failed to upload images'); } fin"
        },
        {
          "text": "Failed to download image:",
          "type": "errorMessages",
          "context": "document.body.removeChild(a); } catch (error) { console.error('Failed to download image:', error); } }; const sortedIma"
        },
        {
          "text": "space-y-4",
          "type": "errorMessages",
          "context": "console.error('Failed to download image:', error); } }; const sortedImages = [...images].sort((a, b) => a.sort_order - b.sort_orde"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 9,
        "inputs": 0,
        "labels": 2,
        "alerts": 8,
        "modals": 9,
        "tables": 0,
        "cards": 5
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 7 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "CategoryTreeView",
      "path": "/app/src/components/inventory/CategoryTreeView.tsx",
      "relativePath": "components/inventory/CategoryTreeView.tsx",
      "category": "inventory",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "onCategoryAdd()}>",
          "type": "buttonText",
          "context": "category to organize your inventory</p> <Button onClick={() => onCategoryAdd()}> <Plus className=\"h-4 w-4 mr-2\" /> Cre"
        },
        {
          "text": "Add subcategory",
          "type": "titles",
          "context": "lick={() => onAddChild(category.id)} title=\"Add subcategory\" > <Plus className=\"h-3 w-3\" /> </Button>"
        },
        {
          "text": "Edit category",
          "type": "titles",
          "context": "onClick={() => onEdit(category)} title=\"Edit category\" > <Edit className=\"h-3 w-3\" /> </Button>"
        },
        {
          "text": "Delete category",
          "type": "titles",
          "context": "onClick={() => onDelete(category)} title=\"Delete category\" > <Trash2 className=\"h-3 w-3\" /> </Button"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CategoryTemplateManager",
      "path": "/app/src/components/inventory/CategoryTemplateManager.tsx",
      "relativePath": "components/inventory/CategoryTemplateManager.tsx",
      "category": "inventory",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Template Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"template-name\">Template Name *</Label> <Input id=\"te"
        },
        {
          "text": "Default Icon",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"template-icon\">Default Icon</Label> <Input id=\"t"
        },
        {
          "text": "Default Color",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"template-color\">Default Color</Label> <Input id="
        },
        {
          "text": "setPreviewTemplate(null)}>Close",
          "type": "buttonText",
          "context": ")} <DialogFooter> <Button onClick={() => setPreviewTemplate(null)}>Close</Button> </DialogFooter>"
        },
        {
          "text": "Failed to duplicate template:",
          "type": "errorMessages",
          "context": "wait onDuplicateTemplate(template); } catch (error) { console.error('Failed to duplicate template:', error); } }; const handl"
        },
        {
          "text": "Failed to delete template:",
          "type": "errorMessages",
          "context": "console.error('Failed to duplicate template:', error); } }; const handleDeleteTemplate = async () => { if (deleteTemplate) {"
        },
        {
          "text": "Failed to save template:",
          "type": "errorMessages",
          "context": "console.error('Failed to delete template:', error); } } }; const onFormSubmit = async (data: CategoryTemplateFormData) => {"
        },
        {
          "text": "flex items-center justify-between",
          "type": "errorMessages",
          "context": "console.error('Failed to save template:', error); } }; const formatDate = (dateString: string) => { return new Date(dateStri"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "onics Category\" /> {errors.name && ( <p className=\"text-sm text-red-600\">{errors.name.message}</p>"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.name.message}</p> )} </div> <div className=\"space-"
        },
        {
          "text": "Preview template",
          "type": "titles",
          "context": "eviewTemplate(template)} title=\"Preview template\" > <Eye className=\"h-3 w-3\""
        },
        {
          "text": "Edit template",
          "type": "titles",
          "context": "eEditTemplate(template)} title=\"Edit template\" > <Edit className=\"h-3 w-3\" />"
        },
        {
          "text": "Duplicate template",
          "type": "titles",
          "context": "icateTemplate(template)} title=\"Duplicate template\" > <Copy className=\"h-3 w-"
        },
        {
          "text": "Delete template",
          "type": "titles",
          "context": "-600 hover:text-red-700\" title=\"Delete template\" > <Trash2 className=\"h-3 w-3"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 9,
        "inputs": 3,
        "labels": 9,
        "alerts": 8,
        "modals": 10,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 14 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CategoryManager",
      "path": "/app/src/components/inventory/CategoryManager.tsx",
      "relativePath": "components/inventory/CategoryManager.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "handleCreateCategory()} variant=\"gradient-teal\" className=\"flex items-center gap-2\">",
          "type": "buttonText",
          "context": "ag Mode'} </Button> <Button onClick={() => handleCreateCategory()} variant=\"gradient-teal\" className=\"flex items-center"
        },
        {
          "text": "Failed to delete category:",
          "type": "errorMessages",
          "context": "utation.mutateAsync(category.id); } catch (error) { console.error('Failed to delete category:', error); } } }; con"
        },
        {
          "text": "Failed to save category:",
          "type": "errorMessages",
          "context": "console.error('Failed to delete category:', error); } } }; const handleCategorySelect = (category: any) => { setSelecte"
        },
        {
          "text": "Failed to bulk update categories:",
          "type": "errorMessages",
          "context": "console.error('Failed to save category:', error); throw error; } }; const handleBulkUpdate = async (categoryIds: string[],"
        },
        {
          "text": "Failed to bulk move categories:",
          "type": "errorMessages",
          "context": "onsole.error('Failed to bulk delete categories:', error); throw error; } }; const handleBulkMove = async (categoryIds: string[], n"
        },
        {
          "text": "Failed to create template:",
          "type": "errorMessages",
          "context": "console.error('Failed to bulk move categories:', error); throw error; } }; const handleCreateTemplate = async (data: any) => {"
        },
        {
          "text": "Failed to duplicate template:",
          "type": "errorMessages",
          "context": "utation.mutateAsync(duplicateData); } catch (error) { console.error('Failed to duplicate template:', error); throw error; }"
        },
        {
          "text": "text/plain",
          "type": "errorMessages",
          "context": "console.error('Failed to duplicate template:', error); throw error; } }; const handleDragOver = (e: React.DragEvent, category:"
        },
        {
          "text": "Failed to drop category:",
          "type": "errorMessages",
          "context": "leDrop(dragData, targetCategory); } catch (error) { console.error('Failed to drop category:', error); } } }; const"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 9 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CategoryForm",
      "path": "/app/src/components/inventory/CategoryForm.tsx",
      "relativePath": "components/inventory/CategoryForm.tsx",
      "category": "inventory",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Category Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"name\">Category Name *</Label> <Input id=\"name\""
        },
        {
          "text": "Parent Category",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"parent_id\">Parent Category</Label> <Select value={wa"
        },
        {
          "text": "Category Icon",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Category Icon</Label> <div className=\"flex items-center gap-2\">"
        },
        {
          "text": "Category Color",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Category Color</Label> <div className=\"flex items-center gap-2\">"
        },
        {
          "text": "Sort Order",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"sort_order\">Sort Order</Label> <Input id=\"so"
        },
        {
          "text": "Attribute Name",
          "type": "formLabels",
          "context": "className=\"space-y-2\"> <Label>Attribute Name</Label> <Input {...reg"
        },
        {
          "text": "Failed to save category:",
          "type": "errorMessages",
          "context": "t onSubmit(data); onClose(); } catch (error) { console.error('Failed to save category:', error); } }; return ( <D"
        },
        {
          "text": "max-w-4xl max-h-[90vh] overflow-y-auto",
          "type": "errorMessages",
          "context": "console.error('Failed to save category:', error); } }; return ( <Dialog open={isOpen} onOpenChange={onClose}> <Dialog"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "ces, Bracelets\" /> {errors.name && ( <p className=\"text-sm text-red-600\">{errors.name.message}</p>"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-red-600\">{errors.name.message}</p> )} </div> <div className=\"space-"
        },
        {
          "text": "Choose a template (optional)",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Choose a template (optional)\" /> </SelectTrigger>"
        },
        {
          "text": "Select parent category (optional)",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select parent category (optional)\" /> </SelectTrigger>"
        },
        {
          "text": "Enter emoji or leave empty",
          "type": "placeholders",
          "context": "{...register('icon')} placeholder=\"Enter emoji or leave empty\" className=\"flex-1\" />"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 11,
        "inputs": 6,
        "labels": 11,
        "alerts": 0,
        "modals": 5,
        "tables": 0,
        "cards": 9
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 13 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CategoryBulkOperations",
      "path": "/app/src/components/inventory/CategoryBulkOperations.tsx",
      "relativePath": "components/inventory/CategoryBulkOperations.tsx",
      "category": "inventory",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Parent Category",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Parent Category</Label> <Select value={bulkUpdates.pa"
        },
        {
          "text": "New Parent Category",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>New Parent Category</Label> <Select value={bulkUpdates.pa"
        },
        {
          "text": "Force delete (products will be moved to uncategorized)",
          "type": "formLabels",
          "context": "ue)} /> <Label htmlFor=\"force-delete\" className=\"text-sm text-yellow-800\"> Force dele"
        },
        {
          "text": "Bulk update failed:",
          "type": "errorMessages",
          "context": ", parent_id: '' }); } catch (error) { console.error('Bulk update failed:', error); } }; const executeBulkMove"
        },
        {
          "text": "Bulk move failed:",
          "type": "errorMessages",
          "context": ", parent_id: '' }); } catch (error) { console.error('Bulk move failed:', error); } }; const executeBulkDelete"
        },
        {
          "text": "Bulk delete failed:",
          "type": "errorMessages",
          "context": "rror) { console.error('Bulk move failed:', error); } }; const executeBulkDelete = async () => { if (selectedCategories.size ="
        },
        {
          "text": "flex items-center justify-between",
          "type": "errorMessages",
          "context": "or) { console.error('Bulk delete failed:', error); } }; const getSelectedCategoriesWithProducts = () => { return allCategorie"
        },
        {
          "text": "Leave empty for no change",
          "type": "placeholders",
          "context": ", color: e.target.value }))} placeholder=\"Leave empty for no change\" /> </div>"
        },
        {
          "text": "Leave empty for no change",
          "type": "placeholders",
          "context": "v, icon: e.target.value }))} placeholder=\"Leave empty for no change\" /> </div>"
        },
        {
          "text": "Select new parent",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select new parent\" /> </SelectTrigger> <SelectCon"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 2,
        "labels": 6,
        "alerts": 9,
        "modals": 5,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "BulkOperations",
      "path": "/app/src/components/inventory/BulkOperations.tsx",
      "relativePath": "components/inventory/BulkOperations.tsx",
      "category": "inventory",
      "type": "modal",
      "translationKeys": [
        "Please select at least one field to update"
      ],
      "hardcodedStrings": [
        {
          "text": "Change Category",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Change Category</Label> <Select value={bulkForm.category_"
        },
        {
          "text": "Minimum Stock Level",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"bulk-min-stock\">Minimum Stock Level</Label> <Input"
        },
        {
          "text": "Item Status",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Item Status</Label> <Select value={bulkForm.is_active !=="
        },
        {
          "text": "Failed to delete items:",
          "type": "errorMessages",
          "context": "t'); onClearSelection(); } catch (error) { console.error('Failed to delete items:', error); } } }; const"
        },
        {
          "text": "Please select at least one field to update",
          "type": "errorMessages",
          "context": "console.error('Failed to delete items:', error); } } }; const handleBulkUpdate = async () => { try { const up"
        },
        {
          "text": "Failed to update items:",
          "type": "errorMessages",
          "context": "orm({}); onClearSelection(); } catch (error) { console.error('Failed to update items:', error); } }; const resetBulkFo"
        },
        {
          "text": "border-blue-200 bg-blue-50",
          "type": "errorMessages",
          "context": "{ console.error('Failed to update items:', error); } }; const resetBulkForm = () => { setBulkForm({}); setShowBulkEdit(f"
        },
        {
          "text": "Select new category (optional)",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select new category (optional)\" /> </SelectTrigger>"
        },
        {
          "text": "Leave empty for no change",
          "type": "placeholders",
          "context": "type=\"number\" placeholder=\"Leave empty for no change\" value={bulkForm.min_stock_level || ''}"
        },
        {
          "text": "Select status (optional)",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select status (optional)\" /> </SelectTrigger> <Se"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 5,
        "inputs": 1,
        "labels": 3,
        "alerts": 0,
        "modals": 5,
        "tables": 0,
        "cards": 2
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "BulkInventoryOperations",
      "path": "/app/src/components/inventory/BulkInventoryOperations.tsx",
      "relativePath": "components/inventory/BulkInventoryOperations.tsx",
      "category": "inventory",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "New Category",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>New Category</Label> <Select value={updateData.category_i"
        },
        {
          "text": "Price Adjustment Type",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Price Adjustment Type</Label> <Select value={updateDa"
        },
        {
          "text": "Apply To",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Apply To</Label> <Select value={updateData.price_adju"
        },
        {
          "text": "Stock Adjustment Type",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Stock Adjustment Type</Label> <Select value={updateDa"
        },
        {
          "text": "More Operations",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">More Operations</Label> <div className=\"grid gri"
        },
        {
          "text": "Export Selected",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Export Selected</Label> <div className=\"flex gap"
        },
        {
          "text": "Selected Items",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Selected Items</Label> <div className=\"max-h-32"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lection(); }, 1000); } catch (error) { setProgress(prev => prev ? { ...prev, failed: prev.total - prev."
        },
        {
          "text": "Export failed:",
          "type": "errorMessages",
          "context": "await onExport(itemIds, format); } catch (error) { console.error('Export failed:', error); } }; const renderOperationDialo"
        },
        {
          "text": "text-sm text-red-600",
          "type": "errorMessages",
          "context": "gress.total) * 100} /> {progress.errors.length > 0 && ( <div className=\"text-sm text-red-600\">"
        },
        {
          "text": "Select category",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select category\" /> </SelectTrigger> <SelectConte"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 8,
        "inputs": 2,
        "labels": 9,
        "alerts": 9,
        "modals": 5,
        "tables": 0,
        "cards": 6
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 11 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "AdvancedFilterPanel",
      "path": "/app/src/components/inventory/AdvancedFilterPanel.tsx",
      "relativePath": "components/inventory/AdvancedFilterPanel.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Quick Filters",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-sm font-medium\">Quick Filters</Label> <div className=\"flex flex-"
        },
        {
          "text": "Weight Range (grams)",
          "type": "formLabels",
          "context": "l justify-between p-0 h-auto\"> <Label className=\"text-sm font-medium cursor-pointer\"> Weight Range (grams)"
        },
        {
          "text": "Min (g)",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label htmlFor=\"weight-min\" className=\"text-xs\">Min (g)</Label> <Input"
        },
        {
          "text": "Max (g)",
          "type": "formLabels",
          "context": "<div className=\"space-y-1\"> <Label htmlFor=\"weight-max\" className=\"text-xs\">Max (g)</Label> <Input"
        },
        {
          "text": "Status & General",
          "type": "formLabels",
          "context": "l justify-between p-0 h-auto\"> <Label className=\"text-sm font-medium cursor-pointer\"> Status & General"
        },
        {
          "text": "Product Status",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs font-medium\">Product Status</Label> <div className=\"spa"
        },
        {
          "text": "Stock Status",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs font-medium\">Stock Status</Label> <div className=\"space"
        },
        {
          "text": "In Stock",
          "type": "formLabels",
          "context": "/> <Label className=\"text-xs\">In Stock</Label> </div> <div cl"
        },
        {
          "text": "Out of Stock",
          "type": "formLabels",
          "context": "/> <Label className=\"text-xs\">Out of Stock</Label> </div> </div"
        },
        {
          "text": "Sort By",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label className=\"text-xs font-medium\">Sort By</Label> <div className=\"grid grid-"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 13,
        "inputs": 8,
        "labels": 21,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "index",
      "path": "/app/src/components/image-management/index.ts",
      "relativePath": "components/image-management/index.ts",
      "category": "other",
      "type": "utility",
      "translationKeys": [
        "./ImageGallery",
        "./ImageViewer",
        "./ImageUpload",
        "./CategoryImageManager"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "ImageViewer",
      "path": "/app/src/components/image-management/ImageViewer.tsx",
      "relativePath": "components/image-management/ImageViewer.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "a"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to download image:",
          "type": "errorMessages",
          "context": "document.body.removeChild(a); } catch (error) { console.error('Failed to download image:', error); } }; // Format file"
        },
        {
          "text": "0 Bytes",
          "type": "errorMessages",
          "context": "console.error('Failed to download image:', error); } }; // Format file size const formatFileSize = (bytes: number): string => {"
        },
        {
          "text": "text-center text-muted-foreground",
          "type": "errorMessages",
          "context": "eel={handleWheel} > {imageError ? ( <div className=\"text-center text-muted-foreground\"> <FileI"
        },
        {
          "text": "w-80 bg-gradient-to-b from-gray-900 to-gray-800 border-l border-gray-600 flex flex-col shadow-xl",
          "type": "errorMessages",
          "context": "d={() => setImageLoaded(true)} onError={() => setImageError(true)} draggable={false} />"
        },
        {
          "text": "absolute inset-0 flex items-center justify-center bg-black/50",
          "type": "errorMessages",
          "context": "ading Indicator */} {!imageLoaded && !imageError && ( <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 11,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 2,
        "tables": 0,
        "cards": 20
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ImageUpload",
      "path": "/app/src/components/image-management/ImageUpload.tsx",
      "relativePath": "components/image-management/ImageUpload.tsx",
      "category": "other",
      "type": "modal",
      "translationKeys": [
        "/"
      ],
      "hardcodedStrings": [
        {
          "text": "Advanced Options",
          "type": "formLabels",
          "context": "ame=\"flex items-center gap-2\"> <Label htmlFor=\"show-advanced\" className=\"text-sm\"> Advanced Options"
        },
        {
          "text": "Alt Text",
          "type": "formLabels",
          "context": "<div> <Label htmlFor={`alt-${uploadFile.id}`} className=\"text-xs\"> Alt Te"
        },
        {
          "text": "Set as primary image",
          "type": "formLabels",
          "context": "/> <Label htmlFor={`primary-${uploadFile.id}`} className=\"text-xs\"> Se"
        },
        {
          "text": "{isUploading ? (",
          "type": "buttonText",
          "context": "</Button> {canUpload && ( <Button onClick={handleUpload} disabled={isUploading}"
        },
        {
          "text": "Only one file allowed",
          "type": "errorMessages",
          "context": "ultiple && fileArray.length > 1) { onUploadError?.('Only one file allowed'); return; } if (uploadFiles.length + fileArra"
        },
        {
          "text": "Maximum ${maxFiles} files allowed",
          "type": "errorMessages",
          "context": "h + fileArray.length > maxFiles) { onUploadError?.(`Maximum ${maxFiles} files allowed`); return; } const newUploadFiles: Upl"
        },
        {
          "text": "Upload failed",
          "type": "errorMessages",
          "context": "result } : f )); } catch (error) { const errorMessage = error instanceof Error ? error.message : 'Upload failed';"
        },
        {
          "text": "Upload failed",
          "type": "errorMessages",
          "context": "/ Close dialog after successful upload if (errors.length === 0) { setTimeout(() => { setIsOpen(false); }, 1000);"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 1,
        "labels": 4,
        "alerts": 6,
        "modals": 5,
        "tables": 0,
        "cards": 1
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 8 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ImageGallery",
      "path": "/app/src/components/image-management/ImageGallery.tsx",
      "relativePath": "components/image-management/ImageGallery.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "a"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to load images",
          "type": "errorMessages",
          "context": "> { try { setLoading(true); setError(null); const imageData = await ImageManagementAPI.getEntityImages(entityType, entityId,"
        },
        {
          "text": "Failed to delete image",
          "type": "errorMessages",
          "context": "onfirmImage(null); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to delete image'); } }; // Handle se"
        },
        {
          "text": "Failed to update image",
          "type": "errorMessages",
          "context": "_primary: true }); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to update image'); } }; // Handle dr"
        },
        {
          "text": "Failed to update sort order:",
          "type": "errorMessages",
          "context": "x }); } catch (err) { console.error('Failed to update sort order:', err); } }; // Handle image download const hand"
        },
        {
          "text": "Failed to download image:",
          "type": "errorMessages",
          "context": "moveChild(a); } catch (err) { console.error('Failed to download image:', err); } }; // Lazy loading image component const"
        },
        {
          "text": "text-center p-8",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <div className={cn(\"text-center p-8\", className)}> <div class"
        },
        {
          "text": "bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300",
          "type": "errorMessages",
          "context": "<div className=\"text-red-800 font-medium mb-4\">{error}</div> <Button onClick={loadImages} className=\"bg-gradi"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 10,
        "inputs": 1,
        "labels": 0,
        "alerts": 8,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 7 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "CategoryImageManager",
      "path": "/app/src/components/image-management/CategoryImageManager.tsx",
      "relativePath": "components/image-management/CategoryImageManager.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Failed to load images",
          "type": "errorMessages",
          "context": "date?.(imageData); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to load images'); } finally { setLoad"
        },
        {
          "text": "Failed to upload icon",
          "type": "errorMessages",
          "context": "electedIcon(null); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to upload icon'); setSelectedIcon(null);"
        },
        {
          "text": "bg-gradient-to-r from-red-50 to-rose-50 border-0 rounded-lg p-4 shadow-lg",
          "type": "errorMessages",
          "context": "utton> </div> </div> {/* Error Display */} {error && ( <div className=\"bg-gradient-to-r from-red-50 to-rose-5"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 7,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 10
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "PaymentForm",
      "path": "/app/src/components/customers/PaymentForm.tsx",
      "relativePath": "components/customers/PaymentForm.tsx",
      "category": "customers",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Payment Amount *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"amount\">Payment Amount *</Label> <Input id=\"amount\""
        },
        {
          "text": "Payment Method *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"payment_method\">Payment Method *</Label> <Select val"
        },
        {
          "text": "Description (Optional)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"description\">Description (Optional)</Label> <Input i"
        },
        {
          "text": "Please enter a valid payment amount",
          "type": "errorMessages",
          "context": ": 'cash', description: '' }); const [errors, setErrors] = useState<Record<string, string>>({}); const validateForm = () => { co"
        },
        {
          "text": "Please select a payment method",
          "type": "errorMessages",
          "context": "if (!formData.payment_method) { newErrors.payment_method = 'Please select a payment method'; } setErrors(newErrors); r"
        },
        {
          "text": "Failed to record payment",
          "type": "errorMessages",
          "context": "({ title: 'Error', description: error.response?.data?.detail || 'Failed to record payment', variant: 'destructive',"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "led={isLoading} /> {errors.amount && ( <p className=\"text-sm text-destructive\">{errors.amount}</p>"
        },
        {
          "text": "text-xs text-muted-foreground",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.amount}</p> )} <p className=\"text-xs text-muted-foreground\">"
        },
        {
          "text": "text-sm text-destructive",
          "type": "errorMessages",
          "context": "Content> </Select> {errors.payment_method && ( <p className=\"text-sm text-destructive\">{errors.payment_"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-destructive\">{errors.payment_method}</p> )} </div> <div className=\"spac"
        },
        {
          "text": "p-4 bg-green-50 rounded-lg",
          "type": "errorMessages",
          "context": "ent Summary */} {formData.amount && !errors.amount && ( <div className=\"p-4 bg-green-50 rounded-lg\"> <div"
        },
        {
          "text": "Select payment method",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select payment method\" /> </SelectTrigger> <SelectCon"
        },
        {
          "text": "Payment notes or reference",
          "type": "placeholders",
          "context": "('description', e.target.value)} placeholder=\"Payment notes or reference\" disabled={isLoading} />"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 3,
        "inputs": 2,
        "labels": 3,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 13 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CustomerProfile",
      "path": "/app/src/components/customers/CustomerProfile.tsx",
      "relativePath": "components/customers/CustomerProfile.tsx",
      "category": "customers",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 30,
        "cards": 30
      },
      "recommendations": []
    },
    {
      "name": "CustomerList",
      "path": "/app/src/components/customers/CustomerList.tsx",
      "relativePath": "components/customers/CustomerList.tsx",
      "category": "customers",
      "type": "table",
      "translationKeys": [
        "customers.customer",
        "customers.contact_information",
        "customers.no_contact_info",
        "customers.total_purchases",
        "customers.current_debt",
        "customers.last_purchase",
        "customers.never",
        "customers.status",
        "customers.with_debt",
        "customers.clear",
        "customers.view_profile",
        "customers.edit",
        "customers.title",
        "customers.description",
        "customers.add_customer",
        "customers.total_customers",
        "customers.clear_status",
        "customers.directory",
        "customers.no_customers_found_search",
        "customers.no_customers_found",
        "common.search_placeholder"
      ],
      "hardcodedStrings": [
        {
          "text": "Export Selected",
          "type": "buttonText",
          "context": "l </Button> <Button variant=\"outline\" size=\"sm\" className=\"bg-white hover:bg-green-50 border-green-200\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 3,
        "modals": 0,
        "tables": 1,
        "cards": 10
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        }
      ]
    },
    {
      "name": "CustomerForm",
      "path": "/app/src/components/customers/CustomerForm.tsx",
      "relativePath": "components/customers/CustomerForm.tsx",
      "category": "customers",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "{isLoading ? (",
          "type": "buttonText",
          "context": "Cancel </Button> <Button type=\"submit\" disabled={isLoading} clas"
        },
        {
          "text": "Customer name is required",
          "type": "errorMessages",
          "context": "dress: customer?.address || '' }); const [errors, setErrors] = useState<Record<string, string>>({}); const validateForm = () => { co"
        },
        {
          "text": "Please enter a valid email address",
          "type": "errorMessages",
          "context": "s@]+\\.[^\\s@]+$/.test(formData.email)) { newErrors.email = 'Please enter a valid email address'; } if (formData.phone && !/^[\\+]?[1-"
        },
        {
          "text": "Please enter a valid phone number",
          "type": "errorMessages",
          "context": "t(formData.phone.replace(/\\s/g, ''))) { newErrors.phone = 'Please enter a valid phone number'; } setErrors(newErrors); return"
        },
        {
          "text": "Failed to save customer",
          "type": "errorMessages",
          "context": "({ title: 'Error', description: error.response?.data?.detail || 'Failed to save customer', variant: 'destructive', }"
        },
        {
          "text": "Enter customer name",
          "type": "placeholders",
          "context": "tChange('name', e.target.value)} placeholder=\"Enter customer name\" disabled={isLoading} floating"
        },
        {
          "text": "Enter phone number",
          "type": "placeholders",
          "context": "Change('phone', e.target.value)} placeholder=\"Enter phone number\" disabled={isLoading} floating"
        },
        {
          "text": "Enter email address",
          "type": "placeholders",
          "context": "Change('email', e.target.value)} placeholder=\"Enter email address\" disabled={isLoading} floating"
        },
        {
          "text": "Enter full address",
          "type": "placeholders",
          "context": "ange('address', e.target.value)} placeholder=\"Enter full address\" disabled={isLoading} floating"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 3,
        "inputs": 4,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 9 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ComprehensiveCustomerForm",
      "path": "/app/src/components/customers/ComprehensiveCustomerForm.tsx",
      "relativePath": "components/customers/ComprehensiveCustomerForm.tsx",
      "category": "customers",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Customer Name *",
          "type": "formLabels",
          "context": "4\"> <div> <Label htmlFor=\"name\">Customer Name *</Label> <Input id="
        },
        {
          "text": "Phone Number",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"phone\">Phone Number</Label> <Input id=\"p"
        },
        {
          "text": "Email Address",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"email\">Email Address</Label> <Input id=\""
        },
        {
          "text": "Customer Type",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"customer_type\">Customer Type</Label> <Select"
        },
        {
          "text": "Street Address",
          "type": "formLabels",
          "context": "v className=\"md:col-span-2\"> <Label htmlFor=\"street_address\">Street Address</Label> <Input"
        },
        {
          "text": "State/Province",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"state\">State/Province</Label> <Input id="
        },
        {
          "text": "Postal Code",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"postal_code\">Postal Code</Label> <Input"
        },
        {
          "text": "National ID / SSN",
          "type": "formLabels",
          "context": "4\"> <div> <Label htmlFor=\"national_id\">National ID / SSN</Label> <Input"
        },
        {
          "text": "Date of Birth",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"date_of_birth\">Date of Birth</Label> <Input"
        },
        {
          "text": "Contact Name",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"emergency_contact_name\">Contact Name</Label> <Input"
        },
        {
          "text": "Contact Phone",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"emergency_contact_phone\">Contact Phone</Label> <Input"
        },
        {
          "text": "Credit Limit ($)",
          "type": "formLabels",
          "context": "4\"> <div> <Label htmlFor=\"credit_limit\">Credit Limit ($)</Label> <Input"
        },
        {
          "text": "Payment Terms (Days)",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"payment_terms\">Payment Terms (Days)</Label> <Input"
        },
        {
          "text": "Default Discount (%)",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"discount_percentage\">Default Discount (%)</Label> <Input"
        },
        {
          "text": "Tax ID",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"tax_id\">Tax ID</Label> <Input id=\"tax_id"
        },
        {
          "text": "Tax Exempt",
          "type": "formLabels",
          "context": "hecked)} /> <Label htmlFor=\"tax_exempt\">Tax Exempt</Label> </div> </TabsContent>"
        },
        {
          "text": "Preferred Contact Method",
          "type": "formLabels",
          "context": "4\"> <div> <Label htmlFor=\"preferred_contact_method\">Preferred Contact Method</Label> <Sel"
        },
        {
          "text": "Preferred Metal",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"preferred_metal\">Preferred Metal</Label> <Input"
        },
        {
          "text": "Jewelry Style Preference",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"jewelry_style\">Jewelry Style Preference</Label> <Input"
        },
        {
          "text": "Anniversary Date",
          "type": "formLabels",
          "context": "> <div> <Label htmlFor=\"anniversary_date\">Anniversary Date</Label> <Input"
        },
        {
          "text": "Receive Marketing Emails",
          "type": "formLabels",
          "context": "ed)} /> <Label htmlFor=\"marketing_emails\">Receive Marketing Emails</Label> </div>"
        },
        {
          "text": "Subscribe to Newsletter",
          "type": "formLabels",
          "context": "ed)} /> <Label htmlFor=\"newsletter\">Subscribe to Newsletter</Label> </div>"
        },
        {
          "text": "{isLoading ? (",
          "type": "buttonText",
          "context": "ancel </Button> <Button type=\"submit\" disabled={isLoading}"
        },
        {
          "text": "Customer name is required",
          "type": "errorMessages",
          "context": "; const validateForm = () => { const newErrors: Record<string, string> = {}; // Required fields if (!formData.name.trim()) {"
        },
        {
          "text": "Please enter a valid email address",
          "type": "errorMessages",
          "context": "s@]+\\.[^\\s@]+$/.test(formData.email)) { newErrors.email = 'Please enter a valid email address'; } // Phone validation if (form"
        },
        {
          "text": "Please enter a valid phone number",
          "type": "errorMessages",
          "context": "t(formData.phone.replace(/\\s/g, ''))) { newErrors.phone = 'Please enter a valid phone number'; } // National ID validation (basic f"
        },
        {
          "text": "National ID must be at least 5 characters",
          "type": "errorMessages",
          "context": "d && formData.national_id.length < 5) { newErrors.national_id = 'National ID must be at least 5 characters'; } // Date of birth val"
        },
        {
          "text": "Date of birth cannot be in the future",
          "type": "errorMessages",
          "context": "new Date(); if (dob > today) { newErrors.date_of_birth = 'Date of birth cannot be in the future'; } } // Credit lim"
        },
        {
          "text": "Credit limit cannot be negative",
          "type": "errorMessages",
          "context": "n if (formData.credit_limit < 0) { newErrors.credit_limit = 'Credit limit cannot be negative'; } // Payment terms validation"
        },
        {
          "text": "Payment terms must be between 0 and 365 days",
          "type": "errorMessages",
          "context": "< 0 || formData.payment_terms > 365) { newErrors.payment_terms = 'Payment terms must be between 0 and 365 days'; } // Discount per"
        },
        {
          "text": "Discount percentage must be between 0 and 100",
          "type": "errorMessages",
          "context": "| formData.discount_percentage > 100) { newErrors.discount_percentage = 'Discount percentage must be between 0 and 100'; } setError"
        },
        {
          "text": "Failed to save customer",
          "type": "errorMessages",
          "context": "({ title: 'Error', description: error.response?.data?.detail || 'Failed to save customer', variant: 'destructive', }"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "customer name\" className={errors.name ? 'border-red-500' : ''} /> {errors.name && <p"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.name && <p className=\"text-sm text-red-500 mt-1\">{errors.name}</p>} </div>"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "r=\"+1-555-0123\" className={errors.phone ? 'border-red-500' : ''} /> {errors.phone &&"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.phone && <p className=\"text-sm text-red-500 mt-1\">{errors.phone}</p>} </di"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "omer@email.com\" className={errors.email ? 'border-red-500' : ''} /> {errors.email &&"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.email && <p className=\"text-sm text-red-500 mt-1\">{errors.email}</p>} </di"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "r=\"123-45-6789\" className={errors.national_id ? 'border-red-500' : ''} /> {errors.nat"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.national_id && <p className=\"text-sm text-red-500 mt-1\">{errors.national_id}</p>}"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": ".target.value)} className={errors.date_of_birth ? 'border-red-500' : ''} /> {errors.d"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.date_of_birth && <p className=\"text-sm text-red-500 mt-1\">{errors.date_of_birth}</p>}"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "step=\"0.01\" className={errors.credit_limit ? 'border-red-500' : ''} /> {errors.cr"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.credit_limit && <p className=\"text-sm text-red-500 mt-1\">{errors.credit_limit}</p>}"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "max=\"365\" className={errors.payment_terms ? 'border-red-500' : ''} /> {errors.p"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.payment_terms && <p className=\"text-sm text-red-500 mt-1\">{errors.payment_terms}</p>}"
        },
        {
          "text": "border-red-500",
          "type": "errorMessages",
          "context": "step=\"0.01\" className={errors.discount_percentage ? 'border-red-500' : ''} /> {er"
        },
        {
          "text": "text-sm text-red-500 mt-1",
          "type": "errorMessages",
          "context": "''} /> {errors.discount_percentage && <p className=\"text-sm text-red-500 mt-1\">{errors.discount_percentage}<"
        },
        {
          "text": "Enter customer name",
          "type": "placeholders",
          "context": "e('name', e.target.value)} placeholder=\"Enter customer name\" className={errors.name ? 'border-red-500' :"
        },
        {
          "text": "Select customer type",
          "type": "placeholders",
          "context": "ectTrigger> <SelectValue placeholder=\"Select customer type\" /> </SelectTrigger>"
        },
        {
          "text": "1234 Main Street, Apt 5B",
          "type": "placeholders",
          "context": "address', e.target.value)} placeholder=\"1234 Main Street, Apt 5B\" /> </div>"
        },
        {
          "text": "New York",
          "type": "placeholders",
          "context": "e('city', e.target.value)} placeholder=\"New York\" /> </div> <div>"
        },
        {
          "text": "New York",
          "type": "placeholders",
          "context": "('state', e.target.value)} placeholder=\"New York\" /> </div> <div>"
        },
        {
          "text": "United States",
          "type": "placeholders",
          "context": "country', e.target.value)} placeholder=\"United States\" /> </div> </div"
        },
        {
          "text": "Select gender",
          "type": "placeholders",
          "context": "ectTrigger> <SelectValue placeholder=\"Select gender\" /> </SelectTrigger> <Selec"
        },
        {
          "text": "Software Engineer",
          "type": "placeholders",
          "context": "upation', e.target.value)} placeholder=\"Software Engineer\" /> </div> <"
        },
        {
          "text": "Jane Doe Smith",
          "type": "placeholders",
          "context": "_name', e.target.value)} placeholder=\"Jane Doe Smith\" /> </div>"
        },
        {
          "text": "Select relationship",
          "type": "placeholders",
          "context": "tTrigger> <SelectValue placeholder=\"Select relationship\" /> </SelectTrigger>"
        },
        {
          "text": "Select contact method",
          "type": "placeholders",
          "context": "ectTrigger> <SelectValue placeholder=\"Select contact method\" /> </SelectTrigger>"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 4,
        "inputs": 23,
        "labels": 31,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 59 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "TokenManagementInterface",
      "path": "/app/src/components/auth/TokenManagementInterface.tsx",
      "relativePath": "components/auth/TokenManagementInterface.tsx",
      "category": "auth",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "RoleBasedAccess",
      "path": "/app/src/components/auth/RoleBasedAccess.tsx",
      "relativePath": "components/auth/RoleBasedAccess.tsx",
      "category": "auth",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "AuthGuard",
      "path": "/app/src/components/auth/AuthGuard.tsx",
      "relativePath": "components/auth/AuthGuard.tsx",
      "category": "auth",
      "type": "interactive",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "min-h-screen flex items-center justify-center bg-gray-50",
          "type": "errorMessages",
          "context": "redRoles = [], fallbackPath = '/login', showError = true, }) => { const { isAuthenticated, isLoading, hasPermission, hasAnyRole } = useAuth("
        },
        {
          "text": "min-h-screen flex items-center justify-center bg-gray-50 p-4",
          "type": "errorMessages",
          "context": "> 0 && !hasAnyRole(requiredRoles)) { if (showError) { return ( <div className=\"min-h-screen flex items-center justify-center bg-g"
        },
        {
          "text": "min-h-screen flex items-center justify-center bg-gray-50 p-4",
          "type": "errorMessages",
          "context": "if (!hasAllPermissions) { if (showError) { return ( <div className=\"min-h-screen flex items-center justify-center"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 6,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "index",
      "path": "/app/src/components/analytics/index.ts",
      "relativePath": "components/analytics/index.ts",
      "category": "analytics",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "TrendIndicator",
      "path": "/app/src/components/analytics/TrendIndicator.tsx",
      "relativePath": "components/analytics/TrendIndicator.tsx",
      "category": "analytics",
      "type": "utility",
      "translationKeys": [
        "en-US"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "TimeRangeSelector",
      "path": "/app/src/components/analytics/TimeRangeSelector.tsx",
      "relativePath": "components/analytics/TimeRangeSelector.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Start Date",
          "type": "formLabels",
          "context": "<div> <Label className=\"text-xs\">Start Date</Label> <Popover>"
        },
        {
          "text": "End Date",
          "type": "formLabels",
          "context": "<div> <Label className=\"text-xs\">End Date</Label> <Popover>"
        },
        {
          "text": "Apply Changes",
          "type": "buttonText",
          "context": "semibold\">KPI Targets</h4> <Button size=\"sm\" onClick={handleTargetsUpdate}> Apply Changes"
        },
        {
          "text": "Enter target value",
          "type": "placeholders",
          "context": "className=\"mt-1\" placeholder=\"Enter target value\" /> </div>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 16,
        "inputs": 2,
        "labels": 4,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 2
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "StockOptimizationDashboard",
      "path": "/app/src/components/analytics/StockOptimizationDashboard.tsx",
      "relativePath": "components/analytics/StockOptimizationDashboard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "refetch()} variant=\"outline\" size=\"sm\" className=\"gap-2\">",
          "type": "buttonText",
          "context": "AI Optimized </Badge> <Button onClick={() => refetch()} variant=\"outline\" size=\"sm\" className=\"gap-2\"> <Refre"
        },
        {
          "text": "Select priority",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select priority\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select status",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select status\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 47
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SparklineChart",
      "path": "/app/src/components/analytics/SparklineChart.tsx",
      "relativePath": "components/analytics/SparklineChart.tsx",
      "category": "analytics",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "SeasonalAnalysis",
      "path": "/app/src/components/analytics/SeasonalAnalysis.tsx",
      "relativePath": "components/analytics/SeasonalAnalysis.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Failed to fetch seasonal patterns",
          "type": "errorMessages",
          "context": "`); if (!response.ok) { throw new Error('Failed to fetch seasonal patterns'); } const data = await response.json();"
        },
        {
          "text": "An error occurred",
          "type": "errorMessages",
          "context": "data[0]); } } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred'); } finally { setLoading("
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-br from-red-50 to-pink-100/50",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error) { return ( <Card className=\"border-0 shadow-lg bg-gradient-to-br from-red-50 to-p"
        },
        {
          "text": "mt-4 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-lg hover:shadow-xl",
          "type": "errorMessages",
          "context": "<Alert> <AlertDescription>{error}</AlertDescription> </Alert> <Button onClick={fetchSeasonalPatterns} cla"
        },
        {
          "text": "Analysis period",
          "type": "placeholders",
          "context": "className=\"w-40\"> <SelectValue placeholder=\"Analysis period\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 29
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "MetricCard",
      "path": "/app/src/components/analytics/MetricCard.tsx",
      "relativePath": "components/analytics/MetricCard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 2
      },
      "recommendations": []
    },
    {
      "name": "KPIWidget",
      "path": "/app/src/components/analytics/KPIWidget.tsx",
      "relativePath": "components/analytics/KPIWidget.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "KPIDashboard",
      "path": "/app/src/components/analytics/KPIDashboard.tsx",
      "relativePath": "components/analytics/KPIDashboard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Error parsing WebSocket message:",
          "type": "errorMessages",
          "context": "ey: ['kpi-alerts'] }); } } catch (error) { console.error('Error parsing WebSocket message:', error); } };"
        },
        {
          "text": "KPI WebSocket disconnected",
          "type": "errorMessages",
          "context": "console.error('Error parsing WebSocket message:', error); } }; ws.onclose = () => { console.log('KPI WebSocket disconnec"
        },
        {
          "text": "KPI WebSocket error:",
          "type": "errorMessages",
          "context": "setWebsocket(null); }; ws.onerror = (error) => { console.error('KPI WebSocket error:', error); }; return () ="
        },
        {
          "text": "An unexpected error occurred",
          "type": "errorMessages",
          "context": "<p className=\"text-red-600 mb-4\"> {error instanceof Error ? error.message : 'An unexpected error occurred'} </p>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 13
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ForecastingDashboard",
      "path": "/app/src/components/analytics/ForecastingDashboard.tsx",
      "relativePath": "components/analytics/ForecastingDashboard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "refetch()} variant=\"outline\" size=\"sm\" className=\"gap-2\">",
          "type": "buttonText",
          "context": "Live Predictions </Badge> <Button onClick={() => refetch()} variant=\"outline\" size=\"sm\" className=\"gap-2\"> <Refre"
        },
        {
          "text": "Select period",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select period\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select category",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select category\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select model",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select model\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 44
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ExportDialog",
      "path": "/app/src/components/analytics/ExportDialog.tsx",
      "relativePath": "components/analytics/ExportDialog.tsx",
      "category": "analytics",
      "type": "form",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Export Format",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Export Format</Label> <Select value={options.format} onValueChange={(value: any)"
        },
        {
          "text": "Include in Export",
          "type": "formLabels",
          "context": "<div className=\"space-y-3\"> <Label>Include in Export</Label> <div className=\"space-y-2\">"
        },
        {
          "text": "Charts and visualizations",
          "type": "formLabels",
          "context": "t === 'csv'} /> <Label htmlFor=\"includeCharts\" className=\"text-sm\"> Charts and visualizations"
        },
        {
          "text": "Raw data tables",
          "type": "formLabels",
          "context": "t === 'png'} /> <Label htmlFor=\"includeData\" className=\"text-sm\"> Raw data tables"
        },
        {
          "text": "Date range information",
          "type": "formLabels",
          "context": "', checked)} /> <Label htmlFor=\"dateRange\" className=\"text-sm\"> Date range information"
        },
        {
          "text": "File Name",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"filename\">File Name</Label> <Input id=\"filename\""
        },
        {
          "text": "Enter filename",
          "type": "placeholders",
          "context": "tions('filename', e.target.value)} placeholder=\"Enter filename\" /> <p className=\"text-xs text-muted-foregroun"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 2,
        "inputs": 1,
        "labels": 6,
        "alerts": 0,
        "modals": 6,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 7 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        }
      ]
    },
    {
      "name": "DateRangePicker",
      "path": "/app/src/components/analytics/DateRangePicker.tsx",
      "relativePath": "components/analytics/DateRangePicker.tsx",
      "category": "analytics",
      "type": "interactive",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Select range",
          "type": "placeholders",
          "context": "er className=\"w-[140px]\"> <SelectValue placeholder=\"Select range\" /> </SelectTrigger> <SelectContent> {quickRa"
        },
        {
          "text": "Start date",
          "type": "placeholders",
          "context": "} className=\"w-[140px]\" placeholder=\"Start date\" /> <Input type=\"date\""
        },
        {
          "text": "End date",
          "type": "placeholders",
          "context": "} className=\"w-[140px]\" placeholder=\"End date\" /> </> )} {!isCustom && startDate && endD"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 2,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "CrossSellingAnalyzer",
      "path": "/app/src/components/analytics/CrossSellingAnalyzer.tsx",
      "relativePath": "components/analytics/CrossSellingAnalyzer.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Failed to fetch cross-selling opportunities",
          "type": "errorMessages",
          "context": "`); if (!response.ok) { throw new Error('Failed to fetch cross-selling opportunities'); } const data = await response."
        },
        {
          "text": "An error occurred",
          "type": "errorMessages",
          "context": "portunities(data); } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred'); } finally { setLoading("
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-br from-red-50 to-pink-100/50",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error) { return ( <Card className=\"border-0 shadow-lg bg-gradient-to-br from-red-50 to-p"
        },
        {
          "text": "mt-4 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-lg hover:shadow-xl",
          "type": "errorMessages",
          "context": "<Alert> <AlertDescription>{error}</AlertDescription> </Alert> <Button onClick={fetchCrossSellingOpportuni"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 31
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CostAnalysisDashboard",
      "path": "/app/src/components/analytics/CostAnalysisDashboard.tsx",
      "relativePath": "components/analytics/CostAnalysisDashboard.tsx",
      "category": "analytics",
      "type": "chart",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "View Details",
          "type": "buttonText",
          "context": "</div> <Button variant=\"outline\" size=\"sm\" className=\"bg-gradient-to-r from-teal-500 to-blue-600 hover:from"
        },
        {
          "text": "Failed to fetch cost analysis data",
          "type": "errorMessages",
          "context": "s?${params}`); if (!response.ok) throw new Error('Failed to fetch cost analysis data'); const result = await response.json();"
        },
        {
          "text": "An error occurred",
          "type": "errorMessages",
          "context": "esponse.json(); setData(result); setError(null); } catch (err) { setError(err instanceof Error ? err.message : 'An error occ"
        },
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "lassName=\"h-4 w-4\" /> <AlertDescription>{error}</AlertDescription> </Alert> ); } if (!data) return null; return ("
        },
        {
          "text": "Select category",
          "type": "placeholders",
          "context": "ger className=\"w-48\"> <SelectValue placeholder=\"Select category\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 4,
        "modals": 0,
        "tables": 0,
        "cards": 24
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CategoryPerformanceAnalyzer",
      "path": "/app/src/components/analytics/CategoryPerformanceAnalyzer.tsx",
      "relativePath": "components/analytics/CategoryPerformanceAnalyzer.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Failed to fetch category performance data",
          "type": "errorMessages",
          "context": "`); if (!response.ok) { throw new Error('Failed to fetch category performance data'); } const data = await response.js"
        },
        {
          "text": "An error occurred",
          "type": "errorMessages",
          "context": "erformances(data); } catch (err) { setError(err instanceof Error ? err.message : 'An error occurred'); } finally { setLoading("
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-br from-red-50 to-pink-100/50",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error) { return ( <Card className=\"border-0 shadow-lg bg-gradient-to-br from-red-50 to-p"
        },
        {
          "text": "mt-4 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-lg hover:shadow-xl",
          "type": "errorMessages",
          "context": "<Alert> <AlertDescription>{error}</AlertDescription> </Alert> <Button onClick={fetchCategoryPerformance}"
        },
        {
          "text": "Filter by tier",
          "type": "placeholders",
          "context": "className=\"w-40\"> <SelectValue placeholder=\"Filter by tier\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Sort by",
          "type": "placeholders",
          "context": "className=\"w-40\"> <SelectValue placeholder=\"Sort by\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 22
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CacheManagementDashboard",
      "path": "/app/src/components/analytics/CacheManagementDashboard.tsx",
      "relativePath": "components/analytics/CacheManagementDashboard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Failed to fetch cache stats",
          "type": "errorMessages",
          "context": "cache/stats'); if (!response.ok) throw new Error('Failed to fetch cache stats'); const data = await response.json(); setCacheStat"
        },
        {
          "text": "Failed to fetch cache stats",
          "type": "errorMessages",
          "context": "cache_statistics); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to fetch cache stats'); } }; // Fetc"
        },
        {
          "text": "Failed to fetch cache health",
          "type": "errorMessages",
          "context": "ache/health'); if (!response.ok) throw new Error('Failed to fetch cache health'); const data = await response.json(); setCacheHea"
        },
        {
          "text": "Failed to fetch cache health",
          "type": "errorMessages",
          "context": "ta.health_status); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to fetch cache health'); } }; // Fet"
        },
        {
          "text": "Failed to fetch performance history",
          "type": "errorMessages",
          "context": "nce/history'); if (!response.ok) throw new Error('Failed to fetch performance history'); const data = await response.json(); setP"
        },
        {
          "text": "Failed to fetch performance history",
          "type": "errorMessages",
          "context": "formance_history); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to fetch performance history'); } };"
        },
        {
          "text": "Failed to fetch cache keys",
          "type": "errorMessages",
          "context": ")}&limit=50`); if (!response.ok) throw new Error('Failed to fetch cache keys'); const data = await response.json(); setCacheKeys("
        },
        {
          "text": "Failed to fetch cache keys",
          "type": "errorMessages",
          "context": "heKeys(data.keys); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to fetch cache keys'); } }; // Fetch"
        },
        {
          "text": "Failed to fetch cache configuration",
          "type": "errorMessages",
          "context": "nfiguration'); if (!response.ok) throw new Error('Failed to fetch cache configuration'); const data = await response.json(); setC"
        },
        {
          "text": "Failed to fetch cache configuration",
          "type": "errorMessages",
          "context": "CacheConfig(data); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to fetch cache configuration'); } };"
        },
        {
          "text": "Failed to invalidate cache",
          "type": "errorMessages",
          "context": "}) }); if (!response.ok) throw new Error('Failed to invalidate cache'); await loadData(); } catch (err) { setError(e"
        },
        {
          "text": "Failed to invalidate cache",
          "type": "errorMessages",
          "context": "await loadData(); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to invalidate cache'); } }; const wa"
        },
        {
          "text": "Failed to warm cache",
          "type": "errorMessages",
          "context": "od: 'POST' }); if (!response.ok) throw new Error('Failed to warm cache'); await loadData(); } catch (err) { setError(err ins"
        },
        {
          "text": "Failed to warm cache",
          "type": "errorMessages",
          "context": "await loadData(); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to warm cache'); } }; const cleanupC"
        },
        {
          "text": "Failed to cleanup cache",
          "type": "errorMessages",
          "context": "od: 'POST' }); if (!response.ok) throw new Error('Failed to cleanup cache'); await loadData(); } catch (err) { setError(err"
        },
        {
          "text": "Failed to cleanup cache",
          "type": "errorMessages",
          "context": "await loadData(); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to cleanup cache'); } }; const runPe"
        },
        {
          "text": "Failed to run performance test",
          "type": "errorMessages",
          "context": "rmance/test'); if (!response.ok) throw new Error('Failed to run performance test'); await fetchPerformanceHistory(); } catch (err)"
        },
        {
          "text": "Failed to run performance test",
          "type": "errorMessages",
          "context": "formanceHistory(); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to run performance test'); } }; cons"
        },
        {
          "text": "Failed to run stress test",
          "type": "errorMessages",
          "context": "}) }); if (!response.ok) throw new Error('Failed to run stress test'); await fetchPerformanceHistory(); } catch (err) {"
        },
        {
          "text": "Failed to run stress test",
          "type": "errorMessages",
          "context": "formanceHistory(); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to run stress test'); } finally { set"
        },
        {
          "text": "Failed to delete key",
          "type": "errorMessages",
          "context": "TE' }); if (!response.ok) throw new Error('Failed to delete key'); await fetchCacheKeys(); } catch (err) { setError(e"
        },
        {
          "text": "Failed to delete key",
          "type": "errorMessages",
          "context": "fetchCacheKeys(); } catch (err) { setError(err instanceof Error ? err.message : 'Failed to delete key'); } }; // Load data o"
        },
        {
          "text": "border-0 shadow-lg bg-gradient-to-r from-slate-50 to-slate-100/80",
          "type": "errorMessages",
          "context": "ssName=\"h-4 w-4\" /> <AlertDescription>{error}</AlertDescription> </Alert> )} {/* Health Status */} {cacheHe"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 9,
        "inputs": 0,
        "labels": 0,
        "alerts": 4,
        "modals": 0,
        "tables": 0,
        "cards": 46
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 23 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "AnalyticsFilters",
      "path": "/app/src/components/analytics/AnalyticsFilters.tsx",
      "relativePath": "components/analytics/AnalyticsFilters.tsx",
      "category": "analytics",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Clear All ({activeFilterCount})",
          "type": "buttonText",
          "context": "{activeFilterCount > 0 && ( <Button variant=\"outline\" size=\"sm\" onClick={onClearAll}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 2,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "AnalyticsCard",
      "path": "/app/src/components/analytics/AnalyticsCard.tsx",
      "relativePath": "components/analytics/AnalyticsCard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "AlertsPanel",
      "path": "/app/src/components/analytics/AlertsPanel.tsx",
      "relativePath": "components/analytics/AlertsPanel.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [
        "en-US"
      ],
      "hardcodedStrings": [
        {
          "text": "Acknowledge alert",
          "type": "titles",
          "context": "owledge(alert.id)} title=\"Acknowledge alert\" > <CheckCircle"
        },
        {
          "text": "View details",
          "type": "titles",
          "context": "iewDetails(alert)} title=\"View details\" > <Eye className=\"h"
        },
        {
          "text": "Dismiss alert",
          "type": "titles",
          "context": "onDismiss(alert.id)} title=\"Dismiss alert\" > <X className=\"h-4 w-"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "AlertNotificationPanel",
      "path": "/app/src/components/analytics/AlertNotificationPanel.tsx",
      "relativePath": "components/analytics/AlertNotificationPanel.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [
        "ws://localhost:8000/alerts/ws"
      ],
      "hardcodedStrings": [
        {
          "text": "Check Now",
          "type": "buttonText",
          "context": "<div className=\"flex gap-2\"> <Button variant=\"outline\" size=\"sm\" onClick={evaluateAl"
        },
        {
          "text": "ws://localhost:8000/alerts/ws",
          "type": "errorMessages",
          "context": "[loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [showCreateRule, setShowCreateRule] = use"
        },
        {
          "text": "Alert WebSocket error:",
          "type": "errorMessages",
          "context": "ocket, 5000); }; ws.onerror = (error) => { console.error('Alert WebSocket error:', error); };"
        },
        {
          "text": "Failed to connect to alert WebSocket:",
          "type": "errorMessages",
          "context": "console.error('Alert WebSocket error:', error); }; setWebsocket(ws); } catch (error) { console.e"
        },
        {
          "text": "Failed to fetch alert data",
          "type": "errorMessages",
          "context": "etAlertSummary(summaryData); } setError(null); } catch (err) { setError('Failed to fetch alert data'); console.erro"
        },
        {
          "text": "Error fetching alert data:",
          "type": "errorMessages",
          "context": "ror('Failed to fetch alert data'); console.error('Error fetching alert data:', err); } finally { setLoading(false); } };"
        },
        {
          "text": "Failed to acknowledge alert",
          "type": "errorMessages",
          "context": "t )); } else { throw new Error('Failed to acknowledge alert'); } } catch (err) { console.error('Error ackn"
        },
        {
          "text": "Error acknowledging alert:",
          "type": "errorMessages",
          "context": "t'); } } catch (err) { console.error('Error acknowledging alert:', err); } }; const evaluateAlerts = async () => {"
        },
        {
          "text": "Failed to evaluate alerts",
          "type": "errorMessages",
          "context": "chAlertData(); } else { throw new Error('Failed to evaluate alerts'); } } catch (err) { console.error('Error evalua"
        },
        {
          "text": "Error evaluating alerts:",
          "type": "errorMessages",
          "context": "s'); } } catch (err) { console.error('Error evaluating alerts:', err); } }; const getSeverityColor = (severity: string"
        },
        {
          "text": "mb-4 border-0 shadow-lg bg-gradient-to-r from-red-50 to-red-100/50",
          "type": "errorMessages",
          "context": "radient-to-br from-red-50/30 to-white\"> {error && ( <Alert className=\"mb-4 border-0 shadow-lg bg-gradient-to-r from-red-50 to-red-"
        },
        {
          "text": "grid grid-cols-2 md:grid-cols-4 gap-4 mb-6",
          "type": "errorMessages",
          "context": "Name=\"h-4 w-4\" /> <AlertDescription>{error}</AlertDescription> </Alert> )} {/* Alert Summary */}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 9,
        "modals": 0,
        "tables": 0,
        "cards": 21
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 12 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "AdvancedDashboard",
      "path": "/app/src/components/analytics/AdvancedDashboard.tsx",
      "relativePath": "components/analytics/AdvancedDashboard.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Last 24 Hours",
          "type": "errorMessages",
          "context": "t { data: analytics, isLoading, error, dataUpdatedAt } = useDashboardAnalytics(dateRange.start, dateRange.end); // Def"
        },
        {
          "text": "flex items-center justify-center h-96",
          "type": "errorMessages",
          "context": "nst } ]; }, [analytics]); if (error) { return ( <Card className={className}> <CardContent className=\"flex ite"
        },
        {
          "text": "text-sm text-muted-foreground",
          "type": "errorMessages",
          "context": "<p className=\"text-destructive mb-2\">Error loading analytics</p> <p className=\"text-sm text-muted-foreground\">{error.message"
        },
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "<p className=\"text-sm text-muted-foreground\">{error.message}</p> </div> </CardContent> </Card> ); } // Tra"
        },
        {
          "text": "Time-Based Analytics",
          "type": "titles",
          "context": "rt data={timeBasedData} title=\"Time-Based Analytics\" /> {salesData && ( <SalesAnalytics"
        },
        {
          "text": "Sales Analytics",
          "type": "titles",
          "context": "rt data={salesData} title=\"Sales Analytics\" /> )} {inventoryData && ("
        },
        {
          "text": "Inventory Analytics",
          "type": "titles",
          "context": "data={inventoryData} title=\"Inventory Analytics\" /> )} {customerData && ("
        },
        {
          "text": "Customer Analytics",
          "type": "titles",
          "context": "data={customerData} title=\"Customer Analytics\" /> )} </div> )} {/* Load"
        },
        {
          "text": "Export Analytics",
          "type": "titles",
          "context": "false)} onExport={handleExport} title=\"Export Analytics\" /> </div> ); };"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 11
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 9 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "DesignSystemDemo",
      "path": "/app/src/components/design-system/DesignSystemDemo.tsx",
      "relativePath": "components/design-system/DesignSystemDemo.tsx",
      "category": "other",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "> <h3 className=\"font-semibold mb-3\">Error</h3> <div className=\"space-y-2\"> <div className=\"flex items-center"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "WorkflowConfiguration",
      "path": "/app/src/components/business-adaptability/WorkflowConfiguration.tsx",
      "relativePath": "components/business-adaptability/WorkflowConfiguration.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "UnitOfMeasureManagement",
      "path": "/app/src/components/business-adaptability/UnitOfMeasureManagement.tsx",
      "relativePath": "components/business-adaptability/UnitOfMeasureManagement.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "TerminologyManagement",
      "path": "/app/src/components/business-adaptability/TerminologyManagement.tsx",
      "relativePath": "components/business-adaptability/TerminologyManagement.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "a"
      ],
      "hardcodedStrings": [
        {
          "text": "Term Key",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"new_term_key\">Term Key</Label> <Input id=\"new_te"
        },
        {
          "text": "Term Value",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"new_term_value\">Term Value</Label> <Input id=\"ne"
        },
        {
          "text": "Default Value",
          "type": "formLabels",
          "context": "<div> <Label className=\"text-xs text-gray-500\">Default Value</Label> <p classNa"
        },
        {
          "text": "Current Value",
          "type": "formLabels",
          "context": "<div> <Label className=\"text-xs text-gray-500\">Current Value</Label> {isEditing"
        },
        {
          "text": "{isSaving ? (",
          "type": "buttonText",
          "context": "</p> </div> <Button onClick={handleSaveChanges} disabled={isSaving}"
        },
        {
          "text": "Failed to save terminology changes:",
          "type": "errorMessages",
          "context": "ms({}); setIsEditing(false); } catch (error) { console.error('Failed to save terminology changes:', error); } finally {"
        },
        {
          "text": "Failed to add new term:",
          "type": "errorMessages",
          "context": "(''); setShowAddForm(false); } catch (error) { console.error('Failed to add new term:', error); } }; const handleReset"
        },
        {
          "text": "application/json",
          "type": "errorMessages",
          "context": "{ console.error('Failed to add new term:', error); } }; const handleResetTerm = async (key: string) => { if (!currentConfigur"
        },
        {
          "text": "border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <Alert className=\"border-red-200 bg-red-50\"> <AlertCircle cla"
        },
        {
          "text": "border-0 shadow-lg",
          "type": "errorMessages",
          "context": "tDescription className=\"text-red-800\"> Error loading terminology: {error.message} </AlertDescription> </Alert> ); }"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 9,
        "inputs": 4,
        "labels": 4,
        "alerts": 3,
        "modals": 0,
        "tables": 0,
        "cards": 22
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "PricingModelConfiguration",
      "path": "/app/src/components/business-adaptability/PricingModelConfiguration.tsx",
      "relativePath": "components/business-adaptability/PricingModelConfiguration.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "OperationalSettingsForm",
      "path": "/app/src/components/business-adaptability/OperationalSettingsForm.tsx",
      "relativePath": "components/business-adaptability/OperationalSettingsForm.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "MultiLanguageSupport",
      "path": "/app/src/components/business-adaptability/MultiLanguageSupport.tsx",
      "relativePath": "components/business-adaptability/MultiLanguageSupport.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "LocalizationSettingsForm",
      "path": "/app/src/components/business-adaptability/LocalizationSettingsForm.tsx",
      "relativePath": "components/business-adaptability/LocalizationSettingsForm.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "FeatureToggleDashboard",
      "path": "/app/src/components/business-adaptability/FeatureToggleDashboard.tsx",
      "relativePath": "components/business-adaptability/FeatureToggleDashboard.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Failed to toggle feature:",
          "type": "errorMessages",
          "context": "e(feature.id, !feature.is_enabled); } catch (error) { console.error('Failed to toggle feature:', error); } }; const getFeatur"
        },
        {
          "text": "flex items-center justify-center p-8",
          "type": "errorMessages",
          "context": "console.error('Failed to toggle feature:', error); } }; const getFeatureIcon = (feature: FeatureConfiguration) => { const Ico"
        },
        {
          "text": "border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <Alert className=\"border-red-200 bg-red-50\"> <AlertCircle cla"
        },
        {
          "text": "border-0 shadow-lg",
          "type": "errorMessages",
          "context": "tDescription className=\"text-red-800\"> Error loading features: {error.message} </AlertDescription> </Alert> ); }"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 1,
        "labels": 0,
        "alerts": 8,
        "modals": 0,
        "tables": 0,
        "cards": 18
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CustomFieldConfiguration",
      "path": "/app/src/components/business-adaptability/CustomFieldConfiguration.tsx",
      "relativePath": "components/business-adaptability/CustomFieldConfiguration.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "\\n"
      ],
      "hardcodedStrings": [
        {
          "text": "Options (one per line)",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Options (one per line)</Label> <Textarea value={formData.field_co"
        },
        {
          "text": "Minimum Value",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Minimum Value</Label> <Input type=\"number\" v"
        },
        {
          "text": "Maximum Value",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Maximum Value</Label> <Input type=\"number\" v"
        },
        {
          "text": "Minimum Length",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Minimum Length</Label> <Input type=\"number\""
        },
        {
          "text": "Maximum Length",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Maximum Length</Label> <Input type=\"number\""
        },
        {
          "text": "Entity Type",
          "type": "formLabels",
          "context": "<div className=\"flex-1\"> <Label className=\"text-sm font-medium text-gray-600 mb-2 block\">Entity Type</Label> <"
        },
        {
          "text": "Search Fields",
          "type": "formLabels",
          "context": "<div className=\"flex-1 relative\"> <Label className=\"text-sm font-medium text-gray-600 mb-2 block\">Search Fields</Label>"
        },
        {
          "text": "Field Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"field_name\">Field Name *</Label> <Input"
        },
        {
          "text": "Field Key",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"field_key\">Field Key</Label> <Input id=\""
        },
        {
          "text": "Field Type *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"field_type\">Field Type *</Label> <Select value={formData.field_"
        },
        {
          "text": "Field Group",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"field_group\">Field Group</Label> <Input"
        },
        {
          "text": "Display Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"display_name\">Display Name *</Label> <Input"
        },
        {
          "text": "Persian Display Name",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"display_name_persian\">Persian Display Name</Label> <Input"
        },
        {
          "text": "Placeholder Text",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"placeholder\">Placeholder Text</Label> <Input"
        },
        {
          "text": "Help Text",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"help_text\">Help Text</Label> <Input id=\""
        },
        {
          "text": "Display Order",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"display_order\">Display Order</Label> <Input"
        },
        {
          "text": "Column Span",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"column_span\">Column Span</Label> <Select value={formData.column"
        },
        {
          "text": "Show in List",
          "type": "formLabels",
          "context": "/> <Label htmlFor=\"show_in_list\">Show in List</Label> </div>"
        },
        {
          "text": "Show in Detail",
          "type": "formLabels",
          "context": "/> <Label htmlFor=\"show_in_detail\">Show in Detail</Label> </div>"
        },
        {
          "text": "Required Field",
          "type": "formLabels",
          "context": "ked }))} /> <Label htmlFor=\"is_required\">Required Field</Label> </div> {rend"
        },
        {
          "text": "Failed to create custom field:",
          "type": "errorMessages",
          "context": ".id, formData); resetForm(); } catch (error) { console.error('Failed to create custom field:', error); } }; const hand"
        },
        {
          "text": "border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <Alert className=\"border-red-200 bg-red-50\"> <AlertCircle cla"
        },
        {
          "text": "border-0 shadow-lg",
          "type": "errorMessages",
          "context": "tDescription className=\"text-red-800\"> Error loading custom fields: {error.message} </AlertDescription> </Alert> );"
        },
        {
          "text": "Option 1&#10;Option 2&#10;Option 3",
          "type": "placeholders",
          "context": "} }))} placeholder=\"Option 1&#10;Option 2&#10;Option 3\" rows={4} />"
        },
        {
          "text": "Describe what this field is used for",
          "type": "placeholders",
          "context": "ription: e.target.value }))} placeholder=\"Describe what this field is used for\" rows={2}"
        },
        {
          "text": "Name shown to users",
          "type": "placeholders",
          "context": "_name: e.target.value }))} placeholder=\"Name shown to users\" /> </div>"
        },
        {
          "text": "Placeholder text for input",
          "type": "placeholders",
          "context": "older: e.target.value }))} placeholder=\"Placeholder text for input\" /> </div>"
        },
        {
          "text": "Additional help for users",
          "type": "placeholders",
          "context": "_text: e.target.value }))} placeholder=\"Additional help for users\" /> </div>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 13,
        "labels": 24,
        "alerts": 3,
        "modals": 0,
        "tables": 0,
        "cards": 14
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 28 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "BusinessTypeSelectionWizard",
      "path": "/app/src/components/business-adaptability/BusinessTypeSelectionWizard.tsx",
      "relativePath": "components/business-adaptability/BusinessTypeSelectionWizard.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 1,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 10
      },
      "recommendations": []
    },
    {
      "name": "BusinessTemplateGallery",
      "path": "/app/src/components/business-adaptability/BusinessTemplateGallery.tsx",
      "relativePath": "components/business-adaptability/BusinessTemplateGallery.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "BusinessSetupFlow",
      "path": "/app/src/components/business-adaptability/BusinessSetupFlow.tsx",
      "relativePath": "components/business-adaptability/BusinessSetupFlow.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Business Name *",
          "type": "formLabels",
          "context": "p-6\"> <div className=\"space-y-2\"> <Label htmlFor=\"business_name\">Business Name *</Label> <Input id=\"business_name\""
        },
        {
          "text": "Business Type",
          "type": "formLabels",
          "context": "/div> <div className=\"space-y-2\"> <Label>Business Type</Label> <div className=\"flex items-center space-x-2 p-3 border rounded"
        },
        {
          "text": "Business Address",
          "type": "formLabels",
          "context": "p-6\"> <div className=\"space-y-2\"> <Label htmlFor=\"business_address\">Business Address</Label> <Textarea id=\"busines"
        },
        {
          "text": "Phone Number",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"business_phone\">Phone Number</Label> <Input id=\"business_pho"
        },
        {
          "text": "Email Address",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"business_email\">Email Address</Label> <Input id=\"business_em"
        },
        {
          "text": "Currency *",
          "type": "formLabels",
          "context": "p-6\"> <div className=\"space-y-2\"> <Label htmlFor=\"currency\">Currency *</Label> <Select value={formData.currency} onValueChang"
        },
        {
          "text": "Timezone *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"timezone\">Timezone *</Label> <Select value={formData.timezone} onValueChang"
        },
        {
          "text": "Default Language *",
          "type": "formLabels",
          "context": "p-6\"> <div className=\"space-y-2\"> <Label htmlFor=\"default_language\">Default Language *</Label> <Select value={formData.defaul"
        },
        {
          "text": "Date Format",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"date_format\">Date Format</Label> <Select value={formData.date_format} onVal"
        },
        {
          "text": "Cancel Setup",
          "type": "buttonText",
          "context": "assName=\"flex items-center space-x-3\"> <Button variant=\"outline\" onClick={onCancel}> Cancel Setup </Button>"
        },
        {
          "text": "Next Step",
          "type": "buttonText",
          "context": "rentStep < setupSteps.length - 1 ? ( <Button onClick={handleNext} disabled={!canProceedToNext()}"
        },
        {
          "text": "{isSubmitting ? (",
          "type": "buttonText",
          "context": "</Button> ) : ( <Button onClick={handleComplete} disabled={!canProceedToNext() || isSu"
        },
        {
          "text": "Failed to create business configuration",
          "type": "errorMessages",
          "context": "onComplete(); } catch (err: any) { setError(err.message || 'Failed to create business configuration'); } finally { setIsSubmit"
        },
        {
          "text": "border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "<CardContent className=\"space-y-6\"> {error && ( <Alert className=\"border-red-200 bg-red-50\"> <AlertCircle cla"
        },
        {
          "text": "flex items-center justify-between",
          "type": "errorMessages",
          "context": "<AlertDescription className=\"text-red-800\">{error}</AlertDescription> </Alert> )} {renderStepCont"
        },
        {
          "text": "Enter your business name",
          "type": "placeholders",
          "context": "te({ business_name: e.target.value })} placeholder=\"Enter your business name\" className=\"text-lg\" /> </div>"
        },
        {
          "text": "Enter your business address",
          "type": "placeholders",
          "context": "{ business_address: e.target.value })} placeholder=\"Enter your business address\" rows={3} /> </div> <div"
        },
        {
          "text": "Enter phone number",
          "type": "placeholders",
          "context": "{ business_phone: e.target.value })} placeholder=\"Enter phone number\" /> </div> <div className=\"space-y-2\">"
        },
        {
          "text": "Enter email address",
          "type": "placeholders",
          "context": "{ business_email: e.target.value })} placeholder=\"Enter email address\" /> </div> </div> </div> </div>"
        },
        {
          "text": "Select currency",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select currency\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select timezone",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select timezone\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select language",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select language\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select date format",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select date format\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 4,
        "labels": 10,
        "alerts": 3,
        "modals": 0,
        "tables": 0,
        "cards": 20
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 23 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "BusinessMigrationWizard",
      "path": "/app/src/components/business-adaptability/BusinessMigrationWizard.tsx",
      "relativePath": "components/business-adaptability/BusinessMigrationWizard.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "BusinessInformationForm",
      "path": "/app/src/components/business-adaptability/BusinessInformationForm.tsx",
      "relativePath": "components/business-adaptability/BusinessInformationForm.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Business Name *",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"business_name\">Business Name *</Label> {isEditing ? ("
        },
        {
          "text": "Email Address",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"business_email\">Email Address</Label> {isEditing ? ("
        },
        {
          "text": "Business Address",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"business_address\">Business Address</Label> {isEditing ? ("
        },
        {
          "text": "Phone Number",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"business_phone\">Phone Number</Label> {isEditing ? ("
        },
        {
          "text": "Tax ID",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"tax_id\">Tax ID</Label> {isEditing ? ( <Input"
        },
        {
          "text": "Registration Number",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label htmlFor=\"registration_number\">Registration Number</Label> {isEditing ? ("
        },
        {
          "text": "{isSaving ? (",
          "type": "buttonText",
          "context": "<div className=\"flex justify-end\"> <Button type=\"submit\" disabled={isSaving} classNa"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 1,
        "inputs": 6,
        "labels": 7,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 7 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "BusinessConfigurationDashboard",
      "path": "/app/src/components/business-adaptability/BusinessConfigurationDashboard.tsx",
      "relativePath": "components/business-adaptability/BusinessConfigurationDashboard.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "a"
      ],
      "hardcodedStrings": [
        {
          "text": "border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <Alert className=\"border-red-200 bg-red-50\"> <AlertCircle cla"
        },
        {
          "text": "border-0 shadow-lg",
          "type": "errorMessages",
          "context": "tDescription className=\"text-red-800\"> Error loading business configuration: {error.message} </AlertDescription> </Alert>"
        },
        {
          "text": "Validation failed:",
          "type": "errorMessages",
          "context": "setValidationResult(result); } catch (error) { console.error('Validation failed:', error); } }; const handleExportConf"
        },
        {
          "text": "application/json",
          "type": "errorMessages",
          "context": "ror) { console.error('Validation failed:', error); } }; const handleExportConfiguration = async () => { try { const ex"
        },
        {
          "text": "Export failed:",
          "type": "errorMessages",
          "context": "); URL.revokeObjectURL(url); } catch (error) { console.error('Export failed:', error); } }; return ( <div classNa"
        },
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "(error) { console.error('Export failed:', error); } }; return ( <div className=\"space-y-6\"> {/* Header */} <di"
        },
        {
          "text": "space-y-6",
          "type": "errorMessages",
          "context": "nside mt-2\"> {validationResult.errors.map((error: string, index: number) => ( <li key={index}>{error}</li>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 0,
        "labels": 0,
        "alerts": 7,
        "modals": 0,
        "tables": 0,
        "cards": 26
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 7 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "BusinessAnalyticsDashboard",
      "path": "/app/src/components/business-adaptability/BusinessAnalyticsDashboard.tsx",
      "relativePath": "components/business-adaptability/BusinessAnalyticsDashboard.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "ProfitLossAnalysis",
      "path": "/app/src/components/accounting/ProfitLossAnalysis.tsx",
      "relativePath": "components/accounting/ProfitLossAnalysis.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "This Month",
          "type": "buttonText",
          "context": "t 30 Days </Button> <Button variant=\"outline-gradient-purple\" size=\"sm\" onClick={setCurrentMonth}> This"
        },
        {
          "text": "en-US",
          "type": "errorMessages",
          "context": ")); const { data: profitLossData, isLoading, error, refetch } = useProfitLossAnalysis(startDate, endDate); const formatCurrency = (amount: n"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lassName=\"text-center text-red-600\"> Error loading profit & loss analysis: {error instanceof Error ? error.message : 'Unknown error'}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 4,
        "inputs": 2,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 40
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "JournalEntryManager",
      "path": "/app/src/components/accounting/JournalEntryManager.tsx",
      "relativePath": "components/accounting/JournalEntryManager.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [
        "Enter reversal reason:",
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Source Type",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Source Type</Label> <Select value={filters.source_type || 'al"
        },
        {
          "text": "Date Range",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Date Range</Label> <div className=\"flex gap-2\"> <Input"
        },
        {
          "text": "Entry Date *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"entry_date\">Entry Date *</Label> <Input id=\"entry_date\""
        },
        {
          "text": "Source Type *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"source_type\">Source Type *</Label> <Select value={formData.s"
        },
        {
          "text": "Description *",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"description\">Description *</Label> <Input id=\"description\""
        },
        {
          "text": "Description (Persian)",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"description_persian\">Description (Persian)</Label> <Input id=\"de"
        },
        {
          "text": "Reference Number",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"reference_number\">Reference Number</Label> <Input id=\"reference_"
        },
        {
          "text": "Journal Lines",
          "type": "formLabels",
          "context": "e=\"flex items-center justify-between\"> <Label className=\"text-lg font-semibold\">Journal Lines</Label> <Button type=\"button\" vari"
        },
        {
          "text": "Entry Number",
          "type": "formLabels",
          "context": "bg-gray-50 rounded-lg\"> <div> <Label className=\"text-sm font-medium text-muted-foreground\">Entry Number</Label> <p clas"
        },
        {
          "text": "Reference Number",
          "type": "formLabels",
          "context": "y.reference_number && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Reference Number</Label> <p"
        },
        {
          "text": "Journal Lines",
          "type": "formLabels",
          "context": "{/* Journal Lines */} <div> <Label className=\"text-lg font-semibold mb-4 block\">Journal Lines</Label> <div className=\"b"
        },
        {
          "text": "Journal entry created successfully",
          "type": "errorMessages",
          "context": "(''); const { data: entries = [], isLoading, error } = useJournalEntries(filters); const { data: accounts = [] } = useChartOfAccounts(); co"
        },
        {
          "text": "Failed to create journal entry",
          "type": "errorMessages",
          "context": "setIsCreateDialogOpen(false); } catch (error) { toast.error('Failed to create journal entry'); } }; const handleUpdateE"
        },
        {
          "text": "Failed to update journal entry",
          "type": "errorMessages",
          "context": "se); setSelectedEntry(null); } catch (error) { toast.error('Failed to update journal entry'); } }; const handlePostEnt"
        },
        {
          "text": "Failed to post journal entry",
          "type": "errorMessages",
          "context": "ournal entry posted successfully'); } catch (error) { toast.error('Failed to post journal entry'); } }; const handleReverseEn"
        },
        {
          "text": "Please provide a reversal reason",
          "type": "errorMessages",
          "context": "{ if (!reversalReason.trim()) { toast.error('Please provide a reversal reason'); return; } try { await reverseEn"
        },
        {
          "text": "Failed to reverse journal entry",
          "type": "errorMessages",
          "context": "ly'); setReversalReason(''); } catch (error) { toast.error('Failed to reverse journal entry'); } }; const handleDelete"
        },
        {
          "text": "Failed to delete journal entry",
          "type": "errorMessages",
          "context": "urnal entry deleted successfully'); } catch (error) { toast.error('Failed to delete journal entry'); } }; const formatCurrenc"
        },
        {
          "text": "border-0 shadow-lg border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error) { return ( <Card className={cn(\"border-0 shadow-lg border-red-200 bg-red-50\", cla"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "h3 className=\"text-lg font-semibold text-red-800\">Error Loading Journal Entries</h3> <p className=\"text-red-600\">Unable to load journal"
        },
        {
          "text": "Journal entry must be balanced (debits must equal credits)",
          "type": "errorMessages",
          "context": "ntDefault(); if (!isBalanced) { toast.error('Journal entry must be balanced (debits must equal credits)'); return; } onSu"
        },
        {
          "text": "Journal entry description",
          "type": "placeholders",
          "context": "mData, description: e.target.value })} placeholder=\"Journal entry description\" required /> </div> <div"
        },
        {
          "text": "Reference number",
          "type": "placeholders",
          "context": ", reference_number: e.target.value })} placeholder=\"Reference number\" /> </div> {/* Journal Lines */} <div"
        },
        {
          "text": "Select account",
          "type": "placeholders",
          "context": "e=\"w-full\"> <SelectValue placeholder=\"Select account\" /> </SelectTrigger> <Sele"
        },
        {
          "text": "Line description",
          "type": "placeholders",
          "context": "ription', e.target.value)} placeholder=\"Line description\" /> </TableCell>"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 12,
        "inputs": 10,
        "labels": 17,
        "alerts": 4,
        "modals": 13,
        "tables": 51,
        "cards": 10
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 25 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "InstallmentAccountsInterface",
      "path": "/app/src/components/accounting/InstallmentAccountsInterface.tsx",
      "relativePath": "components/accounting/InstallmentAccountsInterface.tsx",
      "category": "other",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "IncomeLedger",
      "path": "/app/src/components/accounting/IncomeLedger.tsx",
      "relativePath": "components/accounting/IncomeLedger.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [
        "T",
        "accounting.paid",
        "accounting.partial",
        "accounting.unpaid",
        "accounting.total_revenue",
        "accounting.outstanding_amount",
        "accounting.total_invoices",
        "accounting.income_ledger",
        "accounting.filters",
        "accounting.refresh",
        "accounting.loading_income",
        "accounting.invoice_number",
        "accounting.customer",
        "accounting.total_amount",
        "accounting.paid_amount",
        "accounting.remaining",
        "accounting.status",
        "accounting.date",
        "accounting.no_income_entries"
      ],
      "hardcodedStrings": [
        {
          "text": "Clear Filters",
          "type": "buttonText",
          "context": "<div className=\"flex items-end\"> <Button variant=\"outline-gradient-green\" onClick={clearFilters} className=\"w-full\">"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lassName=\"text-center text-red-600\"> Error loading income ledger: {error instanceof Error ? error.message : 'Unknown error'} <"
        },
        {
          "text": "All statuses",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All statuses\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 21,
        "cards": 19
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "GoldWeightLedger",
      "path": "/app/src/components/accounting/GoldWeightLedger.tsx",
      "relativePath": "components/accounting/GoldWeightLedger.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Clear Filters",
          "type": "buttonText",
          "context": "<div className=\"flex items-end\"> <Button variant=\"outline-gradient-amber\" onClick={clearFilters} className=\"w-full\">"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lassName=\"text-center text-red-600\"> Error loading gold weight ledger: {error instanceof Error ? error.message : 'Unknown error'}"
        },
        {
          "text": "All types",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All types\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 2,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 19,
        "cards": 27
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ExpenseLedger",
      "path": "/app/src/components/accounting/ExpenseLedger.tsx",
      "relativePath": "components/accounting/ExpenseLedger.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [
        "accounting.total_expenses",
        "accounting.total_entries",
        "accounting.categories",
        "accounting.expense_ledger",
        "accounting.add_expense",
        "accounting.filters",
        "accounting.refresh",
        "accounting.category",
        "accounting.amount",
        "accounting.description",
        "accounting.date",
        "accounting.reference"
      ],
      "hardcodedStrings": [
        {
          "text": "Transaction Date",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"transaction_date\">Transaction Date</Label> <Input"
        },
        {
          "text": "Clear Filters",
          "type": "buttonText",
          "context": "<div className=\"flex items-end\"> <Button variant=\"outline-gradient-red\" onClick={clearFilters} className=\"w-full\">"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lassName=\"text-center text-red-600\"> Error loading expense ledger: {error instanceof Error ? error.message : 'Unknown error'}"
        },
        {
          "text": "Select category",
          "type": "placeholders",
          "context": "tTrigger> <SelectValue placeholder=\"Select category\" /> </SelectTrigger>"
        },
        {
          "text": "All categories",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All categories\" /> </SelectTrigger> <SelectConten"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 4,
        "labels": 4,
        "alerts": 0,
        "modals": 5,
        "tables": 17,
        "cards": 19
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "DebtTracking",
      "path": "/app/src/components/accounting/DebtTracking.tsx",
      "relativePath": "components/accounting/DebtTracking.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Clear Filters",
          "type": "buttonText",
          "context": "<div className=\"flex items-end\"> <Button variant=\"outline-gradient-orange\" onClick={clearFilters} className=\"w-full\">"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lassName=\"text-center text-red-600\"> Error loading debt tracking: {error instanceof Error ? error.message : 'Unknown error'} <"
        },
        {
          "text": "No limit",
          "type": "placeholders",
          "context": "01\" min=\"0\" placeholder=\"No limit\" value={filters.max_debt || ''} onChange"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 3,
        "labels": 0,
        "alerts": 10,
        "modals": 0,
        "tables": 25,
        "cards": 27
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CheckManager",
      "path": "/app/src/components/accounting/CheckManager.tsx",
      "relativePath": "components/accounting/CheckManager.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [
        "T"
      ],
      "hardcodedStrings": [
        {
          "text": "Amount Range",
          "type": "formLabels",
          "context": "<div className=\"space-y-2\"> <Label>Amount Range</Label> <div className=\"flex gap-2\"> <Input"
        },
        {
          "text": "Check Number *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"check_number\">Check Number *</Label> <Input id=\"check_number"
        },
        {
          "text": "Check Type *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"check_type\">Check Type *</Label> <Select value={formData.che"
        },
        {
          "text": "Bank Name *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"bank_name\">Bank Name *</Label> <Input id=\"bank_name\""
        },
        {
          "text": "Bank Name (Persian)",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"bank_name_persian\">Bank Name (Persian)</Label> <Input id=\"ba"
        },
        {
          "text": "Branch Name",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"branch_name\">Branch Name</Label> <Input id=\"branch_name\""
        },
        {
          "text": "Check Amount *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"check_amount\">Check Amount *</Label> <Input id=\"check_amount"
        },
        {
          "text": "Check Date *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"check_date\">Check Date *</Label> <Input id=\"check_date\""
        },
        {
          "text": "Due Date *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"due_date\">Due Date *</Label> <Input id=\"due_date\""
        },
        {
          "text": "Drawer Name",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"drawer_name\">Drawer Name</Label> <Input id=\"drawer_name\""
        },
        {
          "text": "Payee Name",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"payee_name\">Payee Name</Label> <Input id=\"payee_name\""
        },
        {
          "text": "Subsidiary Account",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"subsidiary_account_id\">Subsidiary Account</Label> <Select value="
        },
        {
          "text": "Notes (Persian)",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"notes_persian\">Notes (Persian)</Label> <Textarea id=\"notes_persi"
        },
        {
          "text": "Post-dated Check",
          "type": "formLabels",
          "context": ", is_post_dated: checked })} /> <Label htmlFor=\"is_post_dated\">Post-dated Check</Label> </div> <div className=\"flex"
        },
        {
          "text": "Check Number",
          "type": "formLabels",
          "context": "bg-gray-50 rounded-lg\"> <div> <Label className=\"text-sm font-medium text-muted-foreground\">Check Number</Label> <p clas"
        },
        {
          "text": "Bank Name",
          "type": "formLabels",
          "context": "grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium text-muted-foreground\">Bank Name</Label> <p class"
        },
        {
          "text": "Check Date",
          "type": "formLabels",
          "context": "grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium text-muted-foreground\">Check Date</Label> <p clas"
        },
        {
          "text": "Due Date",
          "type": "formLabels",
          "context": "> </div> <div> <Label className=\"text-sm font-medium text-muted-foreground\">Due Date</Label> <p classN"
        },
        {
          "text": "Deposit Date",
          "type": "formLabels",
          "context": "posit_date && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Deposit Date</Label> <p"
        },
        {
          "text": "Clear Date",
          "type": "formLabels",
          "context": "clear_date && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Clear Date</Label> <p cl"
        },
        {
          "text": "Drawer (Check Writer)",
          "type": "formLabels",
          "context": "r_name && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Drawer (Check Writer)</Label>"
        },
        {
          "text": "Payee (Recipient)",
          "type": "formLabels",
          "context": "e_name && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Payee (Recipient)</Label>"
        },
        {
          "text": "Notes (Persian)",
          "type": "formLabels",
          "context": "es_persian && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Notes (Persian)</Label>"
        },
        {
          "text": "Post-dated",
          "type": "formLabels",
          "context": "grid-cols-2 gap-4\"> <div> <Label className=\"text-sm font-medium text-muted-foreground\">Post-dated</Label> <p clas"
        },
        {
          "text": "Bounce Fee",
          "type": "formLabels",
          "context": "ce_fee > 0 && ( <div> <Label className=\"text-sm font-medium text-muted-foreground\">Bounce Fee</Label> <p cl"
        },
        {
          "text": "New Status *",
          "type": "formLabels",
          "context": "y-4\"> <div className=\"space-y-2\"> <Label htmlFor=\"status\">New Status *</Label> <Select value={newStatus} onValueChange={setNe"
        },
        {
          "text": "text-yellow-600",
          "type": "errorMessages",
          "context": "'' }); const { data: checks = [], isLoading, error } = useChecks(filters); const { data: subsidiaryAccounts = [] } = useSubsidiaryAccounts();"
        },
        {
          "text": "Invalid check data for creation",
          "type": "errorMessages",
          "context": "ogOpen(false); } else { throw new Error('Invalid check data for creation'); } } catch (error) { toast.error('Failed"
        },
        {
          "text": "Failed to create check",
          "type": "errorMessages",
          "context": "check data for creation'); } } catch (error) { toast.error('Failed to create check'); } }; const handleUpdateCheck = a"
        },
        {
          "text": "Failed to update check",
          "type": "errorMessages",
          "context": "se); setSelectedCheck(null); } catch (error) { toast.error('Failed to update check'); } }; const handleUpdateStatus ="
        },
        {
          "text": "Failed to update check status",
          "type": "errorMessages",
          "context": "checkId: '', currentStatus: '' }); } catch (error) { toast.error('Failed to update check status'); } }; const handleDeleteCh"
        },
        {
          "text": "Failed to delete check",
          "type": "errorMessages",
          "context": "cess('Check deleted successfully'); } catch (error) { toast.error('Failed to delete check'); } }; const formatCurrency = (amo"
        },
        {
          "text": "border-0 shadow-lg border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error) { return ( <Card className={cn(\"border-0 shadow-lg border-red-200 bg-red-50\", cla"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "h3 className=\"text-lg font-semibold text-red-800\">Error Loading Checks</h3> <p className=\"text-red-600\">Unable to load check data. Plea"
        },
        {
          "text": "Check number",
          "type": "placeholders",
          "context": "ta, check_number: e.target.value })} placeholder=\"Check number\" required /> </div> <div classNa"
        },
        {
          "text": "Bank name",
          "type": "placeholders",
          "context": "mData, bank_name: e.target.value })} placeholder=\"Bank name\" required /> </div> <div className="
        },
        {
          "text": "Branch name",
          "type": "placeholders",
          "context": "ata, branch_name: e.target.value })} placeholder=\"Branch name\" /> </div> <div className=\"space-y-2\">"
        },
        {
          "text": "Check writer",
          "type": "placeholders",
          "context": "ata, drawer_name: e.target.value })} placeholder=\"Check writer\" /> </div> <div className=\"space-y-2\">"
        },
        {
          "text": "Check recipient",
          "type": "placeholders",
          "context": "Data, payee_name: e.target.value })} placeholder=\"Check recipient\" /> </div> </div> <div className=\"s"
        },
        {
          "text": "Select subsidiary account",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select subsidiary account\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 2,
        "buttons": 11,
        "inputs": 13,
        "labels": 37,
        "alerts": 3,
        "modals": 17,
        "tables": 25,
        "cards": 18
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 40 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "CheckManagementSystem",
      "path": "/app/src/components/accounting/CheckManagementSystem.tsx",
      "relativePath": "components/accounting/CheckManagementSystem.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [
        "T",
        "check_created_successfully",
        "error_creating_check",
        "check_status_updated",
        "error_updating_check_status",
        "confirm_delete_check",
        "check_deleted_successfully",
        "error_deleting_check",
        "pending",
        "deposited",
        "cleared",
        "bounced",
        "cancelled",
        "received",
        "issued",
        "check_management",
        "manage_received_issued_checks",
        "add_check",
        "refresh",
        "filters",
        "check_type",
        "select_type",
        "status",
        "select_status",
        "bank_name",
        "enter_bank_name",
        "search",
        "search_checks",
        "checks_list",
        "export",
        "loading_checks",
        "check_number",
        "amount",
        "check_date",
        "due_date",
        "type",
        "actions",
        "currency",
        "add_new_check",
        "enter_check_number",
        "check_amount",
        "enter_amount",
        "notes",
        "enter_notes",
        "cancel",
        "create_check",
        "update_check_status",
        "bank",
        "new_status",
        "select_new_status"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 7,
        "inputs": 5,
        "labels": 12,
        "alerts": 0,
        "modals": 8,
        "tables": 21,
        "cards": 8
      },
      "recommendations": []
    },
    {
      "name": "ChartOfAccountsManager",
      "path": "/app/src/components/accounting/ChartOfAccountsManager.tsx",
      "relativePath": "components/accounting/ChartOfAccountsManager.tsx",
      "category": "other",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Include Inactive",
          "type": "formLabels",
          "context": "udeInactive} /> <Label htmlFor=\"include-inactive\" className=\"text-sm\">Include Inactive</Label> </div>"
        },
        {
          "text": "Account Code *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"account_code\">Account Code *</Label> <Input id=\"account_code"
        },
        {
          "text": "Account Type *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"account_type\">Account Type *</Label> <Select value={formData"
        },
        {
          "text": "Account Name *",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"account_name\">Account Name *</Label> <Input id=\"account_name\""
        },
        {
          "text": "Account Name (Persian)",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"account_name_persian\">Account Name (Persian)</Label> <Input id=\""
        },
        {
          "text": "Parent Account",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"parent_account_id\">Parent Account</Label> <Select value={for"
        },
        {
          "text": "Account Category *",
          "type": "formLabels",
          "context": "> <div className=\"space-y-2\"> <Label htmlFor=\"account_category\">Account Category *</Label> <Input id=\"acco"
        },
        {
          "text": "Description (Persian)",
          "type": "formLabels",
          "context": "iv> <div className=\"space-y-2\"> <Label htmlFor=\"account_description_persian\">Description (Persian)</Label> <Textarea"
        },
        {
          "text": "Allow Manual Entries",
          "type": "formLabels",
          "context": "ual_entries: checked })} /> <Label htmlFor=\"allow_manual_entries\">Allow Manual Entries</Label> </div> <div cla"
        },
        {
          "text": "Requires Subsidiary Account",
          "type": "formLabels",
          "context": "_subsidiary: checked })} /> <Label htmlFor=\"requires_subsidiary\">Requires Subsidiary Account</Label> </div> {i"
        },
        {
          "text": "text-green-600",
          "type": "errorMessages",
          "context": "se); const { data: accounts = [], isLoading, error } = useChartOfAccounts(includeInactive); const createAccountMutation = useCreateChartOfAcco"
        },
        {
          "text": "Invalid account data for creation",
          "type": "errorMessages",
          "context": "ogOpen(false); } else { throw new Error('Invalid account data for creation'); } } catch (error) { toast.error('Fail"
        },
        {
          "text": "Failed to create account",
          "type": "errorMessages",
          "context": "count data for creation'); } } catch (error) { toast.error('Failed to create account'); } }; const handleUpdateAccount"
        },
        {
          "text": "Failed to update account",
          "type": "errorMessages",
          "context": "); setSelectedAccount(null); } catch (error) { toast.error('Failed to update account'); } }; const handleDeleteAccount"
        },
        {
          "text": "Failed to delete account",
          "type": "errorMessages",
          "context": "ss('Account deleted successfully'); } catch (error) { toast.error('Failed to delete account'); } }; const formatCurrency = (a"
        },
        {
          "text": "border-0 shadow-lg border-red-200 bg-red-50",
          "type": "errorMessages",
          "context": "CardContent> </Card> ); } if (error) { return ( <Card className={cn(\"border-0 shadow-lg border-red-200 bg-red-50\", cla"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "h3 className=\"text-lg font-semibold text-red-800\">Error Loading Chart of Accounts</h3> <p className=\"text-red-600\">Unable to load accou"
        },
        {
          "text": "Filter by type",
          "type": "placeholders",
          "context": "\"h-4 w-4 mr-2\" /> <SelectValue placeholder=\"Filter by type\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "Select parent account",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"Select parent account\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 7,
        "inputs": 5,
        "labels": 12,
        "alerts": 1,
        "modals": 9,
        "tables": 19,
        "cards": 10
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 19 hardcoded strings with translation keys"
        },
        {
          "type": "form",
          "priority": "high",
          "message": "Form labels should use translation keys for better accessibility"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "CashBankLedger",
      "path": "/app/src/components/accounting/CashBankLedger.tsx",
      "relativePath": "components/accounting/CashBankLedger.tsx",
      "category": "other",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Clear Filters",
          "type": "buttonText",
          "context": "className=\"flex justify-end mt-4\"> <Button variant=\"outline-gradient-blue\" onClick={clearFilters}> Clear Filters"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "lassName=\"text-center text-red-600\"> Error loading cash & bank ledger: {error instanceof Error ? error.message : 'Unknown error'}"
        },
        {
          "text": "All types",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All types\" /> </SelectTrigger> <SelectContent>"
        },
        {
          "text": "All methods",
          "type": "placeholders",
          "context": "<SelectTrigger> <SelectValue placeholder=\"All methods\" /> </SelectTrigger> <SelectContent>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 2,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 19,
        "cards": 23
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "AccountingDashboard",
      "path": "/app/src/components/accounting/AccountingDashboard.tsx",
      "relativePath": "components/accounting/AccountingDashboard.tsx",
      "category": "other",
      "type": "card",
      "translationKeys": [
        "accounting.enhanced_dashboard"
      ],
      "hardcodedStrings": [
        {
          "text": "en-US",
          "type": "errorMessages",
          "context": "tate(0); const { data: dashboard, isLoading, error } = useAccountingDashboard(); const handleRefresh = () => { setRefreshKey(prev => pr"
        },
        {
          "text": "container mx-auto p-6",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <div className=\"container mx-auto p-6\"> <Card className=\"bord"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "h3 className=\"text-lg font-semibold text-red-800\">Error Loading Dashboard</h3> <p className=\"text-red-600\">Unable to load accounting"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 8,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 46
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "TurnoverAnalysisChart",
      "path": "/app/src/components/inventory/charts/TurnoverAnalysisChart.tsx",
      "relativePath": "components/inventory/charts/TurnoverAnalysisChart.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "StockOptimizationChart",
      "path": "/app/src/components/inventory/charts/StockOptimizationChart.tsx",
      "relativePath": "components/inventory/charts/StockOptimizationChart.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Take Action",
          "type": "buttonText",
          "context": "otential Savings</div> <Button size=\"sm\" className=\"mt-2\"> Take Action"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "SeasonalAnalysisChart",
      "path": "/app/src/components/inventory/charts/SeasonalAnalysisChart.tsx",
      "relativePath": "components/inventory/charts/SeasonalAnalysisChart.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": []
    },
    {
      "name": "PerformanceMetricsChart",
      "path": "/app/src/components/inventory/charts/PerformanceMetricsChart.tsx",
      "relativePath": "components/inventory/charts/PerformanceMetricsChart.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 8
      },
      "recommendations": []
    },
    {
      "name": "DemandForecastChart",
      "path": "/app/src/components/inventory/charts/DemandForecastChart.tsx",
      "relativePath": "components/inventory/charts/DemandForecastChart.tsx",
      "category": "inventory",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "SummaryCards",
      "path": "/app/src/components/dashboard/SummaryCards.tsx",
      "relativePath": "components/dashboard/SummaryCards.tsx",
      "category": "dashboard",
      "type": "utility",
      "translationKeys": [
        "dashboard.no_data_available",
        "dashboard.total_sales_today",
        "dashboard.vs_last_week",
        "dashboard.week",
        "dashboard.month",
        "dashboard.inventory_value",
        "dashboard.items_low_stock",
        "dashboard.stock_levels_healthy",
        "dashboard.low_stock",
        "dashboard.customer_debt",
        "dashboard.unpaid_invoices",
        "dashboard.all_invoices_current",
        "dashboard.overdue",
        "dashboard.gold_price_per_gram",
        "dashboard.from_last_week",
        "dashboard.market_rate"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "ModernChart",
      "path": "/app/src/components/dashboard/ModernChart.tsx",
      "relativePath": "components/dashboard/ModernChart.tsx",
      "category": "dashboard",
      "type": "chart",
      "translationKeys": [
        "a",
        "dashboard.refresh_chart",
        "dashboard.export_chart",
        "dashboard.exit_fullscreen",
        "dashboard.fullscreen",
        "charts.no_data",
        "charts.loading"
      ],
      "hardcodedStrings": [
        {
          "text": "{isFullscreen ? (",
          "type": "buttonText",
          "context": "{showFullscreen && ( <Button variant=\"outline\" size=\"sm\" onClick={toggleFull"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 8
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        }
      ]
    },
    {
      "name": "MetricCard",
      "path": "/app/src/components/dashboard/MetricCard.tsx",
      "relativePath": "components/dashboard/MetricCard.tsx",
      "category": "dashboard",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": []
    },
    {
      "name": "DashboardCharts",
      "path": "/app/src/components/dashboard/DashboardCharts.tsx",
      "relativePath": "components/dashboard/DashboardCharts.tsx",
      "category": "dashboard",
      "type": "utility",
      "translationKeys": [
        "common.loading",
        "dashboard.sales_trends",
        "dashboard.sales_trends_desc",
        "dashboard.sales_by_category",
        "dashboard.sales_by_category_desc",
        "dashboard.top_products",
        "dashboard.top_products_desc"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "AlertsPanel",
      "path": "/app/src/components/dashboard/AlertsPanel.tsx",
      "relativePath": "components/dashboard/AlertsPanel.tsx",
      "category": "dashboard",
      "type": "card",
      "translationKeys": [
        "dashboard.days_overdue",
        "dashboard.alerts_notifications",
        "dashboard.alerts",
        "dashboard.unread",
        "dashboard.critical",
        "dashboard.hide_dismissed",
        "dashboard.show_dismissed",
        "dashboard.tab_all",
        "dashboard.tab_critical",
        "dashboard.tab_unread",
        "common.action_required",
        "common.${alert.priority}",
        "common.dismiss_alert",
        "dashboard.all_clear",
        "dashboard.no_alerts"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 3,
        "modals": 0,
        "tables": 0,
        "cards": 8
      },
      "recommendations": []
    },
    {
      "name": "index",
      "path": "/app/src/components/analytics/charts/index.ts",
      "relativePath": "components/analytics/charts/index.ts",
      "category": "analytics",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "TrendChart",
      "path": "/app/src/components/analytics/charts/TrendChart.tsx",
      "relativePath": "components/analytics/charts/TrendChart.tsx",
      "category": "analytics",
      "type": "chart",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "TimeBasedChart",
      "path": "/app/src/components/analytics/charts/TimeBasedChart.tsx",
      "relativePath": "components/analytics/charts/TimeBasedChart.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "SalesAnalyticsChart",
      "path": "/app/src/components/analytics/charts/SalesAnalyticsChart.tsx",
      "relativePath": "components/analytics/charts/SalesAnalyticsChart.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "InventoryAnalyticsChart",
      "path": "/app/src/components/analytics/charts/InventoryAnalyticsChart.tsx",
      "relativePath": "components/analytics/charts/InventoryAnalyticsChart.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "InteractiveChart",
      "path": "/app/src/components/analytics/charts/InteractiveChart.tsx",
      "relativePath": "components/analytics/charts/InteractiveChart.tsx",
      "category": "analytics",
      "type": "chart",
      "translationKeys": [
        "."
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 7,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "HeatmapChart",
      "path": "/app/src/components/analytics/charts/HeatmapChart.tsx",
      "relativePath": "components/analytics/charts/HeatmapChart.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "CustomerAnalyticsChart",
      "path": "/app/src/components/analytics/charts/CustomerAnalyticsChart.tsx",
      "relativePath": "components/analytics/charts/CustomerAnalyticsChart.tsx",
      "category": "analytics",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 4
      },
      "recommendations": []
    },
    {
      "name": "ChartExportMenu",
      "path": "/app/src/components/analytics/charts/ChartExportMenu.tsx",
      "relativePath": "components/analytics/charts/ChartExportMenu.tsx",
      "category": "analytics",
      "type": "modal",
      "translationKeys": [
        "png",
        "svg",
        "pdf",
        "csv"
      ],
      "hardcodedStrings": [
        {
          "text": "Public Access",
          "type": "formLabels",
          "context": "className=\"space-y-0.5\"> <Label>Public Access</Label> <p className=\"text-sm text-muted-foreground\">"
        },
        {
          "text": "Allow Comments",
          "type": "formLabels",
          "context": "className=\"space-y-0.5\"> <Label>Allow Comments</Label> <p className=\"text-sm text-muted-foreground\">"
        },
        {
          "text": "Share URL",
          "type": "formLabels",
          "context": "-lg border-0 shadow-lg\"> <Label className=\"text-sm font-medium\">Share URL</Label> <div className=\"fl"
        },
        {
          "text": "Width (px)",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"embed-width\">Width (px)</Label> <Input"
        },
        {
          "text": "Height (px)",
          "type": "formLabels",
          "context": "<div> <Label htmlFor=\"embed-height\">Height (px)</Label> <Input"
        },
        {
          "text": "Show Controls",
          "type": "formLabels",
          "context": "className=\"space-y-0.5\"> <Label>Show Controls</Label> <p className=\"text-sm text-muted-foreground\">"
        },
        {
          "text": "Embed Code",
          "type": "formLabels",
          "context": "-lg border-0 shadow-lg\"> <Label className=\"text-sm font-medium\">Embed Code</Label> <div className=\"m"
        },
        {
          "text": "Chart element not found",
          "type": "errorMessages",
          "context": "!chartElement && format !== 'csv') { toast.error('Chart element not found'); return; } if (format === 'csv' && (!chartData |"
        },
        {
          "text": "No data available for CSV export",
          "type": "errorMessages",
          "context": "rtData || chartData.length === 0)) { toast.error('No data available for CSV export'); return; } setIsExporting(true); s"
        },
        {
          "text": "Export failed",
          "type": "errorMessages",
          "context": "omplete?.(result); } else { toast.error(result.error || 'Export failed'); } } catch (error) { toast.error('Export f"
        },
        {
          "text": "Export failed:",
          "type": "errorMessages",
          "context": "error || 'Export failed'); } } catch (error) { toast.error('Export failed: ' + (error instanceof Error ? error.message : 'Unknown e"
        },
        {
          "text": "Unknown error",
          "type": "errorMessages",
          "context": "(error) { toast.error('Export failed: ' + (error instanceof Error ? error.message : 'Unknown error')); } finally { setIsExporting(f"
        },
        {
          "text": "Chart configuration not available",
          "type": "errorMessages",
          "context": "ync () => { if (!chartConfig) { toast.error('Chart configuration not available'); return; } try { const url = aw"
        },
        {
          "text": "Failed to generate share link",
          "type": "errorMessages",
          "context": "st.success('Share link generated'); } catch (error) { toast.error('Failed to generate share link'); } }; // Generate embed co"
        },
        {
          "text": "Failed to copy to clipboard",
          "type": "errorMessages",
          "context": "opied to clipboard`); } catch { toast.error('Failed to copy to clipboard'); } }; // Add tag const addTag = () => { if"
        },
        {
          "text": "Enter chart title",
          "type": "placeholders",
          "context": "tle: e.target.value }))} placeholder=\"Enter chart title\" /> </div>"
        },
        {
          "text": "Enter chart description",
          "type": "placeholders",
          "context": "ion: e.target.value }))} placeholder=\"Enter chart description\" rows={3} />"
        },
        {
          "text": "Add tag",
          "type": "placeholders",
          "context": "ewTag(e.target.value)} placeholder=\"Add tag\" onKeyPress={(e) => e.key === 'Enter' && addTag()}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 10,
        "inputs": 5,
        "labels": 12,
        "alerts": 0,
        "modals": 7,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 18 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ChartAnnotations",
      "path": "/app/src/components/analytics/charts/ChartAnnotations.tsx",
      "relativePath": "components/analytics/charts/ChartAnnotations.tsx",
      "category": "analytics",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Add Reply",
          "type": "formLabels",
          "context": "div className=\"space-y-2\"> <Label htmlFor=\"reply-text\" className=\"text-sm\">Add Reply</Label> <div classN"
        },
        {
          "text": "Create Annotation",
          "type": "buttonText",
          "context": "Cancel </Button> <Button onClick={createAnnotation} disabled={!newAnnotation.text.trim()} className=\"bg-gradient-to-r"
        },
        {
          "text": "Failed to create annotation",
          "type": "errorMessages",
          "context": "oast.success('Annotation created'); } catch (error) { toast.error('Failed to create annotation'); } }; // Update annotation"
        },
        {
          "text": "Failed to update annotation",
          "type": "errorMessages",
          "context": "oast.success('Annotation updated'); } catch (error) { toast.error('Failed to update annotation'); } }; // Delete annotation"
        },
        {
          "text": "Failed to delete annotation",
          "type": "errorMessages",
          "context": "otation deleted'); } else { toast.error('Failed to delete annotation'); } } catch (error) { toast.error('Failed to"
        },
        {
          "text": "Failed to delete annotation",
          "type": "errorMessages",
          "context": "ed to delete annotation'); } } catch (error) { toast.error('Failed to delete annotation'); } }; // Toggle annotation p"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 12,
        "inputs": 1,
        "labels": 7,
        "alerts": 1,
        "modals": 15,
        "tables": 0,
        "cards": 4
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "UniversalInventory",
      "path": "/app/src/pages/UniversalInventory.tsx",
      "relativePath": "pages/UniversalInventory.tsx",
      "category": "page",
      "type": "table",
      "translationKeys": [
        "inventory.out_of_stock",
        "inventory.low_stock",
        "inventory.in_stock",
        "inventory.item",
        "inventory.category",
        "inventory.uncategorized",
        "inventory.pricing",
        "inventory.cost",
        "inventory.stock",
        "inventory.actions",
        "inventory.sale",
        "inventory.loading",
        "inventory.failed_to_load",
        "inventory.universal_management",
        "inventory.universal_description",
        "common.refresh",
        "inventory.filters",
        "inventory.active",
        "inventory.add_item",
        "inventory.total_items",
        "inventory.total_value",
        "inventory.categories",
        "inventory.items",
        "inventory.alerts",
        "inventory.search_placeholder",
        "inventory.no_items_found",
        "inventory.add_first_message",
        "inventory.add_first_item",
        "inventory.category_management",
        "inventory.low_stock_alerts",
        "inventory.current_stock",
        "inventory.threshold",
        "inventory.no_alerts",
        "inventory.all_items_stocked"
      ],
      "hardcodedStrings": [
        {
          "text": "Failed to delete item:",
          "type": "errorMessages",
          "context": "tem.mutateAsync({ id: item.id }); } catch (error) { console.error('Failed to delete item:', error); } } }, [deleteItem,"
        },
        {
          "text": "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6",
          "type": "errorMessages",
          "context": "console.error('Failed to delete item:', error); } } }, [deleteItem, t]); const handleCreateItem = useCallback(() => {"
        },
        {
          "text": "container mx-auto p-6",
          "type": "errorMessages",
          "context": "</Card> </div> ); } // Error state if (itemsError) { return ( <div className=\"container mx-auto p-6\">"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 11,
        "inputs": 1,
        "labels": 0,
        "alerts": 8,
        "modals": 0,
        "tables": 1,
        "cards": 31
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "SystemAdministration",
      "path": "/app/src/pages/SystemAdministration.tsx",
      "relativePath": "pages/SystemAdministration.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "system.admin.accessDenied",
        "system.admin.tabs.overview",
        "system.admin.tabs.services",
        "system.admin.tabs.security",
        "system.admin.tabs.performance",
        "system.admin.tabs.database",
        "system.admin.tabs.redis",
        "system.admin.tabs.backups",
        "system.admin.tabs.logs",
        "system.admin.title",
        "system.admin.description",
        "system.admin.online"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 2
      },
      "recommendations": []
    },
    {
      "name": "StockOptimization",
      "path": "/app/src/pages/StockOptimization.tsx",
      "relativePath": "pages/StockOptimization.tsx",
      "category": "page",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "Settings",
      "path": "/app/src/pages/Settings.tsx",
      "relativePath": "pages/Settings.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "settings.access_denied",
        "settings.access_denied_message",
        "settings.title",
        "settings.description",
        "settings.all_systems_online",
        "settings.refresh_status",
        "settings.save_all_changes",
        "settings.tab_company",
        "settings.tab_gold_price",
        "settings.tab_templates",
        "settings.tab_roles",
        "settings.tab_users",
        "settings.tab_disaster_recovery",
        "settings.company_title",
        "settings.company_description",
        "common.active",
        "settings.gold_price_title",
        "settings.gold_price_description",
        "common.auto_update",
        "settings.invoice_template_title",
        "settings.invoice_template_description",
        "common.customizable",
        "settings.roles_title",
        "settings.roles_description",
        "common.secure",
        "settings.users_title",
        "settings.users_description",
        "common.multi_user",
        "settings.disaster_recovery_title",
        "settings.disaster_recovery_description",
        "settings.protected",
        "settings.system_overview",
        "settings.check_status",
        "settings.database",
        "settings.online",
        "settings.connection_stable",
        "settings.api_services",
        "settings.all_services",
        "settings.response_time",
        "settings.security",
        "settings.ssl_enabled",
        "settings.backup",
        "settings.current",
        "settings.hours_ago",
        "settings.next_scheduled",
        "settings.system_information",
        "settings.system_information_desc",
        "settings.application",
        "settings.version",
        "settings.environment",
        "settings.production",
        "settings.resources",
        "settings.cpu_usage",
        "settings.memory",
        "settings.activity",
        "settings.active_users",
        "settings.last_activity",
        "settings.just_now"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 25
      },
      "recommendations": []
    },
    {
      "name": "SMS",
      "path": "/app/src/pages/SMS.tsx",
      "relativePath": "pages/SMS.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "sms.total_campaigns",
        "sms.pending",
        "sms.messages_sent",
        "sms.delivered",
        "sms.success_rate",
        "sms.delivery_rate",
        "sms.recent_campaigns",
        "sms.recent_campaigns_desc",
        "sms.recipients",
        "sms.${campaign.status}",
        "sms.no_recent_campaigns",
        "sms.recent_messages",
        "sms.message_history_desc",
        "sms.${message.status}",
        "sms.no_recent_messages",
        "sms.title",
        "sms.description",
        "sms.status_ready",
        "sms.quick_send",
        "sms.tab_overview",
        "sms.tab_overview_desc",
        "sms.tab_templates",
        "sms.tab_templates_desc",
        "sms.tab_campaigns",
        "sms.tab_campaigns_desc",
        "sms.tab_history",
        "sms.tab_history_desc",
        "sms.analytics_title",
        "sms.analytics_description",
        "common.real_time",
        "sms.templates_title",
        "sms.templates_description",
        "common.optimized",
        "sms.campaigns_title",
        "sms.campaigns_description",
        "common.automated",
        "sms.message_history",
        "common.tracked",
        "sms.templates",
        "sms.campaigns",
        "sms.history"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 1,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 30
      },
      "recommendations": []
    },
    {
      "name": "ResetPassword",
      "path": "/app/src/pages/ResetPassword.tsx",
      "relativePath": "pages/ResetPassword.tsx",
      "category": "page",
      "type": "form",
      "translationKeys": [
        "token"
      ],
      "hardcodedStrings": [
        {
          "text": "{showPassword ? (",
          "type": "buttonText",
          "context": "})} /> <Button type=\"button\" variant=\"ghost\""
        },
        {
          "text": "{showConfirmPassword ? (",
          "type": "buttonText",
          "context": "})} /> <Button type=\"button\" variant=\"ghost\""
        },
        {
          "text": "{isSubmitting ? (",
          "type": "buttonText",
          "context": "{/* Enhanced Submit Button */} <Button type=\"submit\" disabled={isSubmitting || !isValid}"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "dium flex items-center gap-2\", errors.password && \"text-red-600\" )}> <Lock className=\"h-4 w-4\""
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "ors pr-10 h-12 text-base\", errors.password && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "Button> </div> {errors.password && ( <p className=\"text-sm text-red-600 flex items-center gap-1\">"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.password.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "dium flex items-center gap-2\", errors.confirmPassword && \"text-red-600\" )}> <Lock className=\"h-"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "ors pr-10 h-12 text-base\", errors.confirmPassword && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "Button> </div> {errors.confirmPassword && ( <p className=\"text-sm text-red-600 flex items-center"
        },
        {
          "text": "bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-xl border border-blue-200",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.confirmPassword.message} </p> )} </div>"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 6,
        "inputs": 2,
        "labels": 2,
        "alerts": 6,
        "modals": 0,
        "tables": 0,
        "cards": 11
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 11 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "Reports",
      "path": "/app/src/pages/Reports.tsx",
      "relativePath": "pages/Reports.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "reports.title",
        "reports.comprehensive_insights",
        "reports.live_data",
        "reports.refresh_current",
        "reports.refresh_all",
        "reports.export",
        "reports.global_filters",
        "reports.global_filters_desc",
        "reports.smart_filtering",
        "reports.sales",
        "reports.sales_analytics_desc",
        "reports.inventory",
        "reports.inventory_analytics_desc",
        "reports.customers",
        "reports.customer_analytics_desc",
        "reports.sales_analytics",
        "reports.export_sales_data",
        "reports.inventory_analytics",
        "reports.efficiency",
        "reports.export_inventory",
        "reports.customer_analytics",
        "reports.satisfaction",
        "reports.export_customer_data",
        "reports.advanced_analytics_suite",
        "reports.powerful_analytics_tools",
        "reports.report_builder",
        "reports.drag_drop_report_creation",
        "reports.drag_drop",
        "reports.visual_builder",
        "reports.report_builder_desc",
        "reports.advanced_charts",
        "reports.interactive_data_visualizations",
        "reports.interactive",
        "reports.heatmaps",
        "reports.advanced_charts_desc",
        "reports.forecasting_analytics",
        "reports.ai_powered_demand_prediction",
        "reports.ai_optimized",
        "reports.predictions_trends",
        "reports.forecasting_analytics_description",
        "reports.stock_optimization",
        "reports.intelligent_inventory_management",
        "reports.optimization_filters",
        "reports.recommendations",
        "reports.stock_optimization_description",
        "reports.cache_management",
        "reports.monitor_manage_analytics_caching",
        "reports.performance",
        "reports.overview",
        "reports.cache_management_description",
        "reports.kpi_dashboard",
        "reports.kpi_dashboard_desc",
        "reports.real_time",
        "reports.sales_reports",
        "reports.sales_reports_description",
        "reports.inventory_reports",
        "reports.inventory_reports_description",
        "reports.report_filters",
        "reports.inventory_filters_description",
        "reports.customer_reports",
        "reports.customer_reports_description",
        "reports.customer_filters_description"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 19,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 52
      },
      "recommendations": []
    },
    {
      "name": "ReportBuilder",
      "path": "/app/src/pages/ReportBuilder.tsx",
      "relativePath": "pages/ReportBuilder.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "reports.report_builder",
        "reports.drag_drop_report_creation",
        "reports.visual_builder",
        "reports.preview",
        "reports.save_report",
        "reports.generate",
        "reports.drag_drop",
        "reports.drag_drop_desc",
        "reports.visual_design",
        "reports.visual_design_desc",
        "reports.export_share",
        "reports.export_share_desc"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 32
      },
      "recommendations": []
    },
    {
      "name": "Register",
      "path": "/app/src/pages/Register.tsx",
      "relativePath": "pages/Register.tsx",
      "category": "page",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "{showPassword ? (",
          "type": "buttonText",
          "context": "})} /> <Button type=\"button\" variant=\"ghost\""
        },
        {
          "text": "{showConfirmPassword ? (",
          "type": "buttonText",
          "context": "})} /> <Button type=\"button\" variant=\"ghost\""
        },
        {
          "text": "{isRegistering ? (",
          "type": "buttonText",
          "context": "{/* Enhanced Submit Button */} <Button type=\"submit\" disabled={isRegistering || !isValid}"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "um flex items-center gap-2\", errors.firstName && \"text-red-600\" )}> <User className=\"h-4"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "\"transition-colors\", errors.firstName && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "})} /> {errors.firstName && ( <p className=\"text-sm text-red-600 flex items-center gap-"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "le className=\"h-4 w-4\" /> {errors.firstName.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "um flex items-center gap-2\", errors.lastName && \"text-red-600\" )}> <User className=\"h-4 w"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "\"transition-colors\", errors.lastName && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "})} /> {errors.lastName && ( <p className=\"text-sm text-red-600 flex items-center gap-1"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "le className=\"h-4 w-4\" /> {errors.lastName.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "dium flex items-center gap-2\", errors.email && \"text-red-600\" )}> <Mail className=\"h-4 w-4\" />"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "\"transition-colors\", errors.email && \"border-red-500 focus:border-red-500 focus:ring-red-500\", direc"
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "})} /> {errors.email && ( <p className=\"text-sm text-red-600 flex items-center gap-1\">"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.email.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "dium flex items-center gap-2\", errors.username && \"text-red-600\" )}> <User className=\"h-4 w-4\""
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "\"transition-colors\", errors.username && \"border-red-500 focus:border-red-500 focus:ring-red-500\", di"
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "})} /> {errors.username && ( <p className=\"text-sm text-red-600 flex items-center gap-1\">"
        },
        {
          "text": "grid grid-cols-1 md:grid-cols-2 gap-4",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.username.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "um flex items-center gap-2\", errors.password && \"text-red-600\" )}> <Lock className=\"h-4 w"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "ransition-colors pr-10\", errors.password && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "on> </div> {errors.password && ( <p className=\"text-sm text-red-600 flex items-center gap-1"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "le className=\"h-4 w-4\" /> {errors.password.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "um flex items-center gap-2\", errors.confirmPassword && \"text-red-600\" )}> <Lock className"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "ransition-colors pr-10\", errors.confirmPassword && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "on> </div> {errors.confirmPassword && ( <p className=\"text-sm text-red-600 flex items-cente"
        },
        {
          "text": "flex items-start space-x-3",
          "type": "errorMessages",
          "context": "le className=\"h-4 w-4\" /> {errors.confirmPassword.message} </p> )} </d"
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "</Label> </div> {errors.acceptTerms && ( <p className=\"text-sm text-red-600 flex items-center gap-1\""
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 5,
        "inputs": 6,
        "labels": 7,
        "alerts": 10,
        "modals": 0,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 28 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ModalPopupDemo",
      "path": "/app/src/pages/ModalPopupDemo.tsx",
      "relativePath": "pages/ModalPopupDemo.tsx",
      "category": "page",
      "type": "modal",
      "translationKeys": [
        "default",
        "success",
        "warning",
        "destructive",
        "info"
      ],
      "hardcodedStrings": [
        {
          "text": "Full Name",
          "type": "formLabels",
          "context": "className=\"space-y-2\"> <Label htmlFor=\"profile-name\">Full Name</Label> <Input id=\"profile-name\""
        },
        {
          "text": "Email Address",
          "type": "formLabels",
          "context": "className=\"space-y-2\"> <Label htmlFor=\"profile-email\">Email Address</Label> <Input id=\"profile-e"
        },
        {
          "text": "Save Changes",
          "type": "buttonText",
          "context": "</DialogClose> <Button variant=\"gradient-green\">Save Changes</Button> </DialogFooter>"
        },
        {
          "text": "Create Item",
          "type": "buttonText",
          "context": "</DialogClose> <Button variant=\"gradient-blue\">Create Item</Button> </DialogFooter>"
        },
        {
          "text": "Right Sheet",
          "type": "buttonText",
          "context": "<SheetTrigger asChild> <Button variant=\"gradient-teal\" className=\"w-full\"> Right Sheet"
        },
        {
          "text": "Save Changes",
          "type": "buttonText",
          "context": "</div> <Button variant=\"gradient-teal\" className=\"w-full\"> Save Changes"
        },
        {
          "text": "Left Sheet",
          "type": "buttonText",
          "context": "<SheetTrigger asChild> <Button variant=\"gradient-blue\" className=\"w-full\"> Left Sheet"
        },
        {
          "text": "Top Sheet",
          "type": "buttonText",
          "context": "<SheetTrigger asChild> <Button variant=\"gradient-purple\" className=\"w-full\"> Top Sheet"
        },
        {
          "text": "Bottom Sheet",
          "type": "buttonText",
          "context": "<SheetTrigger asChild> <Button variant=\"gradient-blue\" className=\"w-full\"> Bottom Sheet"
        },
        {
          "text": ", description:",
          "type": "errorMessages",
          "context": "adient styling.' }, destructive: { title: 'Error Occurred', description: 'Something went wrong. Please try again.' }, success: { title:"
        },
        {
          "text": "border-0 shadow-xl bg-gradient-to-br from-white via-yellow-50/30 to-orange-50/30",
          "type": "errorMessages",
          "context": "lassName=\"h-4 w-4 mr-2\" /> Error </Button> </TooltipTrigger> <Toolti"
        },
        {
          "text": "Enter your name",
          "type": "placeholders",
          "context": "e</Label> <Input id=\"name\" placeholder=\"Enter your name\" /> </div> <div className=\"sp"
        },
        {
          "text": "Enter your email",
          "type": "placeholders",
          "context": "<Input id=\"email\" type=\"email\" placeholder=\"Enter your email\" /> </div> </div>"
        },
        {
          "text": "Enter title",
          "type": "placeholders",
          "context": "</Label> <Input id=\"title\" placeholder=\"Enter title\" /> </div> <div className=\"space-"
        },
        {
          "text": "Enter description",
          "type": "placeholders",
          "context": "<Textarea id=\"description\" placeholder=\"Enter description\" /> </div> </div>"
        },
        {
          "text": "Enter name",
          "type": "placeholders",
          "context": "el> <Input id=\"quick-name\" placeholder=\"Enter name\" /> </div> <Button variant=\"gradie"
        },
        {
          "text": "Enter your name",
          "type": "placeholders",
          "context": "el> <Input id=\"sheet-name\" placeholder=\"Enter your name\" /> </div> <div className=\"sp"
        },
        {
          "text": "Enter your email",
          "type": "placeholders",
          "context": "<Input id=\"sheet-email\" type=\"email\" placeholder=\"Enter your email\" /> </div> <Button variant=\""
        },
        {
          "text": "Enter your full name",
          "type": "placeholders",
          "context": "<Input id=\"profile-name\" placeholder=\"Enter your full name\" /> </div> <div"
        },
        {
          "text": "Enter your email",
          "type": "placeholders",
          "context": "<Input id=\"profile-email\" type=\"email\" placeholder=\"Enter your email\" /> </div> <div clas"
        },
        {
          "text": "Tell us about yourself",
          "type": "placeholders",
          "context": "<Textarea id=\"profile-bio\" placeholder=\"Tell us about yourself\" /> </div> </div"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 41,
        "inputs": 8,
        "labels": 10,
        "alerts": 11,
        "modals": 24,
        "tables": 0,
        "cards": 35
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 21 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "Login",
      "path": "/app/src/pages/Login.tsx",
      "relativePath": "pages/Login.tsx",
      "category": "page",
      "type": "form",
      "translationKeys": [
        "app.title",
        "auth.login"
      ],
      "hardcodedStrings": [
        {
          "text": "{showPassword ? (",
          "type": "buttonText",
          "context": "})} /> <Button type=\"button\" variant=\"ghost\""
        },
        {
          "text": "{isLoggingIn ? (",
          "type": "buttonText",
          "context": "{/* Enhanced Submit Button */} <Button type=\"submit\" disabled={isLoggingIn || !isValid}"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "\"text-sm font-medium\", errors.username && \"text-red-600\" )}> {language === 'en' ? 'User"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "\"transition-colors\", errors.username && \"border-red-500 focus:border-red-500 focus:ring-red-500\", di"
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "})} /> {errors.username && ( <p className=\"text-sm text-red-600 flex items-center gap-1\">"
        },
        {
          "text": "space-y-2",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.username.message} </p> )} </div>"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "\"text-sm font-medium\", errors.password && \"text-red-600\" )}> {language === 'en' ? 'Pass"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "\"transition-colors pr-10\", errors.password && \"border-red-500 focus:border-red-500 focus:ring-red-500\","
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "Button> </div> {errors.password && ( <p className=\"text-sm text-red-600 flex items-center gap-1\">"
        },
        {
          "text": "flex items-center space-x-2",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.password.message} </p> )} </div>"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 3,
        "inputs": 2,
        "labels": 3,
        "alerts": 5,
        "modals": 0,
        "tables": 0,
        "cards": 5
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "LoadingFeedbackDemo",
      "path": "/app/src/pages/LoadingFeedbackDemo.tsx",
      "relativePath": "pages/LoadingFeedbackDemo.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "success",
        "error",
        "warning",
        "info"
      ],
      "hardcodedStrings": [
        {
          "text": "message=",
          "type": "errorMessages",
          "context": "<Alert type=\"error\" message=\"There was an error processing your request.\""
        },
        {
          "text": "variant=",
          "type": "errorMessages",
          "context": "error\" message=\"There was an error processing your request.\" variant=\"gradient\" />"
        },
        {
          "text": "label=",
          "type": "errorMessages",
          "context": "/> <StatusIndicator status=\"error\" label=\"Failed\" variant=\"gradient\" /> <StatusIndicator status=\"warning\" l"
        },
        {
          "text": "message=",
          "type": "errorMessages",
          "context": "<InlineAlert type=\"error\" message=\"Please enter a valid email address\" size=\""
        },
        {
          "text": ")} variant=",
          "type": "errorMessages",
          "context": "<Button onClick={() => showToast('error')} variant=\"outline\" className=\"w-full\"> Show Error Toast"
        },
        {
          "text": ")} className=",
          "type": "errorMessages",
          "context": "<Button onClick={() => showActionFeedback('error')} className=\"w-full\"> Show Error Feedback </Button>"
        },
        {
          "text": "Enter your email",
          "type": "placeholders",
          "context": "px-3 py-2 border rounded-md\" placeholder=\"Enter your email\" /> <InlineAlert"
        },
        {
          "text": "Enter your password",
          "type": "placeholders",
          "context": "px-3 py-2 border rounded-md\" placeholder=\"Enter your password\" /> <InlineAlert"
        },
        {
          "text": "Success!",
          "type": "titles",
          "context": "type=\"success\" title=\"Success!\" message=\"Your changes have been saved successfully.\""
        },
        {
          "text": "File Upload Progress",
          "type": "titles",
          "context": "rt */} <ProgressAlert title=\"File Upload Progress\" currentStep={3} totalSteps={5}"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 15,
        "inputs": 0,
        "labels": 0,
        "alerts": 4,
        "modals": 0,
        "tables": 0,
        "cards": 68
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 10 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "Invoices",
      "path": "/app/src/pages/Invoices.tsx",
      "relativePath": "pages/Invoices.tsx",
      "category": "page",
      "type": "modal",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Request Feature",
          "type": "buttonText",
          "context": "\"flex items-center gap-2\"> <Button variant=\"outline\" size=\"sm\""
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 12,
        "tables": 0,
        "cards": 24
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "InventoryModern",
      "path": "/app/src/pages/InventoryModern.tsx",
      "relativePath": "pages/InventoryModern.tsx",
      "category": "page",
      "type": "table",
      "translationKeys": [
        "inventory.out_of_stock_label",
        "inventory.low_stock_label",
        "inventory.in_stock_label",
        "inventory.item",
        "inventory.category",
        "inventory.uncategorized",
        "inventory.weight",
        "inventory.purchase_price",
        "inventory.sell_price",
        "inventory.stock",
        "inventory.status",
        "inventory.view",
        "inventory.edit",
        "inventory.delete",
        "inventory.purchase",
        "inventory.sell",
        "inventory.stock_label",
        "inventory.failed_to_load",
        "inventory.management_title",
        "inventory.management_description",
        "inventory.filters",
        "inventory.active",
        "inventory.add_item",
        "inventory.inventory_items",
        "inventory.categories",
        "inventory.search_placeholder",
        "inventory.loading",
        "inventory.no_items_found",
        "inventory.add_first_message",
        "inventory.add_first_item"
      ],
      "hardcodedStrings": [
        {
          "text": "setShowForm(true)} className=\"flex items-center gap-2\">",
          "type": "buttonText",
          "context": "> )} </Button> <Button variant=\"gradient-green\" onClick={() => setShowForm(true)} className=\"flex items-center gap-"
        },
        {
          "text": "setShowForm(true)} className=\"mt-4\">",
          "type": "buttonText",
          "context": "</div> <Button onClick={() => setShowForm(true)} className=\"mt-4\"> <Plus classNa"
        },
        {
          "text": "Failed to delete item:",
          "type": "errorMessages",
          "context": "utation.mutateAsync(item.id); } catch (error) { console.error('Failed to delete item:', error); } }"
        },
        {
          "text": "Selected item:",
          "type": "errorMessages",
          "context": "console.error('Failed to delete item:', error); } } }, }, ]; const handleFormClose = () => { se"
        },
        {
          "text": "Failed to delete item:",
          "type": "errorMessages",
          "context": "c(item.id); } catch (error) { console.error('Failed to delete item:', error);"
        },
        {
          "text": "container mx-auto p-6",
          "type": "errorMessages",
          "context": "</AnimatePresence> </div> ); if (error) { return ( <div className=\"container mx-auto p-6\"> <Card> <Ca"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 7,
        "inputs": 1,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 1,
        "cards": 15
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "Inventory",
      "path": "/app/src/pages/Inventory.tsx",
      "relativePath": "pages/Inventory.tsx",
      "category": "page",
      "type": "table",
      "translationKeys": [
        "inventory.out_of_stock_label",
        "inventory.low_stock_label",
        "inventory.in_stock_label",
        "inventory.item",
        "inventory.category",
        "inventory.uncategorized",
        "inventory.weight",
        "inventory.purchase_price",
        "inventory.sell_price",
        "inventory.stock",
        "inventory.status",
        "inventory.view",
        "inventory.edit",
        "inventory.delete",
        "inventory.purchase",
        "inventory.sell",
        "inventory.stock_label",
        "inventory.failed_to_load",
        "inventory.management_title",
        "inventory.management_description",
        "inventory.filters",
        "inventory.active",
        "inventory.add_item",
        "inventory.inventory_items",
        "inventory.categories",
        "inventory.search_placeholder",
        "inventory.loading",
        "inventory.no_items_found",
        "inventory.add_first_message",
        "inventory.add_first_item",
        "inventory.product_management",
        "inventory.manage_products",
        "inventory.category_management",
        "inventory.organize_categories",
        "inventory.bulk_operations",
        "inventory.perform_bulk",
        "inventory.image_management",
        "inventory.manage_images"
      ],
      "hardcodedStrings": [
        {
          "text": "setShowForm(true)} className=\"flex items-center gap-2\">",
          "type": "buttonText",
          "context": "> )} </Button> <Button variant=\"gradient-green\" onClick={() => setShowForm(true)} className=\"flex items-center gap-"
        },
        {
          "text": "setShowForm(true)} className=\"mt-4\">",
          "type": "buttonText",
          "context": "</div> <Button variant=\"gradient-green\" onClick={() => setShowForm(true)} className=\"mt-4\">"
        },
        {
          "text": "Failed to delete item:",
          "type": "errorMessages",
          "context": "utation.mutateAsync(item.id); } catch (error) { console.error('Failed to delete item:', error); } }"
        },
        {
          "text": "Selected item:",
          "type": "errorMessages",
          "context": "console.error('Failed to delete item:', error); } } }, }, ]; const handleFormClose = () => { se"
        },
        {
          "text": "Failed to delete item:",
          "type": "errorMessages",
          "context": "c(item.id); } catch (error) { console.error('Failed to delete item:', error);"
        },
        {
          "text": "container mx-auto p-6",
          "type": "errorMessages",
          "context": "</AnimatePresence> </div> ); if (error) { return ( <div className=\"container mx-auto p-6\"> <Card variant=\"profes"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 7,
        "inputs": 1,
        "labels": 0,
        "alerts": 3,
        "modals": 0,
        "tables": 1,
        "cards": 23
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 6 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "ImageManagement",
      "path": "/app/src/pages/ImageManagement.tsx",
      "relativePath": "pages/ImageManagement.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Upload error:",
          "type": "errorMessages",
          "context": "omplete={handleUploadComplete} onUploadError={(error) => { console.error('Upload error:', error); setShowUpload(f"
        },
        {
          "text": "Select type",
          "type": "placeholders",
          "context": "ame=\"w-40\"> <SelectValue placeholder=\"Select type\" /> </SelectTrigger> <SelectC"
        },
        {
          "text": "Select entity",
          "type": "placeholders",
          "context": "e=\"w-60\"> <SelectValue placeholder=\"Select entity\" /> </SelectTrigger> <S"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 2,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 37
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 3 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "GradientComponentsDemo",
      "path": "/app/src/pages/GradientComponentsDemo.tsx",
      "relativePath": "pages/GradientComponentsDemo.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Green Gradient",
          "type": "buttonText",
          "context": "Name=\"flex flex-wrap gap-3\"> <Button variant=\"gradient-green\">Green Gradient</Button> <Button variant=\"gradi"
        },
        {
          "text": "Teal Gradient",
          "type": "buttonText",
          "context": "een\">Green Gradient</Button> <Button variant=\"gradient-teal\">Teal Gradient</Button> <Button variant=\"gradien"
        },
        {
          "text": "Blue Gradient",
          "type": "buttonText",
          "context": "teal\">Teal Gradient</Button> <Button variant=\"gradient-blue\">Blue Gradient</Button> <Button variant=\"gradien"
        },
        {
          "text": "Purple Gradient",
          "type": "buttonText",
          "context": "blue\">Blue Gradient</Button> <Button variant=\"gradient-purple\">Purple Gradient</Button> <Button variant=\"gra"
        },
        {
          "text": "Pink Gradient",
          "type": "buttonText",
          "context": "le\">Purple Gradient</Button> <Button variant=\"gradient-pink\">Pink Gradient</Button> <Button variant=\"gradien"
        },
        {
          "text": "Orange Gradient",
          "type": "buttonText",
          "context": "pink\">Pink Gradient</Button> <Button variant=\"gradient-orange\">Orange Gradient</Button> </div>"
        },
        {
          "text": "Green Outline",
          "type": "buttonText",
          "context": "Name=\"flex flex-wrap gap-3\"> <Button variant=\"outline-gradient-green\">Green Outline</Button> <Button variant"
        },
        {
          "text": "Blue Outline",
          "type": "buttonText",
          "context": "reen\">Green Outline</Button> <Button variant=\"outline-gradient-blue\">Blue Outline</Button> <Button variant=\""
        },
        {
          "text": "Purple Outline",
          "type": "buttonText",
          "context": "-blue\">Blue Outline</Button> <Button variant=\"outline-gradient-purple\">Purple Outline</Button> </div>"
        },
        {
          "text": "Send Message",
          "type": "buttonText",
          "context": "className=\"flex gap-2\"> <Button variant=\"gradient-purple\" className=\"flex-1\">Send Message</Button>"
        },
        {
          "text": "Green focus input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-green\" placeholder=\"Green focus input\" /> <Input variant=\"gradient-teal\" placeholder=\""
        },
        {
          "text": "Teal focus input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-teal\" placeholder=\"Teal focus input\" /> <Input variant=\"gradient-blue\" placeholder=\"B"
        },
        {
          "text": "Blue focus input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-blue\" placeholder=\"Blue focus input\" /> <Input variant=\"gradient-purple\" placeholder="
        },
        {
          "text": "Purple focus input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-purple\" placeholder=\"Purple focus input\" /> </div> </div>"
        },
        {
          "text": "Your name",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-purple\" placeholder=\"Your name\" /> <Input variant=\"gradient-purple\" placeholder=\"Emai"
        },
        {
          "text": "Email address",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-purple\" placeholder=\"Email address\" type=\"email\" /> <Input variant=\"gradient-purple\""
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 17,
        "inputs": 9,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 51
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 16 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "FormComponentsDemo",
      "path": "/app/src/pages/FormComponentsDemo.tsx",
      "relativePath": "pages/FormComponentsDemo.tsx",
      "category": "page",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "Submit Form",
          "type": "buttonText",
          "context": "ame=\"flex space-x-4 pt-4\"> <Button type=\"submit\" variant=\"gradient-green\" disabled={loading}> Submit F"
        },
        {
          "text": "space-y-8",
          "type": "errorMessages",
          "context": "<CardDescription>Components with error, success, and warning states</CardDescription> </CardHeader> <Ca"
        },
        {
          "text": "label=",
          "type": "errorMessages",
          "context": "<FormField variant=\"error\" label=\"Error Field\" error=\"This field is required\"> <Input error=\"This f"
        },
        {
          "text": "error=",
          "type": "errorMessages",
          "context": "<FormField variant=\"error\" label=\"Error Field\" error=\"This field is required\"> <Input error=\"This field is requir"
        },
        {
          "text": "This field is required",
          "type": "errorMessages",
          "context": "s field is required\"> <Input error=\"This field is required\" placeholder=\"Invalid input\" /> </FormField>"
        },
        {
          "text": "Password with toggle",
          "type": "placeholders",
          "context": "showPasswordToggle placeholder=\"Password with toggle\" /> <Input"
        },
        {
          "text": "Floating input",
          "type": "placeholders",
          "context": "label=\"Floating Label\" placeholder=\"Floating input\" /> </div> <div c"
        },
        {
          "text": "Small input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-purple\" size=\"sm\" placeholder=\"Small input\" /> <Input variant=\"gradient-purple\" size=\"default\" plac"
        },
        {
          "text": "Default input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-purple\" size=\"default\" placeholder=\"Default input\" /> <Input variant=\"gradient-purple\" size=\"lg\" placeho"
        },
        {
          "text": "Large input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-purple\" size=\"lg\" placeholder=\"Large input\" /> </div> </CardContent> </Ca"
        },
        {
          "text": "Textarea with character count",
          "type": "placeholders",
          "context": "maxLength={200} placeholder=\"Textarea with character count\" /> <Textarea"
        },
        {
          "text": "Auto-resizing textarea",
          "type": "placeholders",
          "context": "autoResize placeholder=\"Auto-resizing textarea\" /> </div> </"
        },
        {
          "text": "Valid input",
          "type": "placeholders",
          "context": "<Input variant=\"gradient-green\" placeholder=\"Valid input\" /> </FormField>"
        },
        {
          "text": "Invalid input",
          "type": "placeholders",
          "context": "<Input error=\"This field is required\" placeholder=\"Invalid input\" /> </FormField>"
        },
        {
          "text": "Warning input",
          "type": "placeholders",
          "context": "<Input warning=\"Please check this field\" placeholder=\"Warning input\" /> </FormField> </div>"
        },
        {
          "text": "Select an option",
          "type": "placeholders",
          "context": "ient-blue\"> <SelectValue placeholder=\"Select an option\" /> </SelectTrigger> <Se"
        },
        {
          "text": "Enter description",
          "type": "placeholders",
          "context": "<Textarea variant=\"gradient-purple\" placeholder=\"Enter description\" /> </FormField> </div>"
        },
        {
          "text": "Enter your full name",
          "type": "placeholders",
          "context": "riant=\"gradient-green\" placeholder=\"Enter your full name\" value={formData.name}"
        },
        {
          "text": "Enter your email",
          "type": "placeholders",
          "context": "type=\"email\" placeholder=\"Enter your email\" value={formData.email}"
        },
        {
          "text": "Select a category",
          "type": "placeholders",
          "context": "-purple\"> <SelectValue placeholder=\"Select a category\" /> </SelectTrigger>"
        },
        {
          "text": "Enter your message",
          "type": "placeholders",
          "context": "variant=\"gradient-pink\" placeholder=\"Enter your message\" showCharCount max"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 2,
        "inputs": 14,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 45
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 21 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ForgotPassword",
      "path": "/app/src/pages/ForgotPassword.tsx",
      "relativePath": "pages/ForgotPassword.tsx",
      "category": "page",
      "type": "form",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "{isSubmitting ? (",
          "type": "buttonText",
          "context": "{/* Enhanced Submit Button */} <Button type=\"submit\" disabled={isSubmitting || !isValid}"
        },
        {
          "text": "text-red-600",
          "type": "errorMessages",
          "context": "dium flex items-center gap-2\", errors.email && \"text-red-600\" )}> <Mail className=\"h-4 w-4\" />"
        },
        {
          "text": "border-red-500 focus:border-red-500 focus:ring-red-500",
          "type": "errorMessages",
          "context": "tion-colors h-12 text-base\", errors.email && \"border-red-500 focus:border-red-500 focus:ring-red-500\", direc"
        },
        {
          "text": "text-sm text-red-600 flex items-center gap-1",
          "type": "errorMessages",
          "context": "})} /> {errors.email && ( <p className=\"text-sm text-red-600 flex items-center gap-1\">"
        },
        {
          "text": "text-xs text-slate-500",
          "type": "errorMessages",
          "context": "rcle className=\"h-4 w-4\" /> {errors.email.message} </p> )} <p className=\"tex"
        }
      ],
      "uiElements": {
        "forms": 1,
        "buttons": 5,
        "inputs": 1,
        "labels": 1,
        "alerts": 4,
        "modals": 0,
        "tables": 0,
        "cards": 7
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 5 hardcoded strings with translation keys"
        },
        {
          "type": "button",
          "priority": "medium",
          "message": "Button text should be translatable for international users"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "ForecastingAnalytics",
      "path": "/app/src/pages/ForecastingAnalytics.tsx",
      "relativePath": "pages/ForecastingAnalytics.tsx",
      "category": "page",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "DataDisplayDemo",
      "path": "/app/src/pages/DataDisplayDemo.tsx",
      "relativePath": "pages/DataDisplayDemo.tsx",
      "category": "page",
      "type": "table",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 43,
        "cards": 30
      },
      "recommendations": []
    },
    {
      "name": "Dashboard",
      "path": "/app/src/pages/Dashboard.tsx",
      "relativePath": "pages/Dashboard.tsx",
      "category": "page",
      "type": "utility",
      "translationKeys": [
        "dashboard.error_loading",
        "common.try_again",
        "nav.dashboard",
        "dashboard.welcome_message",
        "common.refresh"
      ],
      "hardcodedStrings": [
        {
          "text": "flex flex-col items-center justify-center min-h-[500px] space-y-6 p-8 bg-gradient-to-br from-green-50/30 via-white to-teal-50/20 rounded-2xl",
          "type": "errorMessages",
          "context": "sh = () => { refreshAll(); }; if (hasError) { return ( <div className=\"flex flex-col items-center justify-center min-h-[500px"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 1,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 1 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        }
      ]
    },
    {
      "name": "Customers",
      "path": "/app/src/pages/Customers.tsx",
      "relativePath": "pages/Customers.tsx",
      "category": "page",
      "type": "utility",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "CacheManagement",
      "path": "/app/src/pages/CacheManagement.tsx",
      "relativePath": "pages/CacheManagement.tsx",
      "category": "page",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    },
    {
      "name": "BusinessAdaptability",
      "path": "/app/src/pages/BusinessAdaptability.tsx",
      "relativePath": "pages/BusinessAdaptability.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [],
      "hardcodedStrings": [
        {
          "text": "container mx-auto px-4 py-8",
          "type": "errorMessages",
          "context": "</div> </div> ); } if (error) { return ( <div className=\"container mx-auto px-4 py-8\"> <Alert classNam"
        },
        {
          "text": "container mx-auto px-4 py-8",
          "type": "errorMessages",
          "context": "escription className=\"text-red-800\"> Error loading business adaptability settings: {error.message} </AlertDescription>"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 2,
        "inputs": 0,
        "labels": 0,
        "alerts": 4,
        "modals": 0,
        "tables": 0,
        "cards": 6
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 2 hardcoded strings with translation keys"
        },
        {
          "type": "error",
          "priority": "high",
          "message": "Error messages must be translated for user understanding"
        },
        {
          "type": "coverage",
          "priority": "high",
          "message": "Component has no translation keys but contains user-facing text"
        }
      ]
    },
    {
      "name": "AdvancedSearch",
      "path": "/app/src/pages/AdvancedSearch.tsx",
      "relativePath": "pages/AdvancedSearch.tsx",
      "category": "page",
      "type": "modal",
      "translationKeys": [
        "q",
        "date_from",
        "date_to",
        "min_price",
        "max_price",
        "has_debt",
        "T",
        "search.shareTitle",
        "search.pageTitle",
        "search.pageDescription",
        "search.history",
        "search.noHistory",
        "search.results",
        "search.useQuery",
        "search.clearHistory",
        "search.export",
        "search.share",
        "search.settings",
        "search.settingsDescription"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 6,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 10,
        "tables": 0,
        "cards": 2
      },
      "recommendations": []
    },
    {
      "name": "AdvancedCharts",
      "path": "/app/src/pages/AdvancedCharts.tsx",
      "relativePath": "pages/AdvancedCharts.tsx",
      "category": "page",
      "type": "chart",
      "translationKeys": [
        "reports.advanced_charts",
        "reports.interactive_data_visualizations",
        "reports.real_time",
        "reports.configure",
        "reports.export_all",
        "reports.share",
        "reports.interactive",
        "reports.interactive_desc",
        "reports.trend_analysis_title",
        "reports.trend_analysis_chart_desc",
        "reports.heatmaps",
        "reports.heatmaps_desc",
        "reports.export_share_charts",
        "reports.export_share_charts_desc"
      ],
      "hardcodedStrings": [
        {
          "text": "Monthly Sales",
          "type": "titles",
          "context": "type=\"line\" title=\"Monthly Sales\" height={300} />"
        },
        {
          "text": "Monthly Profit",
          "type": "titles",
          "context": "type=\"bar\" title=\"Monthly Profit\" height={300} />"
        },
        {
          "text": "Sales Trend with Forecast",
          "type": "titles",
          "context": "data={trendData} title=\"Sales Trend with Forecast\" height={400} />"
        },
        {
          "text": "Sales Activity by Time",
          "type": "titles",
          "context": "data={heatmapData} title=\"Sales Activity by Time\" height={400} xAxisLabel"
        }
      ],
      "uiElements": {
        "forms": 0,
        "buttons": 3,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 42
      },
      "recommendations": [
        {
          "type": "translation",
          "priority": "high",
          "message": "Replace 4 hardcoded strings with translation keys"
        }
      ]
    },
    {
      "name": "Accounting",
      "path": "/app/src/pages/Accounting.tsx",
      "relativePath": "pages/Accounting.tsx",
      "category": "page",
      "type": "card",
      "translationKeys": [
        "accounting.income",
        "accounting.income_desc",
        "accounting.expense",
        "accounting.cash_bank",
        "accounting.gold_weight",
        "accounting.profit_loss",
        "accounting.debt_tracking",
        "accounting.title",
        "accounting.description",
        "accounting.total_income",
        "accounting.total_expenses",
        "accounting.cash_flow",
        "accounting.customer_debt",
        "accounting.net_profit",
        "accounting.income_title",
        "accounting.expense_ledger",
        "accounting.expense_desc"
      ],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 16,
        "inputs": 0,
        "labels": 0,
        "alerts": 2,
        "modals": 0,
        "tables": 0,
        "cards": 26
      },
      "recommendations": []
    },
    {
      "name": "InventoryProducts",
      "path": "/app/src/pages/inventory/InventoryProducts.tsx",
      "relativePath": "pages/inventory/InventoryProducts.tsx",
      "category": "page",
      "type": "component",
      "translationKeys": [],
      "hardcodedStrings": [],
      "uiElements": {
        "forms": 0,
        "buttons": 0,
        "inputs": 0,
        "labels": 0,
        "alerts": 0,
        "modals": 0,
        "tables": 0,
        "cards": 0
      },
      "recommendations": []
    }
  ],
  "summary": {
    "byCategory": {
      "other": 62,
      "ui-component": 44,
      "settings": 6,
      "reports": 14,
      "layout": 5,
      "invoices": 7,
      "inventory": 23,
      "customers": 5,
      "auth": 3,
      "analytics": 31,
      "dashboard": 5,
      "page": 29
    },
    "byType": {
      "interactive": 27,
      "form": 30,
      "table": 23,
      "card": 76,
      "modal": 20,
      "utility": 45,
      "component": 7,
      "chart": 6
    },
    "translationCoverage": 50.757228086278104,
    "mostProblematic": [
      {
        "name": "ComprehensiveCustomerForm",
        "path": "components/customers/ComprehensiveCustomerForm.tsx",
        "hardcodedCount": 59,
        "translationKeys": 0
      },
      {
        "name": "CheckManager",
        "path": "components/accounting/CheckManager.tsx",
        "hardcodedCount": 40,
        "translationKeys": 1
      },
      {
        "name": "InvoiceForm",
        "path": "components/invoices/InvoiceForm.tsx",
        "hardcodedCount": 30,
        "translationKeys": 1
      },
      {
        "name": "CustomFieldConfiguration",
        "path": "components/business-adaptability/CustomFieldConfiguration.tsx",
        "hardcodedCount": 28,
        "translationKeys": 1
      },
      {
        "name": "Register",
        "path": "pages/Register.tsx",
        "hardcodedCount": 28,
        "translationKeys": 0
      },
      {
        "name": "UserManagement",
        "path": "components/settings/UserManagement.tsx",
        "hardcodedCount": 26,
        "translationKeys": 31
      },
      {
        "name": "ProductManagement",
        "path": "components/inventory/ProductManagement.tsx",
        "hardcodedCount": 26,
        "translationKeys": 0
      },
      {
        "name": "JournalEntryManager",
        "path": "components/accounting/JournalEntryManager.tsx",
        "hardcodedCount": 25,
        "translationKeys": 2
      },
      {
        "name": "InvoiceTemplateDesigner",
        "path": "components/settings/InvoiceTemplateDesigner.tsx",
        "hardcodedCount": 24,
        "translationKeys": 0
      },
      {
        "name": "InventoryItemForm",
        "path": "components/inventory/InventoryItemForm.tsx",
        "hardcodedCount": 24,
        "translationKeys": 0
      }
    ]
  }
}