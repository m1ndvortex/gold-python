{
  "totalFrontendApiFiles": 44,
  "totalEndpoints": 302,
  "totalTranslatableStrings": 0,
  "apiUsage": [
    {
      "file": "hooks/useUniversalInventory.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "hooks/useSystemAdmin.ts",
      "apiCalls": [
        {
          "endpoint": "],\r\n    queryFn: systemAdminApi.getSSLCertificateStatus,\r\n    refetchInterval: 3600000, // Refresh every hour\r\n    staleTime: 1800000, // 30 minutes\r\n  });\r\n};\r\n\r\nexport const useSSLCertificateRenewal = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: systemAdminApi.renewSSLCertificate,\r\n    onSuccess: (data) => {\r\n      toast.success(",
          "context": "ateStatus = () => { return useQuery({ queryKey: ['sslCertificateStatus'], queryFn: systemAdminApi"
        },
        {
          "endpoint": "],\r\n    queryFn: systemAdminApi.getSecurityStatus,\r\n    refetchInterval: 300000, // Refresh every 5 minutes\r\n    staleTime: 120000, // 2 minutes\r\n  });\r\n};\r\n\r\nexport const useSecurityScan = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: systemAdminApi.runSecurityScan,\r\n    onSuccess: (data) => {\r\n      toast.success(",
          "context": "ityStatus = () => { return useQuery({ queryKey: ['securityStatus'], queryFn: systemAdminApi.getSe"
        }
      ],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Service management failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Log export failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Database health check failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Database optimization failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Cache clear failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Backup creation failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Restore failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Backup deletion failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Environment variable update failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Feature flag update failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Session termination failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`User sessions termination failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Alert acknowledgment failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Alert resolution failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`SSL certificate renewal failed: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Security scan failed: ${error.message}",
          "hasTranslation": false
        }
      ],
      "translationUsage": [
        {
          "key": "a",
          "context": "onst a = document.createElement('a'); a.href = url; a.download = `system-logs.${variables.format"
        }
      ],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "16 error handlers need translation support"
        }
      ]
    },
    {
      "file": "hooks/useSettings.ts",
      "apiCalls": [
        {
          "endpoint": "],\r\n    queryFn: settingsApi.getCompanySettings,\r\n  });\r\n};\r\n\r\nexport const useUpdateCompanySettings = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (settings: CompanySettingsUpdate) => settingsApi.updateCompanySettings(settings),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
          "context": "ySettings = () => { return useQuery({ queryKey: ['company-settings'], queryFn: settingsApi.getCom"
        },
        {
          "endpoint": "],\r\n    queryFn: settingsApi.getGoldPriceConfig,\r\n  });\r\n};\r\n\r\nexport const useUpdateGoldPrice = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (priceUpdate: GoldPriceUpdate) => settingsApi.updateGoldPrice(priceUpdate),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
          "context": "iceConfig = () => { return useQuery({ queryKey: ['gold-price-config'], queryFn: settingsApi.getGo"
        },
        {
          "endpoint": "],\r\n    queryFn: settingsApi.getInvoiceTemplate,\r\n  });\r\n};\r\n\r\nexport const useUpdateInvoiceTemplate = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (templateUpdate: InvoiceTemplateUpdate) => settingsApi.updateInvoiceTemplate(templateUpdate),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
          "context": "eTemplate = () => { return useQuery({ queryKey: ['invoice-template'], queryFn: settingsApi.getInv"
        },
        {
          "endpoint": "],\r\n    queryFn: settingsApi.getAllRoles,\r\n  });\r\n};\r\n\r\nexport const useCreateRole = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (roleData: RoleCreate) => settingsApi.createRole(roleData),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
          "context": "useRoles = () => { return useQuery({ queryKey: ['roles'], queryFn: settingsApi.getAllRoles, }"
        },
        {
          "endpoint": "],\r\n    queryFn: settingsApi.getPermissionStructure,\r\n  });\r\n};\r\n\r\n// User Management Hooks\r\nexport const useUsers = (page: number = 1, perPage: number = 50) => {\r\n  return useQuery({\r\n    queryKey: [",
          "context": "Structure = () => { return useQuery({ queryKey: ['permission-structure'], queryFn: settingsApi.ge"
        },
        {
          "endpoint": "system-settings",
          "context": "mSettings = () => { return useQuery({ queryKey: ['system-settings'], queryFn: settingsApi.getSyst"
        }
      ],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to update company settings',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to update gold price',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to update invoice template',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to create role',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to update role',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to delete role',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to create user',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to update user',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to update password',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to delete user',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.response?.data?.detail || 'Failed to assign role',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "hooks/useSMS.ts",
      "apiCalls": [
        {
          "endpoint": ", params],\r\n    queryFn: () => smsApi.templates.getTemplates(params),\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n};\r\n\r\nexport const useSMSTemplate = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
          "context": "y?: boolean }) => { return useQuery({ queryKey: ['sms-templates', params], queryFn: () => smsApi."
        },
        {
          "endpoint": ", params],\r\n    () => smsApi.campaigns.getCampaigns(params),\r\n    {\r\n      staleTime: 3 * 60 * 1000, // 3 minutes - increased cache time\r\n      cacheTime: 5 * 60 * 1000, // 5 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useSMSCampaign = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
          "context": "us?: string }) => { return useQuery( ['sms-campaigns', params], () => smsApi.campaigns.getCampaig"
        },
        {
          "endpoint": ", id],\r\n    queryFn: () => smsApi.campaigns.getCampaignStats(id),\r\n    enabled: !!id,\r\n    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\r\n  });\r\n};\r\n\r\n// SMS Batch Operations Hooks\r\nexport const useSendBatchSMS = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (batch: SMSBatchRequest) => smsApi.batch.sendBatch(batch),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
          "context": "= (id: string) => { return useQuery({ queryKey: ['sms-campaign-stats', id], queryFn: () => smsApi"
        },
        {
          "endpoint": ", filters],\r\n    () => smsApi.history.getHistory(filters),\r\n    {\r\n      staleTime: 2 * 60 * 1000, // 2 minutes - increased cache time\r\n      cacheTime: 5 * 60 * 1000, // 5 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useSMSOverallStats = () => {\r\n  return useQuery(\r\n    [",
          "context": "istoryFilters) => { return useQuery( ['sms-history', filters], () => smsApi.history.getHistory(fi"
        },
        {
          "endpoint": ", params],\r\n    queryFn: () => smsApi.history.getMessages(params),\r\n    staleTime: 1 * 60 * 1000, // 1 minute\r\n  });\r\n};\r\n\r\nexport const useSMSMessage = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
          "context": "?: number; }) => { return useQuery({ queryKey: ['sms-messages', params], queryFn: () => smsApi.h"
        }
      ],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to create SMS template\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to update SMS template\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to delete SMS template\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to preview SMS template\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to create SMS campaign\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to send SMS campaign\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to retry SMS campaign\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to send batch SMS\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.response?.data?.detail || \"Failed to retry SMS messages\",\r\n        variant: \"destructive\",\r\n      }",
          "hasTranslation": true
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "hooks/useReports.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "a",
          "context": "t link = document.createElement('a'); link.href = url; link.download = `${variables.reportType}-"
        },
        {
          "key": "a",
          "context": "t link = document.createElement('a'); link.href = url; link.download = `${variables.reportType}-"
        }
      ],
      "recommendations": []
    },
    {
      "file": "hooks/useQRCards.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Card Creation Failed',\r\n        description: error.response?.data?.detail || 'Failed to create QR card',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Update Failed',\r\n        description: error.response?.data?.detail || 'Failed to update QR card',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Deletion Failed',\r\n        description: error.response?.data?.detail || 'Failed to delete QR card',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Regeneration Failed',\r\n        description: error.response?.data?.detail || 'Failed to regenerate QR card',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Access Failed',\r\n        description: error.response?.data?.detail || 'Failed to access card',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        }
      ],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "hooks/useLanguage.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "fa-IR",
          "context": "return new Intl.NumberFormat('fa-IR').format(num); } else if (language === 'ar') { // Arabic nu"
        },
        {
          "key": "ar-SA",
          "context": "return new Intl.NumberFormat('ar-SA').format(num); } else { // English number formatting"
        },
        {
          "key": "en-US",
          "context": "return new Intl.NumberFormat('en-US').format(num); } }; const formatDate = (date: Date): strin"
        },
        {
          "key": "fa-IR",
          "context": "return new Intl.DateTimeFormat('fa-IR').format(date); } else if (language === 'ar') { // Arabic d"
        },
        {
          "key": "ar-SA",
          "context": "return new Intl.DateTimeFormat('ar-SA').format(date); } else { // English date formatting"
        },
        {
          "key": "en-US",
          "context": "return new Intl.DateTimeFormat('en-US').format(date); } }; const formatCurrency = (amount: numbe"
        }
      ],
      "recommendations": []
    },
    {
      "file": "hooks/useInvoices.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Calculation Error',\r\n        description: error.response?.data?.detail || 'Failed to calculate invoice',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Creation Failed',\r\n        description: error.response?.data?.detail || 'Failed to create invoice',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Creation Failed',\r\n        description: error.response?.data?.detail || 'Failed to create invoice',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Update Failed',\r\n        description: error.response?.data?.detail || 'Failed to update invoice',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Approval Failed',\r\n        description: error.response?.data?.detail || 'Failed to approve invoice',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Price Override Failed',\r\n        description: error.response?.data?.detail || 'Failed to override item price',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Payment Failed',\r\n        description: error.response?.data?.detail || 'Failed to record payment',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Status Update Failed',\r\n        description: error.response?.data?.detail || 'Failed to update status',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'Deletion Failed',\r\n        description: error.response?.data?.detail || 'Failed to delete invoice',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        },
        {
          "code": "onError: (error: any) => {\r\n      toast({\r\n        title: 'PDF Generation Failed',\r\n        description: error.response?.data?.detail || 'Failed to generate PDF',\r\n        variant: 'destructive',\r\n      }",
          "hasTranslation": true
        }
      ],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "hooks/useInventoryIntelligence.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Failed to create turnover analysis: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Failed to create recommendation: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Failed to update recommendation: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Failed to create demand forecast: ${error.message}",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      toast.error(`Failed to create seasonal analysis: ${error.message}",
          "hasTranslation": false
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "5 error handlers need translation support"
        }
      ]
    },
    {
      "file": "hooks/useInventory.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "hooks/useEnhancedAccounting.ts",
      "apiCalls": [
        {
          "endpoint": ", includeInactive],\r\n      queryFn: () => enhancedAccountingApi.getChartOfAccounts(includeInactive),\r\n      staleTime: 10 * 60 * 1000, // 10 minutes\r\n    });\r\n  };\r\n\r\n  const useChartOfAccount = (accountId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "ive = false) => { return useQuery({ queryKey: ['chart-of-accounts', includeInactive], query"
        },
        {
          "endpoint": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getSubsidiaryAccounts(filters),\r\n      staleTime: 10 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useSubsidiaryAccount = (subsidiaryId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "tingFilters) => { return useQuery({ queryKey: ['subsidiary-accounts', filters], queryFn: ()"
        },
        {
          "endpoint": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getJournalEntries(filters),\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n    });\r\n  };\r\n\r\n  const useJournalEntry = (entryId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "ntryFilters) => { return useQuery({ queryKey: ['journal-entries', filters], queryFn: () =>"
        },
        {
          "endpoint": ", accountId, filters],\r\n      queryFn: () => enhancedAccountingApi.getGeneralLedger(accountId, filters),\r\n      enabled: !!accountId,\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useAccountBalance = (accountId: string, asOfDate?: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "tingFilters) => { return useQuery({ queryKey: ['general-ledger', accountId, filters], query"
        },
        {
          "endpoint": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getChecks(filters),\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useCheck = (checkId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "heckFilters) => { return useQuery({ queryKey: ['checks', filters], queryFn: () => enhancedA"
        },
        {
          "endpoint": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getInstallmentAccounts(filters),\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useInstallmentAccount = (installmentId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "mentFilters) => { return useQuery({ queryKey: ['installment-accounts', filters], queryFn: ("
        },
        {
          "endpoint": ", installmentId],\r\n      queryFn: () => enhancedAccountingApi.getInstallmentPayments(installmentId),\r\n      enabled: !!installmentId,\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  // Bank Reconciliation\r\n  const useBankReconciliations = (bankAccountId?: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "tId: string) => { return useQuery({ queryKey: ['installment-payments', installmentId], quer"
        },
        {
          "endpoint": ", asOfDate],\r\n      queryFn: () => enhancedAccountingApi.getTrialBalance(asOfDate),\r\n      enabled: !!asOfDate,\r\n      staleTime: 10 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useBalanceSheet = (asOfDate: string) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "ate: string) => { return useQuery({ queryKey: ['trial-balance', asOfDate], queryFn: () => e"
        },
        {
          "endpoint": ", periodStart, periodEnd],\r\n      queryFn: () => enhancedAccountingApi.getProfitLossStatement(periodStart, periodEnd),\r\n      enabled: !!periodStart && !!periodEnd,\r\n      staleTime: 10 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  // Period Management\r\n  const useAccountingPeriods = () => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "End: string) => { return useQuery({ queryKey: ['profit-loss-statement', periodStart, periodEnd],"
        },
        {
          "endpoint": "],\r\n      queryFn: () => enhancedAccountingApi.getAccountingDashboard(),\r\n      staleTime: 2 * 60 * 1000, // 2 minutes\r\n    });\r\n  };\r\n\r\n  // Audit Trail\r\n  const useAuditTrail = (filters?: AccountingFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "shboard = () => { return useQuery({ queryKey: ['accounting-dashboard'], queryFn: () => enha"
        }
      ],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "hooks/useDashboard.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "hooks/useCustomers.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "hooks/useCategoryManagement.ts",
      "apiCalls": [
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/inventory/cat"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/inventory/cat"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/inventory/cat"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/inventory/cat"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/inventory/cat"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/inventory/cat"
        },
        {
          "endpoint": ", ",
          "context": "egoryTree = () => { return useQuery( ['categories', 'tree'], enhancedCategoriesApi.getCategoryTre"
        },
        {
          "endpoint": "],\r\n    enhancedCategoriesApi.getCategoryTemplates,\r\n    {\r\n      staleTime: 15 * 60 * 1000, // 15 minutes - increased cache time\r\n      cacheTime: 20 * 60 * 1000, // 20 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n      refetchOnMount: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useCreateCategoryTemplate = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: enhancedCategoriesApi.createCategoryTemplate,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
          "context": "Templates = () => { return useQuery( ['category-templates'], enhancedCategoriesApi.getCategoryTem"
        }
      ],
      "errorHandling": [
        {
          "code": "catch (error) {\r\n      console.error('Failed to reorder category:', error);\r\n      throw error;\r\n    }",
          "hasTranslation": false
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "1 error handlers need translation support"
        },
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "hooks/useBusinessAdaptability.ts",
      "apiCalls": [
        {
          "endpoint": "],\r\n    queryFn: () => businessAdaptabilityApi.getBusinessTypes(true)\r\n  });\r\n\r\n  // Business Configurations\r\n  const {\r\n    data: businessConfigurations = [],\r\n    isLoading: configurationsLoading,\r\n    error: configurationsError,\r\n    refetch: refetchConfigurations\r\n  } = useQuery({\r\n    queryKey: [",
          "context": ": refetchBusinessTypes } = useQuery({ queryKey: ['businessTypes'], queryFn: () => businessAdaptab"
        },
        {
          "endpoint": ", currentConfiguration?.id],\r\n    queryFn: () => currentConfiguration ? businessAdaptabilityApi.getBusinessConfiguration(currentConfiguration.id) : null,\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Business Adaptability Status\r\n  const {\r\n    data: adaptabilityStatus,\r\n    isLoading: statusLoading,\r\n    error: statusError,\r\n    refetch: refetchStatus\r\n  } = useQuery({\r\n    queryKey: [",
          "context": ": refetchConfiguration } = useQuery({ queryKey: ['businessConfiguration', currentConfiguration?.id],"
        },
        {
          "endpoint": ", currentConfiguration?.id],\r\n    queryFn: () => currentConfiguration ? businessAdaptabilityApi.getWorkflowRules(currentConfiguration.id) : [],\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Custom Fields\r\n  const {\r\n    data: customFields = [],\r\n    isLoading: customFieldsLoading,\r\n    error: customFieldsError,\r\n    refetch: refetchCustomFields\r\n  } = useQuery({\r\n    queryKey: [",
          "context": ": refetchWorkflowRules } = useQuery({ queryKey: ['workflowRules', currentConfiguration?.id], quer"
        },
        {
          "endpoint": ", currentConfiguration?.id],\r\n    queryFn: () => businessAdaptabilityApi.getUnitsOfMeasure(currentConfiguration?.id),\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Pricing Rules\r\n  const {\r\n    data: pricingRules = [],\r\n    isLoading: pricingRulesLoading,\r\n    error: pricingRulesError,\r\n    refetch: refetchPricingRules\r\n  } = useQuery({\r\n    queryKey: [",
          "context": "refetch: refetchUnits } = useQuery({ queryKey: ['unitsOfMeasure', currentConfiguration?.id], que"
        },
        {
          "endpoint": ", currentConfiguration?.id],\r\n    queryFn: () => businessAdaptabilityApi.getFeatureConfigurations(currentConfiguration?.id),\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Terminology Mapping\r\n  const {\r\n    data: terminologyMapping = {},\r\n    isLoading: terminologyLoading,\r\n    error: terminologyError,\r\n    refetch: refetchTerminology\r\n  } = useQuery({\r\n    queryKey: [",
          "context": "fetch: refetchFeatures } = useQuery({ queryKey: ['featureConfigurations', currentConfiguration?.id],"
        }
      ],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "hooks/useAuth.ts",
      "apiCalls": [
        {
          "endpoint": "/auth/me",
          "context": "const response = await api.get('/auth/me'); return response.data as User & { role?: Role };"
        },
        {
          "endpoint": "/auth/login",
          "context": "const response = await api.post('/auth/login', credentials); return response.data as AuthRespons"
        },
        {
          "endpoint": "/auth/logout",
          "context": "=> { try { await api.post('/auth/logout'); } catch (error) { console.error('Logout er"
        },
        {
          "endpoint": ", credentials);\r\n      return response.data as AuthResponse;\r\n    },\r\n    onSuccess: (data) => {\r\n      const expiryTime = Date.now() + (data.expires_in * 1000);\r\n      localStorage.setItem(",
          "context": "tion const loginMutation = useMutation({ mutationFn: async (credentials: LoginCredentials): Promise<Au"
        }
      ],
      "errorHandling": [
        {
          "code": "catch (error) {\r\n      console.error('Logout error:', error);\r\n    }",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      console.error('Login failed:', error);\r\n    }",
          "hasTranslation": false
        }
      ],
      "translationUsage": [
        {
          "key": "/auth/me",
          "context": "const response = await api.get('/auth/me'); return response.data as User & { role?: Role }; },"
        },
        {
          "key": "/auth/logout",
          "context": "try { await api.post('/auth/logout'); } catch (error) { console.error('Logout error:',"
        }
      ],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "2 error handlers need translation support"
        }
      ]
    },
    {
      "file": "hooks/useAnalytics.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "onError: (error: any) => {\r\n      console.error('Error fetching dashboard analytics:', error);\r\n      toast.error('Failed to load dashboard analytics');\r\n    }",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      console.error('Error fetching KPI targets:', error);\r\n      toast.error('Failed to load KPI targets');\r\n    }",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      console.error('Error creating KPI target:', error);\r\n      toast.error('Failed to create KPI target');\r\n    }",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      console.error('Error updating KPI target:', error);\r\n      toast.error('Failed to update KPI target');\r\n    }",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      console.error('Error fetching analytics data:', error);\r\n      toast.error('Failed to load analytics data');\r\n    }",
          "hasTranslation": false
        },
        {
          "code": "onError: (error: any) => {\r\n      console.error('Error in real-time analytics update:', error);\r\n      // Don't show toast for real-time errors to avoid spam\r\n    }",
          "hasTranslation": false
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "6 error handlers need translation support"
        }
      ]
    },
    {
      "file": "hooks/useAdvancedSearch.ts",
      "apiCalls": [
        {
          "endpoint": ", entityTypes),\r\n    queryFn: () => searchApi.getSuggestions(filters.search || ",
          "context": ": isLoadingSuggestions } = useQuery({ queryKey: searchKeys.suggestions(filters.search || '', entityTyp"
        },
        {
          "endpoint": ", ",
          "context": "isLoading, error } = useQuery({ queryKey: ['search', 'inventory', filters, page], queryFn:"
        },
        {
          "endpoint": ", ",
          "context": "data: categories = [] } = useQuery({ queryKey: ['search', 'inventory', 'categories'], queryFn: ("
        },
        {
          "endpoint": ", ",
          "context": "customAttributes = [] } = useQuery({ queryKey: ['search', 'inventory', 'attributes'], queryFn: ("
        },
        {
          "endpoint": ", ",
          "context": "isLoading, error } = useQuery({ queryKey: ['search', 'invoices', filters, page], queryFn: ("
        },
        {
          "endpoint": ", ",
          "context": "data: statuses = [] } = useQuery({ queryKey: ['search', 'invoices', 'statuses'], queryFn: () ="
        },
        {
          "endpoint": ", ",
          "context": "a: workflowStages = [] } = useQuery({ queryKey: ['search', 'invoices', 'workflow-stages'], queryF"
        },
        {
          "endpoint": ", ",
          "context": "isLoading, error } = useQuery({ queryKey: ['search', 'customers', filters, page], queryFn:"
        },
        {
          "endpoint": ", ",
          "context": "ta: customerTypes = [] } = useQuery({ queryKey: ['search', 'customers', 'types'], queryFn: () =>"
        },
        {
          "endpoint": ", ",
          "context": "data: cities = [] } = useQuery({ queryKey: ['search', 'customers', 'cities'], queryFn: () =>"
        },
        {
          "endpoint": ", ",
          "context": "isLoading, error } = useQuery({ queryKey: ['search', 'accounting', filters, page], queryFn:"
        },
        {
          "endpoint": ", ",
          "context": "data: entryTypes = [] } = useQuery({ queryKey: ['search', 'accounting', 'entry-types'], queryFn:"
        },
        {
          "endpoint": ", ",
          "context": "ata: accountTypes = [] } = useQuery({ queryKey: ['search', 'accounting', 'account-types'], queryF"
        }
      ],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "hooks/useAccounting.ts",
      "apiCalls": [
        {
          "endpoint": ", filters],\r\n      queryFn: () => accountingApi.getIncomeLedger(filters),\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n    });\r\n  };\r\n\r\n  // Expense Ledger\r\n  const useExpenseLedger = (filters?: LedgerFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "dgerFilters) => { return useQuery({ queryKey: ['income-ledger', filters], queryFn: () => ac"
        },
        {
          "endpoint": ", filters],\r\n      queryFn: () => accountingApi.getCashBankLedger(filters),\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  // Gold Weight Ledger\r\n  const useGoldWeightLedger = (filters?: LedgerFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "dgerFilters) => { return useQuery({ queryKey: ['cash-bank-ledger', filters], queryFn: () =>"
        },
        {
          "endpoint": ", startDate, endDate],\r\n      queryFn: () => accountingApi.getProfitLossAnalysis(startDate, endDate),\r\n      enabled: !!startDate && !!endDate,\r\n      staleTime: 10 * 60 * 1000, // 10 minutes\r\n    });\r\n  };\r\n\r\n  // Debt Tracking\r\n  const useDebtTracking = (filters?: LedgerFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
          "context": "ate: string) => { return useQuery({ queryKey: ['profit-loss-analysis', startDate, endDate],"
        },
        {
          "endpoint": "ledger-summary",
          "context": "dgerFilters) => { return useQuery({ queryKey: ['ledger-summary', filters], queryFn: () => a"
        }
      ],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "services/systemAdminApi.ts",
      "apiCalls": [
        {
          "endpoint": "/admin/system/health",
          "context": "{ const response = await api.get('/admin/system/health'); return response.data; }, // Servic"
        },
        {
          "endpoint": "/admin/services/status",
          "context": "{ const response = await api.get('/admin/services/status'); return response.data; }, manageS"
        },
        {
          "endpoint": "/admin/services/manage",
          "context": "Promise<void> => { await api.post('/admin/services/manage', action); }, getServiceLogs: async (se"
        },
        {
          "endpoint": "/admin/services/${serviceName}/logs",
          "context": "{ const response = await api.get(`/admin/services/${serviceName}/logs`, { params: { lines } }"
        },
        {
          "endpoint": "/admin/logs/search",
          "context": "{ const response = await api.post('/admin/logs/search', filter); return response.data; }, ex"
        },
        {
          "endpoint": "/admin/logs/export",
          "context": "{ const response = await api.post('/admin/logs/export', { ...filter, format }, { response"
        },
        {
          "endpoint": "/admin/performance/metrics",
          "context": "{ const response = await api.get('/admin/performance/metrics', { params: { timeRange } });"
        },
        {
          "endpoint": "/admin/database/status",
          "context": "{ const response = await api.get('/admin/database/status'); return response.data; }, runData"
        },
        {
          "endpoint": "/admin/database/health-check",
          "context": "{ const response = await api.post('/admin/database/health-check'); return response.data; },"
        },
        {
          "endpoint": "/admin/database/optimize",
          "context": "{ const response = await api.post('/admin/database/optimize'); return response.data; }, // R"
        },
        {
          "endpoint": "/admin/redis/status",
          "context": "{ const response = await api.get('/admin/redis/status'); return response.data; }, clearRedis"
        },
        {
          "endpoint": "/admin/redis/clear",
          "context": "{ const response = await api.post('/admin/redis/clear', { pattern }); return response.data; },"
        },
        {
          "endpoint": "/admin/redis/keys",
          "context": "{ const response = await api.get('/admin/redis/keys', { params: { pattern, limit } }); r"
        },
        {
          "endpoint": "/admin/backups/status",
          "context": "{ const response = await api.get('/admin/backups/status'); return response.data; }, createMa"
        },
        {
          "endpoint": "/admin/backups/create",
          "context": "{ const response = await api.post('/admin/backups/create', request); return response.data; },"
        },
        {
          "endpoint": "/admin/backups/restore",
          "context": "{ const response = await api.post('/admin/backups/restore', request); return response.data; },"
        },
        {
          "endpoint": "/admin/backups/${filename}",
          "context": "Promise<void> => { await api.delete(`/admin/backups/${filename}`); }, downloadBackup: async (file"
        },
        {
          "endpoint": "/admin/backups/${filename}/download",
          "context": "{ const response = await api.get(`/admin/backups/${filename}/download`, { responseType: 'blob'"
        },
        {
          "endpoint": "/admin/config",
          "context": "{ const response = await api.get('/admin/config'); return response.data; }, updateEnvironmen"
        },
        {
          "endpoint": "/admin/config/env",
          "context": "Promise<void> => { await api.put('/admin/config/env', { key, value }); }, updateFeatureFlag: asyn"
        },
        {
          "endpoint": "/admin/config/feature-flags",
          "context": "Promise<void> => { await api.put('/admin/config/feature-flags', { name, enabled, rolloutPercentage });"
        },
        {
          "endpoint": "/admin/config/settings",
          "context": "Promise<void> => { await api.put('/admin/config/settings', { key, value }); }, // User Session Ma"
        },
        {
          "endpoint": "/admin/sessions",
          "context": "{ const response = await api.get('/admin/sessions'); return response.data; }, terminateSessi"
        },
        {
          "endpoint": "/admin/sessions/${sessionId}",
          "context": "Promise<void> => { await api.delete(`/admin/sessions/${sessionId}`); }, terminateUserSessions: as"
        },
        {
          "endpoint": "/admin/sessions/user/${userId}",
          "context": "{ const response = await api.delete(`/admin/sessions/user/${userId}`); return response.data; },"
        },
        {
          "endpoint": "/admin/alerts",
          "context": "{ const response = await api.get('/admin/alerts'); return response.data; }, acknowledgeAlert"
        },
        {
          "endpoint": "/admin/alerts/${alertId}/acknowledge",
          "context": "Promise<void> => { await api.put(`/admin/alerts/${alertId}/acknowledge`); }, resolveAlert: async"
        },
        {
          "endpoint": "/admin/alerts/${alertId}/resolve",
          "context": "Promise<void> => { await api.put(`/admin/alerts/${alertId}/resolve`, { resolution }); }, createAl"
        },
        {
          "endpoint": "/admin/alerts",
          "context": "{ const response = await api.post('/admin/alerts', alert); return response.data; }, // SSL C"
        },
        {
          "endpoint": "/admin/ssl/status",
          "context": "{ const response = await api.get('/admin/ssl/status'); return response.data; }, renewSSLCert"
        },
        {
          "endpoint": "/admin/ssl/renew",
          "context": "{ const response = await api.post('/admin/ssl/renew'); return response.data; }, // Security"
        },
        {
          "endpoint": "/admin/security/status",
          "context": "{ const response = await api.get('/admin/security/status'); return response.data; }, runSecu"
        },
        {
          "endpoint": "/admin/security/scan",
          "context": "{ const response = await api.post('/admin/security/scan'); return response.data; }, // Syste"
        },
        {
          "endpoint": "/admin/system/restart",
          "context": "Promise<void> => { await api.post('/admin/system/restart'); }, updateSystem: async (): Promise<{"
        },
        {
          "endpoint": "/admin/system/update",
          "context": "{ const response = await api.post('/admin/system/update'); return response.data; }, getSyste"
        },
        {
          "endpoint": "/admin/system/info",
          "context": "{ const response = await api.get('/admin/system/info'); return response.data; } };"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/admin/system/health",
          "context": "const response = await api.get('/admin/system/health'); return response.data; }, // Service Mana"
        },
        {
          "key": "/admin/services/status",
          "context": "const response = await api.get('/admin/services/status'); return response.data; }, manageService"
        },
        {
          "key": "/admin/database/status",
          "context": "const response = await api.get('/admin/database/status'); return response.data; }, runDatabaseHe"
        },
        {
          "key": "/admin/database/health-check",
          "context": "const response = await api.post('/admin/database/health-check'); return response.data; }, optimiz"
        },
        {
          "key": "/admin/database/optimize",
          "context": "const response = await api.post('/admin/database/optimize'); return response.data; }, // Redis Ca"
        },
        {
          "key": "/admin/redis/status",
          "context": "const response = await api.get('/admin/redis/status'); return response.data; }, clearRedisCache:"
        },
        {
          "key": "/admin/backups/status",
          "context": "const response = await api.get('/admin/backups/status'); return response.data; }, createManualBa"
        },
        {
          "key": "/admin/config",
          "context": "const response = await api.get('/admin/config'); return response.data; }, updateEnvironmentVaria"
        },
        {
          "key": "/admin/sessions",
          "context": "const response = await api.get('/admin/sessions'); return response.data; }, terminateSession: as"
        },
        {
          "key": "/admin/alerts",
          "context": "const response = await api.get('/admin/alerts'); return response.data; }, acknowledgeAlert: asyn"
        },
        {
          "key": "/admin/alerts/${alertId}/acknowledge",
          "context": "e<void> => { await api.put(`/admin/alerts/${alertId}/acknowledge`); }, resolveAlert: async (alert"
        },
        {
          "key": "/admin/ssl/status",
          "context": "const response = await api.get('/admin/ssl/status'); return response.data; }, renewSSLCertificat"
        },
        {
          "key": "/admin/ssl/renew",
          "context": "const response = await api.post('/admin/ssl/renew'); return response.data; }, // Security Monitor"
        },
        {
          "key": "/admin/security/status",
          "context": "const response = await api.get('/admin/security/status'); return response.data; }, runSecuritySc"
        },
        {
          "key": "/admin/security/scan",
          "context": "const response = await api.post('/admin/security/scan'); return response.data; }, // System Maint"
        },
        {
          "key": "/admin/system/restart",
          "context": "<void> => { await api.post('/admin/system/restart'); }, updateSystem: async (): Promise<{ message"
        },
        {
          "key": "/admin/system/update",
          "context": "const response = await api.post('/admin/system/update'); return response.data; }, getSystemInfo:"
        },
        {
          "key": "/admin/system/info",
          "context": "const response = await api.get('/admin/system/info'); return response.data; } };"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/smsApi.ts",
      "apiCalls": [
        {
          "endpoint": "/sms/templates",
          "context": "{ const response = await api.post('/sms/templates', template); return response.data as SMSTemplate;"
        },
        {
          "endpoint": "/sms/templates",
          "context": "{ const response = await api.get('/sms/templates', { params }); return response.data as SMSTemplate["
        },
        {
          "endpoint": "/sms/templates/${id}",
          "context": "{ const response = await api.get(`/sms/templates/${id}`); return response.data as SMSTemplate; },"
        },
        {
          "endpoint": "/sms/templates/${id}",
          "context": "{ const response = await api.put(`/sms/templates/${id}`, template); return response.data as SMSTempl"
        },
        {
          "endpoint": "/sms/templates/${id}",
          "context": "Promise<void> => { await api.delete(`/sms/templates/${id}`); }, // Preview SMS template with cust"
        },
        {
          "endpoint": "/sms/templates/${templateId}/preview",
          "context": "{ const response = await api.post(`/sms/templates/${templateId}/preview`, { customer_id: customerI"
        },
        {
          "endpoint": "/sms/campaigns",
          "context": "{ const response = await api.post('/sms/campaigns', campaign); return response.data as SMSCampaign;"
        },
        {
          "endpoint": "/sms/campaigns",
          "context": "{ const response = await api.get('/sms/campaigns', { params }); return response.data as SMSCampaign["
        },
        {
          "endpoint": "/sms/campaigns/${id}",
          "context": "{ const response = await api.get(`/sms/campaigns/${id}`); return response.data as SMSCampaignWithDet"
        },
        {
          "endpoint": "/sms/campaigns/${id}/send",
          "context": "{ const response = await api.post(`/sms/campaigns/${id}/send`); return response.data as { message: s"
        },
        {
          "endpoint": "/sms/campaigns/${id}/retry",
          "context": "{ const response = await api.post(`/sms/campaigns/${id}/retry`); return response.data as { message:"
        },
        {
          "endpoint": "/sms/campaigns/${id}/statistics",
          "context": "{ const response = await api.get(`/sms/campaigns/${id}/statistics`); return response.data as SMSCamp"
        },
        {
          "endpoint": "/sms/send-batch",
          "context": "{ const response = await api.post('/sms/send-batch', batch); return response.data as SMSBatchRespons"
        },
        {
          "endpoint": "/sms/retry",
          "context": "{ const response = await api.post('/sms/retry', retry); return response.data as SMSRetryResponse;"
        },
        {
          "endpoint": "/sms/history",
          "context": "{ const response = await api.get('/sms/history', { params: filters }); return response.data as SMSHi"
        },
        {
          "endpoint": "/sms/statistics",
          "context": "{ const response = await api.get('/sms/statistics'); return response.data as SMSOverallStats; },"
        },
        {
          "endpoint": "/sms/messages/${id}",
          "context": "{ const response = await api.get(`/sms/messages/${id}`); return response.data as SMSMessageWithDetai"
        },
        {
          "endpoint": "/sms/messages",
          "context": "{ const response = await api.get('/sms/messages', { params }); return response.data as SMSMessageWit"
        },
        {
          "endpoint": "/sms/schedule",
          "context": "{ const response = await api.post('/sms/schedule', schedule); return response.data as SMSScheduledCa"
        },
        {
          "endpoint": "/sms/scheduled",
          "context": "{ const response = await api.get('/sms/scheduled'); return response.data as SMSScheduledCampaign[];"
        },
        {
          "endpoint": "/sms/scheduled/${id}",
          "context": "Promise<void> => { await api.delete(`/sms/scheduled/${id}`); } }; // Combined SMS API export cons"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/sms/templates/${id}",
          "context": "const response = await api.get(`/sms/templates/${id}`); return response.data as SMSTemplate; },"
        },
        {
          "key": "/sms/campaigns/${id}",
          "context": "const response = await api.get(`/sms/campaigns/${id}`); return response.data as SMSCampaignWithDetails;"
        },
        {
          "key": "/sms/campaigns/${id}/send",
          "context": "const response = await api.post(`/sms/campaigns/${id}/send`); return response.data as { message: string;"
        },
        {
          "key": "/sms/campaigns/${id}/retry",
          "context": "const response = await api.post(`/sms/campaigns/${id}/retry`); return response.data as { message: string;"
        },
        {
          "key": "/sms/campaigns/${id}/statistics",
          "context": "const response = await api.get(`/sms/campaigns/${id}/statistics`); return response.data as SMSCampaignSt"
        },
        {
          "key": "/sms/statistics",
          "context": "const response = await api.get('/sms/statistics'); return response.data as SMSOverallStats; }, /"
        },
        {
          "key": "/sms/messages/${id}",
          "context": "const response = await api.get(`/sms/messages/${id}`); return response.data as SMSMessageWithDetails;"
        },
        {
          "key": "/sms/scheduled",
          "context": "const response = await api.get('/sms/scheduled'); return response.data as SMSScheduledCampaign[]; },"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/settingsApi.ts",
      "apiCalls": [
        {
          "endpoint": "/settings/company",
          "context": "{ const response = await api.get('/settings/company'); return response.data as CompanySettings; }"
        },
        {
          "endpoint": "/settings/company",
          "context": "{ const response = await api.put('/settings/company', settings); return response.data as SettingsUpd"
        },
        {
          "endpoint": "/settings/gold-price",
          "context": "{ const response = await api.get('/settings/gold-price'); return response.data as GoldPriceConfig;"
        },
        {
          "endpoint": "/settings/gold-price",
          "context": "{ const response = await api.put('/settings/gold-price', priceUpdate); return response.data as Setti"
        },
        {
          "endpoint": "/settings/invoice-template",
          "context": "{ const response = await api.get('/settings/invoice-template'); return response.data as InvoiceTempl"
        },
        {
          "endpoint": "/settings/invoice-template",
          "context": "{ const response = await api.put('/settings/invoice-template', templateUpdate); return response.data"
        },
        {
          "endpoint": "/settings/roles",
          "context": "{ const response = await api.get('/settings/roles'); return response.data as RoleWithUsers[]; },"
        },
        {
          "endpoint": "/settings/roles",
          "context": "{ const response = await api.post('/settings/roles', roleData); return response.data as RoleWithUser"
        },
        {
          "endpoint": "/settings/roles/${roleId}",
          "context": "{ const response = await api.put(`/settings/roles/${roleId}`, roleUpdate); return response.data as R"
        },
        {
          "endpoint": "/settings/roles/${roleId}",
          "context": "{ const response = await api.delete(`/settings/roles/${roleId}`); return response.data as { message:"
        },
        {
          "endpoint": "/settings/permissions",
          "context": "{ const response = await api.get('/settings/permissions'); return response.data as PermissionStructu"
        },
        {
          "endpoint": "/settings/users?page=${page}&per_page=${perPage}",
          "context": "{ const response = await api.get(`/settings/users?page=${page}&per_page=${perPage}`); return respons"
        },
        {
          "endpoint": "/settings/users",
          "context": "{ const response = await api.post('/settings/users', userData); return response.data as UserManageme"
        },
        {
          "endpoint": "/settings/users/${userId}",
          "context": "{ const response = await api.put(`/settings/users/${userId}`, userUpdate); return response.data as U"
        },
        {
          "endpoint": "/settings/users/${userId}/password",
          "context": "{ const response = await api.put(`/settings/users/${userId}/password`, passwordUpdate); return respo"
        },
        {
          "endpoint": "/settings/users/${userId}",
          "context": "{ const response = await api.delete(`/settings/users/${userId}`); return response.data as { message:"
        },
        {
          "endpoint": "/settings/users/${userId}/assign-role",
          "context": "{ const response = await api.post(`/settings/users/${userId}/assign-role`, roleAssignment); return r"
        },
        {
          "endpoint": "/settings/system",
          "context": "{ const response = await api.get('/settings/system'); return response.data as SystemSettings; },"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/settings/company",
          "context": "const response = await api.get('/settings/company'); return response.data as CompanySettings; },"
        },
        {
          "key": "/settings/gold-price",
          "context": "const response = await api.get('/settings/gold-price'); return response.data as GoldPriceConfig; },"
        },
        {
          "key": "/settings/invoice-template",
          "context": "const response = await api.get('/settings/invoice-template'); return response.data as InvoiceTemplate;"
        },
        {
          "key": "/settings/roles",
          "context": "const response = await api.get('/settings/roles'); return response.data as RoleWithUsers[]; }, c"
        },
        {
          "key": "/settings/permissions",
          "context": "const response = await api.get('/settings/permissions'); return response.data as PermissionStructure;"
        },
        {
          "key": "/settings/users?page=${page}&per_page=${perPage}",
          "context": "const response = await api.get(`/settings/users?page=${page}&per_page=${perPage}`); return response.data"
        },
        {
          "key": "/settings/system",
          "context": "const response = await api.get('/settings/system'); return response.data as SystemSettings; }, };"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/searchApi.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "services/reportsApi.ts",
      "apiCalls": [
        {
          "endpoint": "/reports/sales/trends",
          "context": "s); const response = await api.get('/reports/sales/trends', { params: cleanedParams }); return response."
        },
        {
          "endpoint": "/reports/sales/top-products",
          "context": "s); const response = await api.get('/reports/sales/top-products', { params: cleanedParams }); return res"
        },
        {
          "endpoint": "/reports/inventory/valuation",
          "context": "s); const response = await api.get('/reports/inventory/valuation', { params: cleanedParams }); return re"
        },
        {
          "endpoint": "/reports/inventory/low-stock",
          "context": "s); const response = await api.get('/reports/inventory/low-stock', { params: cleanedParams }); return re"
        },
        {
          "endpoint": "/reports/customers/analysis",
          "context": "s); const response = await api.get('/reports/customers/analysis', { params: cleanedParams }); return res"
        },
        {
          "endpoint": "/reports/customers/debt-report",
          "context": "s); const response = await api.get('/reports/customers/debt-report', { params: cleanedParams }); return"
        },
        {
          "endpoint": "/reports/charts/sales-overview",
          "context": "s); const response = await api.get('/reports/charts/sales-overview', { params: cleanedParams }); return"
        },
        {
          "endpoint": "/reports/export/${reportType}",
          "context": "(); const response = await api.post(`/reports/export/${reportType}`, data, { responseType: 'blob',"
        },
        {
          "endpoint": "/reports/export/${reportType}/csv",
          "context": "(); const response = await api.post(`/reports/export/${reportType}/csv`, data, { responseType: 'blob',"
        }
      ],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "services/qrCardApi.ts",
      "apiCalls": [
        {
          "endpoint": "/universal-invoices/${invoiceId}/qr-card",
          "context": "{ const response = await api.get(`/universal-invoices/${invoiceId}/qr-card`); return response.data a"
        },
        {
          "endpoint": "/qr-cards/?invoice_id=${invoiceId}",
          "context": "{ const response = await api.post(`/qr-cards/?invoice_id=${invoiceId}`, cardData); return response.d"
        },
        {
          "endpoint": "/qr-cards/${cardId}",
          "context": "{ const response = await api.get(`/qr-cards/${cardId}`); return response.data as QRInvoiceCard; }"
        },
        {
          "endpoint": "/qr-cards/${cardId}",
          "context": "{ const response = await api.put(`/qr-cards/${cardId}`, updates); return response.data as QRInvoiceC"
        },
        {
          "endpoint": "/qr-cards/${cardId}",
          "context": "{ const response = await api.delete(`/qr-cards/${cardId}`); return response.data as { message: strin"
        },
        {
          "endpoint": "/qr-cards/${cardId}/regenerate",
          "context": "{ const response = await api.post(`/qr-cards/${cardId}/regenerate`); return response.data as QRInvoi"
        },
        {
          "endpoint": "/qr-cards/${cardId}/qr-image?size=${size}",
          "context": "{ const response = await api.get(`/qr-cards/${cardId}/qr-image?size=${size}`, { responseType: 'blo"
        },
        {
          "endpoint": "/qr-cards/${cardId}/analytics",
          "context": "{ const response = await api.get(`/qr-cards/${cardId}/analytics`); return response.data as QRCardAna"
        },
        {
          "endpoint": "/qr-cards/?${params}",
          "context": "const response = await api.get(`/qr-cards/?${params}`); return response.data as QRCardsResponse;"
        },
        {
          "endpoint": "/qr-cards/themes",
          "context": "{ const response = await api.get('/qr-cards/themes'); return response.data as QRCardTheme[]; },"
        },
        {
          "endpoint": "/public/invoice-card/${cardId}${params}",
          "context": "; const response = await api.get(`/public/invoice-card/${cardId}${params}`, { responseType: 'text'"
        },
        {
          "endpoint": "/public/card/${shortUrl}${params}",
          "context": "; const response = await api.get(`/public/card/${shortUrl}${params}`, { responseType: 'text'"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/universal-invoices/${invoiceId}/qr-card",
          "context": "const response = await api.get(`/universal-invoices/${invoiceId}/qr-card`); return response.data as QRIn"
        },
        {
          "key": "/qr-cards/${cardId}",
          "context": "const response = await api.get(`/qr-cards/${cardId}`); return response.data as QRInvoiceCard; },"
        },
        {
          "key": "/qr-cards/${cardId}/regenerate",
          "context": "const response = await api.post(`/qr-cards/${cardId}/regenerate`); return response.data as QRInvoiceCard;"
        },
        {
          "key": "/qr-cards/${cardId}/analytics",
          "context": "const response = await api.get(`/qr-cards/${cardId}/analytics`); return response.data as QRCardAnalytics"
        },
        {
          "key": "/qr-cards/?${params}",
          "context": "const response = await api.get(`/qr-cards/?${params}`); return response.data as QRCardsResponse; },"
        },
        {
          "key": "/qr-cards/themes",
          "context": "const response = await api.get('/qr-cards/themes'); return response.data as QRCardTheme[]; }, //"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/invoiceApi.ts",
      "apiCalls": [
        {
          "endpoint": "/universal-invoices/calculate",
          "context": "{ const response = await api.post('/universal-invoices/calculate', invoiceData); return response.dat"
        },
        {
          "endpoint": "/universal-invoices/",
          "context": "{ const response = await api.post('/universal-invoices/', invoiceData); return response.data as Invo"
        },
        {
          "endpoint": "/invoices/calculate",
          "context": "{ const response = await api.post('/invoices/calculate', invoiceData); return response.data as Invoi"
        },
        {
          "endpoint": "/invoices/",
          "context": "{ const response = await api.post('/invoices/', invoiceData); return response.data as InvoiceWithDet"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}",
          "context": "{ const response = await api.get(`/universal-invoices/${invoiceId}`); return response.data as Invoic"
        },
        {
          "endpoint": "/universal-invoices/?${params}",
          "context": "const response = await api.get(`/universal-invoices/?${params}`); return (response.data as any)?.i"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}",
          "context": "{ const response = await api.put(`/universal-invoices/${invoiceId}`, updateData); return response.da"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}/approve",
          "context": "{ const response = await api.put(`/universal-invoices/${invoiceId}/approve`, { approval_notes: app"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}/payments",
          "context": "{ const response = await api.post(`/universal-invoices/${invoiceId}/payments`, paymentData); return"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}/status",
          "context": "{ const response = await api.put(`/universal-invoices/${invoiceId}/status`, statusUpdate); return re"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}",
          "context": "{ const response = await api.delete(`/universal-invoices/${invoiceId}`); return response.data as { m"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}/items/${itemId}/price-override",
          "context": "{ const response = await api.put(`/universal-invoices/${invoiceId}/items/${itemId}/price-override`, {"
        },
        {
          "endpoint": "/universal-invoices/${invoiceId}/pdf",
          "context": "{ const response = await api.get(`/universal-invoices/${invoiceId}/pdf`); return response.data as an"
        },
        {
          "endpoint": "/universal-invoices/analytics/summary?${params}",
          "context": "const response = await api.get(`/universal-invoices/analytics/summary?${params}`); return response"
        },
        {
          "endpoint": "/invoices/${invoiceId}",
          "context": "const response = await api.get(`/invoices/${invoiceId}`); return response.data as InvoiceWithDet"
        },
        {
          "endpoint": "/invoices/?${params}",
          "context": "const response = await api.get(`/invoices/?${params}`); return response.data as any; },"
        },
        {
          "endpoint": "/invoices/${invoiceId}/payments",
          "context": "const response = await api.post(`/invoices/${invoiceId}/payments`, paymentData); return response"
        },
        {
          "endpoint": "/invoices/${invoiceId}/status",
          "context": "const response = await api.put(`/invoices/${invoiceId}/status`, statusUpdate); return response.d"
        },
        {
          "endpoint": "/invoices/${invoiceId}",
          "context": "const response = await api.delete(`/invoices/${invoiceId}`); return response.data as { message:"
        },
        {
          "endpoint": "/invoices/reports/summary?${params}",
          "context": "const response = await api.get(`/invoices/reports/summary?${params}`); return response.data as I"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/universal-invoices/${invoiceId}",
          "context": "const response = await api.get(`/universal-invoices/${invoiceId}`); return response.data as InvoiceWithD"
        },
        {
          "key": "/universal-invoices/?${params}",
          "context": "const response = await api.get(`/universal-invoices/?${params}`); return (response.data as any)?.items |"
        },
        {
          "key": "/universal-invoices/${invoiceId}/pdf",
          "context": "const response = await api.get(`/universal-invoices/${invoiceId}/pdf`); return response.data as any;"
        },
        {
          "key": "/universal-invoices/analytics/summary?${params}",
          "context": "const response = await api.get(`/universal-invoices/analytics/summary?${params}`); return response.data"
        },
        {
          "key": "/invoices/${invoiceId}",
          "context": "const response = await api.get(`/invoices/${invoiceId}`); return response.data as InvoiceWithDetails;"
        },
        {
          "key": "/invoices/?${params}",
          "context": "const response = await api.get(`/invoices/?${params}`); return response.data as any; }, //"
        },
        {
          "key": "/invoices/reports/summary?${params}",
          "context": "const response = await api.get(`/invoices/reports/summary?${params}`); return response.data as Invoice"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/inventoryIntelligenceApi.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "services/inventoryApi.ts",
      "apiCalls": [
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/universal-inv"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "{ const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/universal-inv"
        },
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/image-managem"
        }
      ],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "services/imageManagementApi.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "services/enhancedAccountingApi.ts",
      "apiCalls": [
        {
          "endpoint": "/accounting/chart-of-accounts?${params.toString()}",
          "context": "const response = await api.get(`/accounting/chart-of-accounts?${params.toString()}`); return respo"
        },
        {
          "endpoint": "/accounting/chart-of-accounts",
          "context": "{ const response = await api.post('/accounting/chart-of-accounts', accountData); return response.dat"
        },
        {
          "endpoint": "/accounting/chart-of-accounts/${accountId}",
          "context": "{ const response = await api.put(`/accounting/chart-of-accounts/${accountId}`, accountData); return"
        },
        {
          "endpoint": "/accounting/chart-of-accounts/${accountId}",
          "context": "Promise<void> => { await api.delete(`/accounting/chart-of-accounts/${accountId}`); }, getChartOfA"
        },
        {
          "endpoint": "/accounting/chart-of-accounts/${accountId}",
          "context": "{ const response = await api.get(`/accounting/chart-of-accounts/${accountId}`); return response.data"
        },
        {
          "endpoint": "/accounting/subsidiary-accounts?${params.toString()}",
          "context": "const response = await api.get(`/accounting/subsidiary-accounts?${params.toString()}`); return res"
        },
        {
          "endpoint": "/accounting/subsidiary-accounts",
          "context": "{ const response = await api.post('/accounting/subsidiary-accounts', subsidiaryData); return respons"
        },
        {
          "endpoint": "/accounting/subsidiary-accounts/${subsidiaryId}",
          "context": "{ const response = await api.put(`/accounting/subsidiary-accounts/${subsidiaryId}`, subsidiaryData);"
        },
        {
          "endpoint": "/accounting/subsidiary-accounts/${subsidiaryId}",
          "context": "Promise<void> => { await api.delete(`/accounting/subsidiary-accounts/${subsidiaryId}`); }, getSub"
        },
        {
          "endpoint": "/accounting/subsidiary-accounts/${subsidiaryId}",
          "context": "{ const response = await api.get(`/accounting/subsidiary-accounts/${subsidiaryId}`); return response"
        },
        {
          "endpoint": "/accounting/journal-entries?${params.toString()}",
          "context": "const response = await api.get(`/accounting/journal-entries?${params.toString()}`); return respons"
        },
        {
          "endpoint": "/accounting/journal-entries",
          "context": "{ const response = await api.post('/accounting/journal-entries', entryData); return response.data as"
        },
        {
          "endpoint": "/accounting/journal-entries/${entryId}",
          "context": "{ const response = await api.put(`/accounting/journal-entries/${entryId}`, entryData); return respon"
        },
        {
          "endpoint": "/accounting/journal-entries/${entryId}",
          "context": "Promise<void> => { await api.delete(`/accounting/journal-entries/${entryId}`); }, getJournalEntry"
        },
        {
          "endpoint": "/accounting/journal-entries/${entryId}",
          "context": "{ const response = await api.get(`/accounting/journal-entries/${entryId}`); return response.data as"
        },
        {
          "endpoint": "/accounting/journal-entries/${entryId}/post",
          "context": "{ const response = await api.post(`/accounting/journal-entries/${entryId}/post`); return response.da"
        },
        {
          "endpoint": "/accounting/journal-entries/${entryId}/reverse",
          "context": "{ const response = await api.post(`/accounting/journal-entries/${entryId}/reverse`, { reversal_rea"
        },
        {
          "endpoint": "/accounting/general-ledger/${accountId}?${params.toString()}",
          "context": "const response = await api.get(`/accounting/general-ledger/${accountId}?${params.toString()}`); re"
        },
        {
          "endpoint": "/accounting/account-balance/${accountId}?${params.toString()}",
          "context": "const response = await api.get(`/accounting/account-balance/${accountId}?${params.toString()}`); r"
        },
        {
          "endpoint": "/accounting/checks?${params.toString()}",
          "context": "const response = await api.get(`/accounting/checks?${params.toString()}`); return response.data as"
        },
        {
          "endpoint": "/accounting/checks",
          "context": "{ const response = await api.post('/accounting/checks', checkData); return response.data as CheckMan"
        },
        {
          "endpoint": "/accounting/checks/${checkId}",
          "context": "{ const response = await api.put(`/accounting/checks/${checkId}`, checkData); return response.data a"
        },
        {
          "endpoint": "/accounting/checks/${checkId}/status",
          "context": "{ const response = await api.post(`/accounting/checks/${checkId}/status`, { status, notes"
        },
        {
          "endpoint": "/accounting/checks/${checkId}",
          "context": "Promise<void> => { await api.delete(`/accounting/checks/${checkId}`); }, getCheck: async (checkId"
        },
        {
          "endpoint": "/accounting/checks/${checkId}",
          "context": "{ const response = await api.get(`/accounting/checks/${checkId}`); return response.data as CheckMana"
        },
        {
          "endpoint": "/accounting/installment-accounts?${params.toString()}",
          "context": "const response = await api.get(`/accounting/installment-accounts?${params.toString()}`); return re"
        },
        {
          "endpoint": "/accounting/installment-accounts",
          "context": "{ const response = await api.post('/accounting/installment-accounts', installmentData); return respo"
        },
        {
          "endpoint": "/accounting/installment-accounts/${installmentId}",
          "context": "{ const response = await api.put(`/accounting/installment-accounts/${installmentId}`, installmentData);"
        },
        {
          "endpoint": "/accounting/installment-accounts/${installmentId}",
          "context": "Promise<void> => { await api.delete(`/accounting/installment-accounts/${installmentId}`); }, getI"
        },
        {
          "endpoint": "/accounting/installment-accounts/${installmentId}",
          "context": "{ const response = await api.get(`/accounting/installment-accounts/${installmentId}`); return respon"
        },
        {
          "endpoint": "/accounting/installment-accounts/${installmentId}/payment",
          "context": "{ const response = await api.post(`/accounting/installment-accounts/${installmentId}/payment`, { p"
        },
        {
          "endpoint": "/accounting/installment-accounts/${installmentId}/payments",
          "context": "{ const response = await api.get(`/accounting/installment-accounts/${installmentId}/payments`); retu"
        },
        {
          "endpoint": "/accounting/bank-reconciliations?${params.toString()}",
          "context": "const response = await api.get(`/accounting/bank-reconciliations?${params.toString()}`); return re"
        },
        {
          "endpoint": "/accounting/bank-reconciliations",
          "context": "{ const response = await api.post('/accounting/bank-reconciliations', reconciliationData); return re"
        },
        {
          "endpoint": "/accounting/bank-reconciliations/${reconciliationId}",
          "context": "{ const response = await api.put(`/accounting/bank-reconciliations/${reconciliationId}`, reconciliationDa"
        },
        {
          "endpoint": "/accounting/bank-reconciliations/${reconciliationId}/complete",
          "context": "{ const response = await api.post(`/accounting/bank-reconciliations/${reconciliationId}/complete`);"
        },
        {
          "endpoint": "/accounting/reports/trial-balance?as_of_date=${asOfDate}",
          "context": "{ const response = await api.get(`/accounting/reports/trial-balance?as_of_date=${asOfDate}`); return"
        },
        {
          "endpoint": "/accounting/reports/balance-sheet?as_of_date=${asOfDate}",
          "context": "{ const response = await api.get(`/accounting/reports/balance-sheet?as_of_date=${asOfDate}`); return"
        },
        {
          "endpoint": "/accounting/reports/profit-loss?period_start=${periodStart}&period_end=${periodEnd}",
          "context": "{ const response = await api.get(`/accounting/reports/profit-loss?period_start=${periodStart}&period_end="
        },
        {
          "endpoint": "/accounting/periods",
          "context": "{ const response = await api.get('/accounting/periods'); return response.data as AccountingPeriod[];"
        },
        {
          "endpoint": "/accounting/periods",
          "context": "{ const response = await api.post('/accounting/periods', periodData); return response.data as Accoun"
        },
        {
          "endpoint": "/accounting/periods/${periodId}/lock",
          "context": "{ const response = await api.post(`/accounting/periods/${periodId}/lock`, { lock_reason: lockReaso"
        },
        {
          "endpoint": "/accounting/periods/${periodId}/unlock",
          "context": "{ const response = await api.post(`/accounting/periods/${periodId}/unlock`); return response.data as"
        },
        {
          "endpoint": "/accounting/periods/${periodId}/close",
          "context": "{ const response = await api.post(`/accounting/periods/${periodId}/close`); return response.data as"
        },
        {
          "endpoint": "/accounting/dashboard",
          "context": "{ const response = await api.get('/accounting/dashboard'); return response.data as AccountingDashboa"
        },
        {
          "endpoint": "/accounting/audit-trail?${params.toString()}",
          "context": "const response = await api.get(`/accounting/audit-trail?${params.toString()}`); return response.da"
        },
        {
          "endpoint": "/accounting/gold-invoice-journal-entry/${invoiceId}",
          "context": "{ const response = await api.post(`/accounting/gold-invoice-journal-entry/${invoiceId}`, invoiceData);"
        },
        {
          "endpoint": "/accounting/reports/trial-balance/export?as_of_date=${asOfDate}&format=${format}",
          "context": "{ const response = await api.get(`/accounting/reports/trial-balance/export?as_of_date=${asOfDate}&format="
        },
        {
          "endpoint": "/accounting/reports/balance-sheet/export?as_of_date=${asOfDate}&format=${format}",
          "context": "{ const response = await api.get(`/accounting/reports/balance-sheet/export?as_of_date=${asOfDate}&format="
        },
        {
          "endpoint": "/accounting/reports/profit-loss/export?period_start=${periodStart}&period_end=${periodEnd}&format=${format}",
          "context": "{ const response = await api.get(`/accounting/reports/profit-loss/export?period_start=${periodStart}&peri"
        },
        {
          "endpoint": "/accounting/journal-entries/export?${params.toString()}",
          "context": "const response = await api.get(`/accounting/journal-entries/export?${params.toString()}`, { resp"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/accounting/chart-of-accounts?${params.toString()}",
          "context": "const response = await api.get(`/accounting/chart-of-accounts?${params.toString()}`); return response.da"
        },
        {
          "key": "/accounting/chart-of-accounts/${accountId}",
          "context": "const response = await api.get(`/accounting/chart-of-accounts/${accountId}`); return response.data as Ch"
        },
        {
          "key": "/accounting/subsidiary-accounts?${params.toString()}",
          "context": "const response = await api.get(`/accounting/subsidiary-accounts?${params.toString()}`); return response."
        },
        {
          "key": "/accounting/subsidiary-accounts/${subsidiaryId}",
          "context": "const response = await api.get(`/accounting/subsidiary-accounts/${subsidiaryId}`); return response.data"
        },
        {
          "key": "/accounting/journal-entries?${params.toString()}",
          "context": "const response = await api.get(`/accounting/journal-entries?${params.toString()}`); return response.data"
        },
        {
          "key": "/accounting/journal-entries/${entryId}",
          "context": "const response = await api.get(`/accounting/journal-entries/${entryId}`); return response.data as Journa"
        },
        {
          "key": "/accounting/journal-entries/${entryId}/post",
          "context": "const response = await api.post(`/accounting/journal-entries/${entryId}/post`); return response.data as J"
        },
        {
          "key": "/accounting/general-ledger/${accountId}?${params.toString()}",
          "context": "const response = await api.get(`/accounting/general-ledger/${accountId}?${params.toString()}`); return r"
        },
        {
          "key": "/accounting/account-balance/${accountId}?${params.toString()}",
          "context": "const response = await api.get(`/accounting/account-balance/${accountId}?${params.toString()}`); return"
        },
        {
          "key": "/accounting/checks?${params.toString()}",
          "context": "const response = await api.get(`/accounting/checks?${params.toString()}`); return response.data as Check"
        },
        {
          "key": "/accounting/checks/${checkId}",
          "context": "const response = await api.get(`/accounting/checks/${checkId}`); return response.data as CheckManagement"
        },
        {
          "key": "/accounting/installment-accounts?${params.toString()}",
          "context": "const response = await api.get(`/accounting/installment-accounts?${params.toString()}`); return response"
        },
        {
          "key": "/accounting/installment-accounts/${installmentId}",
          "context": "const response = await api.get(`/accounting/installment-accounts/${installmentId}`); return response.dat"
        },
        {
          "key": "/accounting/installment-accounts/${installmentId}/payments",
          "context": "const response = await api.get(`/accounting/installment-accounts/${installmentId}/payments`); return res"
        },
        {
          "key": "/accounting/bank-reconciliations?${params.toString()}",
          "context": "const response = await api.get(`/accounting/bank-reconciliations?${params.toString()}`); return response"
        },
        {
          "key": "/accounting/bank-reconciliations/${reconciliationId}/complete",
          "context": "const response = await api.post(`/accounting/bank-reconciliations/${reconciliationId}/complete`); return"
        },
        {
          "key": "/accounting/reports/trial-balance?as_of_date=${asOfDate}",
          "context": "const response = await api.get(`/accounting/reports/trial-balance?as_of_date=${asOfDate}`); return respo"
        },
        {
          "key": "/accounting/reports/balance-sheet?as_of_date=${asOfDate}",
          "context": "const response = await api.get(`/accounting/reports/balance-sheet?as_of_date=${asOfDate}`); return respo"
        },
        {
          "key": "/accounting/reports/profit-loss?period_start=${periodStart}&period_end=${periodEnd}",
          "context": "const response = await api.get(`/accounting/reports/profit-loss?period_start=${periodStart}&period_end=${peri"
        },
        {
          "key": "/accounting/periods",
          "context": "const response = await api.get('/accounting/periods'); return response.data as AccountingPeriod[]; },"
        },
        {
          "key": "/accounting/periods/${periodId}/unlock",
          "context": "const response = await api.post(`/accounting/periods/${periodId}/unlock`); return response.data as Accoun"
        },
        {
          "key": "/accounting/periods/${periodId}/close",
          "context": "const response = await api.post(`/accounting/periods/${periodId}/close`); return response.data as Account"
        },
        {
          "key": "/accounting/dashboard",
          "context": "const response = await api.get('/accounting/dashboard'); return response.data as AccountingDashboard;"
        },
        {
          "key": "/accounting/audit-trail?${params.toString()}",
          "context": "const response = await api.get(`/accounting/audit-trail?${params.toString()}`); return response.data as"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/dashboardApi.ts",
      "apiCalls": [
        {
          "endpoint": "/reports/dashboard/summary",
          "context": "{ const response = await api.get('/reports/dashboard/summary'); return response.data as DashboardSum"
        },
        {
          "endpoint": "/reports/charts/sales-overview?days=${days}",
          "context": "{ const response = await api.get(`/reports/charts/sales-overview?days=${days}`); const rawData = res"
        },
        {
          "endpoint": "/reports/charts/category-sales?days=${days}",
          "context": "{ const response = await api.get(`/reports/charts/category-sales?days=${days}`); return response.dat"
        },
        {
          "endpoint": "/reports/sales/top-products?limit=${limit}",
          "context": "{ const response = await api.get(`/reports/sales/top-products?limit=${limit}`); return (response.dat"
        },
        {
          "endpoint": "/reports/inventory/low-stock",
          "context": "{ const response = await api.get(`/reports/inventory/low-stock`); return (response.data as any).item"
        },
        {
          "endpoint": "/invoices/?status=pending&limit=${limit}",
          "context": "{ const response = await api.get(`/invoices/?status=pending&limit=${limit}`); return (response.data"
        },
        {
          "endpoint": "/reports/inventory/valuation",
          "context": "{ const response = await api.get('/reports/inventory/valuation'); return response.data as any; },"
        },
        {
          "endpoint": "/reports/customers/debt-report",
          "context": "{ const response = await api.get('/reports/customers/debt-report'); return response.data as any;"
        },
        {
          "endpoint": "/reports/summary/daily${queryParam}",
          "context": "; const response = await api.get(`/reports/summary/daily${queryParam}`); return response.data as {"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/reports/dashboard/summary",
          "context": "const response = await api.get('/reports/dashboard/summary'); return response.data as DashboardSummary;"
        },
        {
          "key": "/reports/charts/sales-overview?days=${days}",
          "context": "const response = await api.get(`/reports/charts/sales-overview?days=${days}`); const rawData = response."
        },
        {
          "key": "/reports/charts/category-sales?days=${days}",
          "context": "const response = await api.get(`/reports/charts/category-sales?days=${days}`); return response.data as C"
        },
        {
          "key": "/reports/sales/top-products?limit=${limit}",
          "context": "const response = await api.get(`/reports/sales/top-products?limit=${limit}`); return (response.data as a"
        },
        {
          "key": "/reports/inventory/low-stock",
          "context": "const response = await api.get(`/reports/inventory/low-stock`); return (response.data as any).items?.sli"
        },
        {
          "key": "/invoices/?status=pending&limit=${limit}",
          "context": "const response = await api.get(`/invoices/?status=pending&limit=${limit}`); return (response.data as any"
        },
        {
          "key": "/reports/inventory/valuation",
          "context": "const response = await api.get('/reports/inventory/valuation'); return response.data as any; },"
        },
        {
          "key": "/reports/customers/debt-report",
          "context": "const response = await api.get('/reports/customers/debt-report'); return response.data as any; },"
        },
        {
          "key": "/reports/summary/daily${queryParam}",
          "context": "const response = await api.get(`/reports/summary/daily${queryParam}`); return response.data as {"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/customerApi.ts",
      "apiCalls": [
        {
          "endpoint": "/customers",
          "context": "{ const response = await api.get('/customers', { params }); return response.data as Customer[]; }"
        },
        {
          "endpoint": "/customers/search",
          "context": "{ const response = await api.get('/customers/search', { params: { q: query } }); return"
        },
        {
          "endpoint": "/customers/${id}",
          "context": "{ const response = await api.get(`/customers/${id}`, { params: { include_payments: includePayments"
        },
        {
          "endpoint": "/customers",
          "context": "{ const response = await api.post('/customers', customer); return response.data as Customer; },"
        },
        {
          "endpoint": "/customers/${id}",
          "context": "{ const response = await api.put(`/customers/${id}`, customer); return response.data as Customer;"
        },
        {
          "endpoint": "/customers/${id}",
          "context": "Promise<void> => { await api.delete(`/customers/${id}`); }, // Get customers debt summary getC"
        },
        {
          "endpoint": "/customers/debt-summary",
          "context": "{ const response = await api.get('/customers/debt-summary', { params: { only_with_debt: onlyWithDe"
        },
        {
          "endpoint": "/customers/${id}/debt-history",
          "context": "{ const response = await api.get(`/customers/${id}/debt-history`); return response.data as CustomerD"
        },
        {
          "endpoint": "/customers/${customerId}/payments",
          "context": "{ const response = await api.post(`/customers/${customerId}/payments`, payment); return response.dat"
        },
        {
          "endpoint": "/customers/${customerId}/payments",
          "context": "{ const response = await api.get(`/customers/${customerId}/payments`, { params }); return response.d"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/customers/${id}/debt-history",
          "context": "const response = await api.get(`/customers/${id}/debt-history`); return response.data as CustomerDebtHis"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/chartExportService.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "catch (error) {\r\n      return {\r\n        success: false,\r\n        filename: '',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      return {\r\n        success: false,\r\n        filename: '',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      return {\r\n        success: false,\r\n        filename: '',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      return {\r\n        success: false,\r\n        filename: '',\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      throw new Error(`Failed to generate share link: ${error instanceof Error ? error.message : 'Unknown error'}",
          "hasTranslation": false
        }
      ],
      "translationUsage": [
        {
          "key": "a",
          "context": "t link = document.createElement('a'); link.href = url; link.download = filename; document.body."
        }
      ],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "5 error handlers need translation support"
        }
      ]
    },
    {
      "file": "services/businessAdaptabilityApi.ts",
      "apiCalls": [
        {
          "endpoint": "${this.baseUrl}/business-types",
          "context": "{ const response = await api.get(`${this.baseUrl}/business-types`, { params: { active_only: active"
        },
        {
          "endpoint": "${this.baseUrl}/business-types/${typeId}",
          "context": "{ const response = await api.get(`${this.baseUrl}/business-types/${typeId}`); return response.data;"
        },
        {
          "endpoint": "${this.baseUrl}/business-types/code/${typeCode}",
          "context": "{ const response = await api.get(`${this.baseUrl}/business-types/code/${typeCode}`); return response"
        },
        {
          "endpoint": "${this.baseUrl}/business-types",
          "context": "{ const response = await api.post(`${this.baseUrl}/business-types`, data); return response.data;"
        },
        {
          "endpoint": "${this.baseUrl}/business-types/${typeId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/business-types/${typeId}`, data); return response."
        },
        {
          "endpoint": "${this.baseUrl}/configurations",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations`, { params: { active_only: active"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}`); return response.data"
        },
        {
          "endpoint": "${this.baseUrl}/configurations",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations`, data); return response.data;"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/configurations/${configId}`, data); return respons"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/workflow-rules",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/workflow-rules`, { pa"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/workflow-rules",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/workflow-rules`, data);"
        },
        {
          "endpoint": "${this.baseUrl}/workflow-rules/${ruleId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/workflow-rules/${ruleId}`, data); return response."
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/workflow-rules/execute",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/workflow-rules/execute`, en"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/custom-fields",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/custom-fields`, { par"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/custom-fields",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/custom-fields`, data);"
        },
        {
          "endpoint": "${this.baseUrl}/custom-fields/${fieldId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/custom-fields/${fieldId}`, data); return response."
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/custom-fields/validate",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/custom-fields/validate`, fi"
        },
        {
          "endpoint": "${this.baseUrl}/units-of-measure",
          "context": "{ const response = await api.get(`${this.baseUrl}/units-of-measure`, { params: { business"
        },
        {
          "endpoint": "${this.baseUrl}/units-of-measure",
          "context": "{ const response = await api.post(`${this.baseUrl}/units-of-measure`, data); return response.data;"
        },
        {
          "endpoint": "${this.baseUrl}/units-of-measure/${unitId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/units-of-measure/${unitId}`, data); return respons"
        },
        {
          "endpoint": "${this.baseUrl}/units-of-measure/convert",
          "context": "{ const response = await api.post(`${this.baseUrl}/units-of-measure/convert`, null, { params: requ"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/pricing-rules",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/pricing-rules`, { par"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/pricing-rules",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/pricing-rules`, data);"
        },
        {
          "endpoint": "${this.baseUrl}/pricing-rules/${ruleId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/pricing-rules/${ruleId}`, data); return response.d"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/pricing-rules/calculate",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/pricing-rules/calculate`, n"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/migrate",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/migrate`, request); re"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/migration-history",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/migration-history`); re"
        },
        {
          "endpoint": "${this.baseUrl}/migrations/${migrationId}/rollback",
          "context": "{ const response = await api.post(`${this.baseUrl}/migrations/${migrationId}/rollback`); return resp"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/terminology",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/terminology`); return r"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/terminology",
          "context": "{ const response = await api.put(`${this.baseUrl}/configurations/${configId}/terminology`, updates);"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/terminology/translate",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/terminology/translate`, {"
        },
        {
          "endpoint": "${this.baseUrl}/features",
          "context": "{ const response = await api.get(`${this.baseUrl}/features`, { params: { business_config_id: busin"
        },
        {
          "endpoint": "${this.baseUrl}/features/${featureId}",
          "context": "{ const response = await api.put(`${this.baseUrl}/features/${featureId}`, data); return response.dat"
        },
        {
          "endpoint": "${this.baseUrl}/features/${featureId}/toggle",
          "context": "{ const response = await api.patch(`${this.baseUrl}/features/${featureId}/toggle`, { is_enabled: enabled"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/status",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/status`); return respon"
        },
        {
          "endpoint": "${this.baseUrl}/business-types/${sourceTypeId}/compatibility/${targetTypeId}",
          "context": "{ const response = await api.get(`${this.baseUrl}/business-types/${sourceTypeId}/compatibility/${targetTy"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/bulk-operations/initialize-defaults",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/bulk-operations/initialize-"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/bulk-operations/export-configuration",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/bulk-operations/export-conf"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/bulk-operations/import-configuration",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/bulk-operations/import-conf"
        },
        {
          "endpoint": "${this.baseUrl}/business-types",
          "context": "{ const response = await api.get(`${this.baseUrl}/business-types`, { params: { is_template: true }"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/apply-template/${templateId}",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/apply-template/${templateId"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/analytics",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/analytics`, { params:"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/kpis",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/kpis`); return response"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/metrics",
          "context": "{ const response = await api.get(`${this.baseUrl}/configurations/${configId}/metrics`, { params: {"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/validate",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/validate`); return res"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/test-workflows",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/test-workflows`, testData);"
        },
        {
          "endpoint": "${this.baseUrl}/configurations/${configId}/test-pricing",
          "context": "{ const response = await api.post(`${this.baseUrl}/configurations/${configId}/test-pricing`, testData);"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "${this.baseUrl}/business-types/${typeId}",
          "context": "const response = await api.get(`${this.baseUrl}/business-types/${typeId}`); return response.data; }"
        },
        {
          "key": "${this.baseUrl}/business-types/code/${typeCode}",
          "context": "const response = await api.get(`${this.baseUrl}/business-types/code/${typeCode}`); return response.data;"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}",
          "context": "const response = await api.get(`${this.baseUrl}/configurations/${configId}`); return response.data; }"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/migration-history",
          "context": "const response = await api.get(`${this.baseUrl}/configurations/${configId}/migration-history`); return r"
        },
        {
          "key": "${this.baseUrl}/migrations/${migrationId}/rollback",
          "context": "const response = await api.post(`${this.baseUrl}/migrations/${migrationId}/rollback`); return response.da"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/terminology",
          "context": "const response = await api.get(`${this.baseUrl}/configurations/${configId}/terminology`); return respons"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/status",
          "context": "const response = await api.get(`${this.baseUrl}/configurations/${configId}/status`); return response.dat"
        },
        {
          "key": "${this.baseUrl}/business-types/${sourceTypeId}/compatibility/${targetTypeId}",
          "context": "const response = await api.get(`${this.baseUrl}/business-types/${sourceTypeId}/compatibility/${targetTypeId}`"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/bulk-operations/initialize-defaults",
          "context": "const response = await api.post(`${this.baseUrl}/configurations/${configId}/bulk-operations/initialize-default"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/bulk-operations/export-configuration",
          "context": "const response = await api.post(`${this.baseUrl}/configurations/${configId}/bulk-operations/export-configurati"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/apply-template/${templateId}",
          "context": "const response = await api.post(`${this.baseUrl}/configurations/${configId}/apply-template/${templateId}`);"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/kpis",
          "context": "const response = await api.get(`${this.baseUrl}/configurations/${configId}/kpis`); return response.data;"
        },
        {
          "key": "${this.baseUrl}/configurations/${configId}/validate",
          "context": "const response = await api.post(`${this.baseUrl}/configurations/${configId}/validate`); return response.d"
        }
      ],
      "recommendations": []
    },
    {
      "file": "services/api.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "catch (error) {\r\n    if (error instanceof ApiError) {\r\n      throw error;\r\n    }",
          "hasTranslation": false
        }
      ],
      "translationUsage": [
        {
          "key": "content-type",
          "context": "tentType = response.headers.get('content-type'); if (contentType && contentType.includes('application/jso"
        }
      ],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "1 error handlers need translation support"
        }
      ]
    },
    {
      "file": "services/analyticsApi.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "services/accountingApi.ts",
      "apiCalls": [
        {
          "endpoint": "/accounting/income-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/income-ledger?${params.toString()}`); return response."
        },
        {
          "endpoint": "/accounting/expense-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/expense-ledger?${params.toString()}`); return response"
        },
        {
          "endpoint": "/accounting/expense-ledger",
          "context": "{ const response = await api.post('/accounting/expense-ledger', expenseData); return response.data a"
        },
        {
          "endpoint": "/accounting/cash-bank-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/cash-bank-ledger?${params.toString()}`); return respon"
        },
        {
          "endpoint": "/accounting/gold-weight-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/gold-weight-ledger?${params.toString()}`); return resp"
        },
        {
          "endpoint": "/accounting/profit-loss-analysis?${params.toString()}",
          "context": "const response = await api.get(`/accounting/profit-loss-analysis?${params.toString()}`); return re"
        },
        {
          "endpoint": "/accounting/debt-tracking?${params.toString()}",
          "context": "const response = await api.get(`/accounting/debt-tracking?${params.toString()}`); return response."
        },
        {
          "endpoint": "/accounting/ledger-summary?${params.toString()}",
          "context": "const response = await api.get(`/accounting/ledger-summary?${params.toString()}`); return response"
        }
      ],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "/accounting/income-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/income-ledger?${params.toString()}`); return response.data a"
        },
        {
          "key": "/accounting/expense-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/expense-ledger?${params.toString()}`); return response.data"
        },
        {
          "key": "/accounting/cash-bank-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/cash-bank-ledger?${params.toString()}`); return response.dat"
        },
        {
          "key": "/accounting/gold-weight-ledger?${params.toString()}",
          "context": "const response = await api.get(`/accounting/gold-weight-ledger?${params.toString()}`); return response.d"
        },
        {
          "key": "/accounting/profit-loss-analysis?${params.toString()}",
          "context": "const response = await api.get(`/accounting/profit-loss-analysis?${params.toString()}`); return response"
        },
        {
          "key": "/accounting/debt-tracking?${params.toString()}",
          "context": "const response = await api.get(`/accounting/debt-tracking?${params.toString()}`); return response.data a"
        },
        {
          "key": "/accounting/ledger-summary?${params.toString()}",
          "context": "const response = await api.get(`/accounting/ledger-summary?${params.toString()}`); return response.data"
        }
      ],
      "recommendations": []
    },
    {
      "file": "utils/translationManager.ts",
      "apiCalls": [],
      "errorHandling": [
        {
          "code": "catch (error) {\r\n      console.warn(`Number formatting failed for language ${language}",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      console.warn(`Currency formatting failed for language ${language}",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      console.warn(`Date formatting failed for language ${language}",
          "hasTranslation": false
        },
        {
          "code": "catch (error) {\r\n      console.warn(`Time formatting failed for language ${language}",
          "hasTranslation": false
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "4 error handlers need translation support"
        }
      ]
    },
    {
      "file": "utils/translationAudit.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "key",
          "context": "RANSLATION_PATTERNS = { // t('key') or t(\"key\") tFunction: /\\bt\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/g, // tSaf"
        },
        {
          "key": "key",
          "context": "ATTERNS = { // t('key') or t(\"key\") tFunction: /\\bt\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/g, // tSafe('key', 'fa"
        },
        {
          "key": "\\n",
          "context": "const lines = content.split('\\n'); // Extract t() function calls let match; while ((match"
        },
        {
          "key": "\\n",
          "context": "const lines = beforeIndex.split('\\n'); return { line: lines.length, column: lines[lines.len"
        }
      ],
      "recommendations": []
    },
    {
      "file": "utils/jalali.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    },
    {
      "file": "utils/formatters.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": "fa-IR",
          "context": "rmatted = new Intl.NumberFormat('fa-IR').format(num); // Replace English digits with Persian digits"
        }
      ],
      "recommendations": []
    },
    {
      "file": "utils/design-system.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [
        {
          "key": ".",
          "context": "const keys = colorPath.split('.'); let value: any = designTokens.colors; for (const key of keys)"
        }
      ],
      "recommendations": []
    },
    {
      "file": "utils/axios.ts",
      "apiCalls": [
        {
          "endpoint": "${process.env.REACT_APP_API_URL || ",
          "context": "const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/ref"
        }
      ],
      "errorHandling": [
        {
          "code": "catch (refreshError) {\r\n        localStorage.removeItem('access_token');\r\n        window.location.href = '/login';\r\n      }",
          "hasTranslation": false
        }
      ],
      "translationUsage": [],
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "high",
          "message": "1 error handlers need translation support"
        },
        {
          "type": "api-translation",
          "priority": "medium",
          "message": "Consider adding language headers to API calls"
        }
      ]
    },
    {
      "file": "utils/api.ts",
      "apiCalls": [],
      "errorHandling": [],
      "translationUsage": [],
      "recommendations": []
    }
  ],
  "discoveredEndpoints": [
    {
      "path": "],\r\n    queryFn: systemAdminApi.getSSLCertificateStatus,\r\n    refetchInterval: 3600000, // Refresh every hour\r\n    staleTime: 1800000, // 30 minutes\r\n  });\r\n};\r\n\r\nexport const useSSLCertificateRenewal = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: systemAdminApi.renewSSLCertificate,\r\n    onSuccess: (data) => {\r\n      toast.success(",
      "method": "GET",
      "file": "hooks/useSystemAdmin.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": true,
      "recommendations": []
    },
    {
      "path": "],\r\n    queryFn: systemAdminApi.getSecurityStatus,\r\n    refetchInterval: 300000, // Refresh every 5 minutes\r\n    staleTime: 120000, // 2 minutes\r\n  });\r\n};\r\n\r\nexport const useSecurityScan = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: systemAdminApi.runSecurityScan,\r\n    onSuccess: (data) => {\r\n      toast.success(",
      "method": "GET",
      "file": "hooks/useSystemAdmin.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": true,
      "recommendations": []
    },
    {
      "path": "],\r\n    queryFn: settingsApi.getCompanySettings,\r\n  });\r\n};\r\n\r\nexport const useUpdateCompanySettings = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (settings: CompanySettingsUpdate) => settingsApi.updateCompanySettings(settings),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
      "method": "GET",
      "file": "hooks/useSettings.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "],\r\n    queryFn: settingsApi.getGoldPriceConfig,\r\n  });\r\n};\r\n\r\nexport const useUpdateGoldPrice = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (priceUpdate: GoldPriceUpdate) => settingsApi.updateGoldPrice(priceUpdate),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
      "method": "GET",
      "file": "hooks/useSettings.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "],\r\n    queryFn: settingsApi.getInvoiceTemplate,\r\n  });\r\n};\r\n\r\nexport const useUpdateInvoiceTemplate = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (templateUpdate: InvoiceTemplateUpdate) => settingsApi.updateInvoiceTemplate(templateUpdate),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
      "method": "GET",
      "file": "hooks/useSettings.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "],\r\n    queryFn: settingsApi.getAllRoles,\r\n  });\r\n};\r\n\r\nexport const useCreateRole = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (roleData: RoleCreate) => settingsApi.createRole(roleData),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
      "method": "GET",
      "file": "hooks/useSettings.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "],\r\n    queryFn: settingsApi.getPermissionStructure,\r\n  });\r\n};\r\n\r\n// User Management Hooks\r\nexport const useUsers = (page: number = 1, perPage: number = 50) => {\r\n  return useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useSettings.ts",
      "category": "user",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "system-settings",
      "method": "GET",
      "file": "hooks/useSettings.ts",
      "category": "settings",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", params],\r\n    queryFn: () => smsApi.templates.getTemplates(params),\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n};\r\n\r\nexport const useSMSTemplate = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useSMS.ts",
      "category": "communication",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", params],\r\n    () => smsApi.campaigns.getCampaigns(params),\r\n    {\r\n      staleTime: 3 * 60 * 1000, // 3 minutes - increased cache time\r\n      cacheTime: 5 * 60 * 1000, // 5 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useSMSCampaign = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useSMS.ts",
      "category": "communication",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", id],\r\n    queryFn: () => smsApi.campaigns.getCampaignStats(id),\r\n    enabled: !!id,\r\n    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\r\n  });\r\n};\r\n\r\n// SMS Batch Operations Hooks\r\nexport const useSendBatchSMS = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (batch: SMSBatchRequest) => smsApi.batch.sendBatch(batch),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
      "method": "GET",
      "file": "hooks/useSMS.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", filters],\r\n    () => smsApi.history.getHistory(filters),\r\n    {\r\n      staleTime: 2 * 60 * 1000, // 2 minutes - increased cache time\r\n      cacheTime: 5 * 60 * 1000, // 5 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useSMSOverallStats = () => {\r\n  return useQuery(\r\n    [",
      "method": "GET",
      "file": "hooks/useSMS.ts",
      "category": "communication",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", params],\r\n    queryFn: () => smsApi.history.getMessages(params),\r\n    staleTime: 1 * 60 * 1000, // 1 minute\r\n  });\r\n};\r\n\r\nexport const useSMSMessage = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useSMS.ts",
      "category": "communication",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", includeInactive],\r\n      queryFn: () => enhancedAccountingApi.getChartOfAccounts(includeInactive),\r\n      staleTime: 10 * 60 * 1000, // 10 minutes\r\n    });\r\n  };\r\n\r\n  const useChartOfAccount = (accountId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getSubsidiaryAccounts(filters),\r\n      staleTime: 10 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useSubsidiaryAccount = (subsidiaryId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getJournalEntries(filters),\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n    });\r\n  };\r\n\r\n  const useJournalEntry = (entryId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", accountId, filters],\r\n      queryFn: () => enhancedAccountingApi.getGeneralLedger(accountId, filters),\r\n      enabled: !!accountId,\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useAccountBalance = (accountId: string, asOfDate?: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getChecks(filters),\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useCheck = (checkId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", filters],\r\n      queryFn: () => enhancedAccountingApi.getInstallmentAccounts(filters),\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useInstallmentAccount = (installmentId: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", installmentId],\r\n      queryFn: () => enhancedAccountingApi.getInstallmentPayments(installmentId),\r\n      enabled: !!installmentId,\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  // Bank Reconciliation\r\n  const useBankReconciliations = (bankAccountId?: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", asOfDate],\r\n      queryFn: () => enhancedAccountingApi.getTrialBalance(asOfDate),\r\n      enabled: !!asOfDate,\r\n      staleTime: 10 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  const useBalanceSheet = (asOfDate: string) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", periodStart, periodEnd],\r\n      queryFn: () => enhancedAccountingApi.getProfitLossStatement(periodStart, periodEnd),\r\n      enabled: !!periodStart && !!periodEnd,\r\n      staleTime: 10 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  // Period Management\r\n  const useAccountingPeriods = () => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "],\r\n      queryFn: () => enhancedAccountingApi.getAccountingDashboard(),\r\n      staleTime: 2 * 60 * 1000, // 2 minutes\r\n    });\r\n  };\r\n\r\n  // Audit Trail\r\n  const useAuditTrail = (filters?: AccountingFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useEnhancedAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "],\r\n    enhancedCategoriesApi.getCategoryTemplates,\r\n    {\r\n      staleTime: 15 * 60 * 1000, // 15 minutes - increased cache time\r\n      cacheTime: 20 * 60 * 1000, // 20 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n      refetchOnMount: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useCreateCategoryTemplate = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: enhancedCategoriesApi.createCategoryTemplate,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
      "method": "GET",
      "file": "hooks/useCategoryManagement.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    },
    {
      "path": "],\r\n    queryFn: () => businessAdaptabilityApi.getBusinessTypes(true)\r\n  });\r\n\r\n  // Business Configurations\r\n  const {\r\n    data: businessConfigurations = [],\r\n    isLoading: configurationsLoading,\r\n    error: configurationsError,\r\n    refetch: refetchConfigurations\r\n  } = useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useBusinessAdaptability.ts",
      "category": "settings",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", currentConfiguration?.id],\r\n    queryFn: () => currentConfiguration ? businessAdaptabilityApi.getBusinessConfiguration(currentConfiguration.id) : null,\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Business Adaptability Status\r\n  const {\r\n    data: adaptabilityStatus,\r\n    isLoading: statusLoading,\r\n    error: statusError,\r\n    refetch: refetchStatus\r\n  } = useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useBusinessAdaptability.ts",
      "category": "user",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", currentConfiguration?.id],\r\n    queryFn: () => currentConfiguration ? businessAdaptabilityApi.getWorkflowRules(currentConfiguration.id) : [],\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Custom Fields\r\n  const {\r\n    data: customFields = [],\r\n    isLoading: customFieldsLoading,\r\n    error: customFieldsError,\r\n    refetch: refetchCustomFields\r\n  } = useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useBusinessAdaptability.ts",
      "category": "settings",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", currentConfiguration?.id],\r\n    queryFn: () => businessAdaptabilityApi.getUnitsOfMeasure(currentConfiguration?.id),\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Pricing Rules\r\n  const {\r\n    data: pricingRules = [],\r\n    isLoading: pricingRulesLoading,\r\n    error: pricingRulesError,\r\n    refetch: refetchPricingRules\r\n  } = useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useBusinessAdaptability.ts",
      "category": "settings",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", currentConfiguration?.id],\r\n    queryFn: () => businessAdaptabilityApi.getFeatureConfigurations(currentConfiguration?.id),\r\n    enabled: !!currentConfiguration?.id\r\n  });\r\n\r\n  // Terminology Mapping\r\n  const {\r\n    data: terminologyMapping = {},\r\n    isLoading: terminologyLoading,\r\n    error: terminologyError,\r\n    refetch: refetchTerminology\r\n  } = useQuery({\r\n    queryKey: [",
      "method": "GET",
      "file": "hooks/useBusinessAdaptability.ts",
      "category": "settings",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/auth/me",
      "method": "GET",
      "file": "hooks/useAuth.ts",
      "category": "auth",
      "hasTranslationSupport": true,
      "errorHandling": true,
      "recommendations": []
    },
    {
      "path": "/auth/login",
      "method": "POST",
      "file": "hooks/useAuth.ts",
      "category": "auth",
      "hasTranslationSupport": true,
      "errorHandling": true,
      "recommendations": []
    },
    {
      "path": "/auth/logout",
      "method": "POST",
      "file": "hooks/useAuth.ts",
      "category": "auth",
      "hasTranslationSupport": true,
      "errorHandling": true,
      "recommendations": []
    },
    {
      "path": ", credentials);\r\n      return response.data as AuthResponse;\r\n    },\r\n    onSuccess: (data) => {\r\n      const expiryTime = Date.now() + (data.expires_in * 1000);\r\n      localStorage.setItem(",
      "method": "GET",
      "file": "hooks/useAuth.ts",
      "category": "auth",
      "hasTranslationSupport": true,
      "errorHandling": true,
      "recommendations": []
    },
    {
      "path": ", entityTypes),\r\n    queryFn: () => searchApi.getSuggestions(filters.search || ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", ",
      "method": "GET",
      "file": "hooks/useAdvancedSearch.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", filters],\r\n      queryFn: () => accountingApi.getIncomeLedger(filters),\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n    });\r\n  };\r\n\r\n  // Expense Ledger\r\n  const useExpenseLedger = (filters?: LedgerFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", filters],\r\n      queryFn: () => accountingApi.getCashBankLedger(filters),\r\n      staleTime: 5 * 60 * 1000,\r\n    });\r\n  };\r\n\r\n  // Gold Weight Ledger\r\n  const useGoldWeightLedger = (filters?: LedgerFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": ", startDate, endDate],\r\n      queryFn: () => accountingApi.getProfitLossAnalysis(startDate, endDate),\r\n      enabled: !!startDate && !!endDate,\r\n      staleTime: 10 * 60 * 1000, // 10 minutes\r\n    });\r\n  };\r\n\r\n  // Debt Tracking\r\n  const useDebtTracking = (filters?: LedgerFilters) => {\r\n    return useQuery({\r\n      queryKey: [",
      "method": "GET",
      "file": "hooks/useAccounting.ts",
      "category": "accounting",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "ledger-summary",
      "method": "GET",
      "file": "hooks/useAccounting.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/system/health",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/services/status",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/services/manage",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/services/${serviceName}/logs",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/logs/search",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/logs/export",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/performance/metrics",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/database/status",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/database/health-check",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/database/optimize",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/redis/status",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/redis/clear",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/redis/keys",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/backups/status",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/backups/create",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/backups/restore",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/backups/${filename}",
      "method": "DELETE",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/backups/${filename}/download",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/config",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/config/env",
      "method": "PUT",
      "file": "services/systemAdminApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/config/feature-flags",
      "method": "PUT",
      "file": "services/systemAdminApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/config/settings",
      "method": "PUT",
      "file": "services/systemAdminApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/sessions",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/sessions/${sessionId}",
      "method": "DELETE",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/sessions/user/${userId}",
      "method": "DELETE",
      "file": "services/systemAdminApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/alerts",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/alerts/${alertId}/acknowledge",
      "method": "PUT",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/alerts/${alertId}/resolve",
      "method": "PUT",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/alerts",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/ssl/status",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/ssl/renew",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/security/status",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/security/scan",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/system/restart",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/system/update",
      "method": "POST",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/admin/system/info",
      "method": "GET",
      "file": "services/systemAdminApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/templates",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/templates",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/templates/${id}",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/templates/${id}",
      "method": "PUT",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/templates/${id}",
      "method": "DELETE",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/templates/${templateId}/preview",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/campaigns",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/campaigns",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/campaigns/${id}",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/campaigns/${id}/send",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/campaigns/${id}/retry",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/campaigns/${id}/statistics",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/send-batch",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/retry",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/history",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/statistics",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/messages/${id}",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/messages",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/schedule",
      "method": "POST",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/scheduled",
      "method": "GET",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/sms/scheduled/${id}",
      "method": "DELETE",
      "file": "services/smsApi.ts",
      "category": "communication",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/company",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/company",
      "method": "PUT",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/gold-price",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/gold-price",
      "method": "PUT",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/invoice-template",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/invoice-template",
      "method": "PUT",
      "file": "services/settingsApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/roles",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/roles",
      "method": "POST",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/roles/${roleId}",
      "method": "PUT",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/roles/${roleId}",
      "method": "DELETE",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/permissions",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/users?page=${page}&per_page=${perPage}",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/users",
      "method": "POST",
      "file": "services/settingsApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/users/${userId}",
      "method": "PUT",
      "file": "services/settingsApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/users/${userId}/password",
      "method": "PUT",
      "file": "services/settingsApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/users/${userId}",
      "method": "DELETE",
      "file": "services/settingsApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/users/${userId}/assign-role",
      "method": "POST",
      "file": "services/settingsApi.ts",
      "category": "user",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/settings/system",
      "method": "GET",
      "file": "services/settingsApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/sales/trends",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "reports",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/sales/top-products",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "inventory",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/inventory/valuation",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "inventory",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/inventory/low-stock",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "inventory",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/customers/analysis",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/customers/debt-report",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "customer",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/charts/sales-overview",
      "method": "GET",
      "file": "services/reportsApi.ts",
      "category": "reports",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/export/${reportType}",
      "method": "POST",
      "file": "services/reportsApi.ts",
      "category": "reports",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/export/${reportType}/csv",
      "method": "POST",
      "file": "services/reportsApi.ts",
      "category": "reports",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}/qr-card",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/?invoice_id=${invoiceId}",
      "method": "POST",
      "file": "services/qrCardApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/${cardId}",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/${cardId}",
      "method": "PUT",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/${cardId}",
      "method": "DELETE",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/${cardId}/regenerate",
      "method": "POST",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/${cardId}/qr-image?size=${size}",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/${cardId}/analytics",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/?${params}",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/qr-cards/themes",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/public/invoice-card/${cardId}${params}",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/public/card/${shortUrl}${params}",
      "method": "GET",
      "file": "services/qrCardApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/calculate",
      "method": "POST",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/",
      "method": "POST",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/calculate",
      "method": "POST",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/",
      "method": "POST",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/?${params}",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}",
      "method": "PUT",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}/approve",
      "method": "PUT",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}/payments",
      "method": "POST",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}/status",
      "method": "PUT",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}",
      "method": "DELETE",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}/items/${itemId}/price-override",
      "method": "PUT",
      "file": "services/invoiceApi.ts",
      "category": "inventory",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/${invoiceId}/pdf",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/universal-invoices/analytics/summary?${params}",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/${invoiceId}",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/?${params}",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/${invoiceId}/payments",
      "method": "POST",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/${invoiceId}/status",
      "method": "PUT",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/${invoiceId}",
      "method": "DELETE",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/reports/summary?${params}",
      "method": "GET",
      "file": "services/invoiceApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "services/inventoryApi.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "services/inventoryApi.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "GET",
      "file": "services/inventoryApi.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        },
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/chart-of-accounts?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/chart-of-accounts",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/chart-of-accounts/${accountId}",
      "method": "PUT",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/chart-of-accounts/${accountId}",
      "method": "DELETE",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/chart-of-accounts/${accountId}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/subsidiary-accounts?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/subsidiary-accounts",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/subsidiary-accounts/${subsidiaryId}",
      "method": "PUT",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/subsidiary-accounts/${subsidiaryId}",
      "method": "DELETE",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/subsidiary-accounts/${subsidiaryId}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries/${entryId}",
      "method": "PUT",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries/${entryId}",
      "method": "DELETE",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries/${entryId}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries/${entryId}/post",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries/${entryId}/reverse",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/general-ledger/${accountId}?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/account-balance/${accountId}?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/checks?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/checks",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/checks/${checkId}",
      "method": "PUT",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/checks/${checkId}/status",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/checks/${checkId}",
      "method": "DELETE",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/checks/${checkId}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts/${installmentId}",
      "method": "PUT",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts/${installmentId}",
      "method": "DELETE",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts/${installmentId}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts/${installmentId}/payment",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/installment-accounts/${installmentId}/payments",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/bank-reconciliations?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/bank-reconciliations",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/bank-reconciliations/${reconciliationId}",
      "method": "PUT",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/bank-reconciliations/${reconciliationId}/complete",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/reports/trial-balance?as_of_date=${asOfDate}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/reports/balance-sheet?as_of_date=${asOfDate}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/reports/profit-loss?period_start=${periodStart}&period_end=${periodEnd}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/periods",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/periods",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/periods/${periodId}/lock",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/periods/${periodId}/unlock",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/periods/${periodId}/close",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/dashboard",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/audit-trail?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/gold-invoice-journal-entry/${invoiceId}",
      "method": "POST",
      "file": "services/enhancedAccountingApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/reports/trial-balance/export?as_of_date=${asOfDate}&format=${format}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/reports/balance-sheet/export?as_of_date=${asOfDate}&format=${format}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/reports/profit-loss/export?period_start=${periodStart}&period_end=${periodEnd}&format=${format}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/journal-entries/export?${params.toString()}",
      "method": "GET",
      "file": "services/enhancedAccountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/dashboard/summary",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/charts/sales-overview?days=${days}",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/charts/category-sales?days=${days}",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/sales/top-products?limit=${limit}",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "inventory",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/inventory/low-stock",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "inventory",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/invoices/?status=pending&limit=${limit}",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "invoice",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/inventory/valuation",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "inventory",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/customers/debt-report",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/reports/summary/daily${queryParam}",
      "method": "GET",
      "file": "services/dashboardApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers",
      "method": "GET",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/search",
      "method": "GET",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/${id}",
      "method": "GET",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers",
      "method": "POST",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/${id}",
      "method": "PUT",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/${id}",
      "method": "DELETE",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/debt-summary",
      "method": "GET",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/${id}/debt-history",
      "method": "GET",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/${customerId}/payments",
      "method": "POST",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/customers/${customerId}/payments",
      "method": "GET",
      "file": "services/customerApi.ts",
      "category": "customer",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types/${typeId}",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types/code/${typeCode}",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types/${typeId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/workflow-rules",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/workflow-rules",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/workflow-rules/${ruleId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/workflow-rules/execute",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/custom-fields",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/custom-fields",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/custom-fields/${fieldId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/custom-fields/validate",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/units-of-measure",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/units-of-measure",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/units-of-measure/${unitId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/units-of-measure/convert",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/pricing-rules",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/pricing-rules",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/pricing-rules/${ruleId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/pricing-rules/calculate",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/migrate",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/migration-history",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/migrations/${migrationId}/rollback",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/terminology",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/terminology",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/terminology/translate",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/features",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/features/${featureId}",
      "method": "PUT",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/features/${featureId}/toggle",
      "method": "PATCH",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/status",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types/${sourceTypeId}/compatibility/${targetTypeId}",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/bulk-operations/initialize-defaults",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/bulk-operations/export-configuration",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/bulk-operations/import-configuration",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/business-types",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "other",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/apply-template/${templateId}",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/analytics",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "reports",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/kpis",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/metrics",
      "method": "GET",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/validate",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/test-workflows",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${this.baseUrl}/configurations/${configId}/test-pricing",
      "method": "POST",
      "file": "services/businessAdaptabilityApi.ts",
      "category": "settings",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/income-ledger?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/expense-ledger?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/expense-ledger",
      "method": "POST",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/cash-bank-ledger?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/gold-weight-ledger?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/profit-loss-analysis?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/debt-tracking?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "/accounting/ledger-summary?${params.toString()}",
      "method": "GET",
      "file": "services/accountingApi.ts",
      "category": "accounting",
      "hasTranslationSupport": true,
      "errorHandling": false,
      "recommendations": [
        {
          "type": "error-handling",
          "priority": "medium",
          "message": "Implement proper error handling with translation support"
        }
      ]
    },
    {
      "path": "${process.env.REACT_APP_API_URL || ",
      "method": "POST",
      "file": "utils/axios.ts",
      "category": "other",
      "hasTranslationSupport": false,
      "errorHandling": true,
      "recommendations": [
        {
          "type": "translation-support",
          "priority": "high",
          "message": "Add language header support to API calls"
        }
      ]
    }
  ],
  "summary": {
    "byCategory": {
      "customer": 21,
      "user": 9,
      "settings": 47,
      "communication": 25,
      "accounting": 65,
      "other": 82,
      "auth": 4,
      "invoice": 26,
      "reports": 16,
      "inventory": 7
    },
    "byMethod": {
      "GET": 177,
      "POST": 75,
      "DELETE": 16,
      "PUT": 33,
      "PATCH": 1
    },
    "translationSupport": 78.80794701986756,
    "criticalEndpoints": [
      {
        "path": "],\r\n    queryFn: settingsApi.getCompanySettings,\r\n  });\r\n};\r\n\r\nexport const useUpdateCompanySettings = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (settings: CompanySettingsUpdate) => settingsApi.updateCompanySettings(settings),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
        "method": "GET",
        "category": "customer",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": "],\r\n    queryFn: settingsApi.getGoldPriceConfig,\r\n  });\r\n};\r\n\r\nexport const useUpdateGoldPrice = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (priceUpdate: GoldPriceUpdate) => settingsApi.updateGoldPrice(priceUpdate),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
        "method": "GET",
        "category": "customer",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": "],\r\n    queryFn: settingsApi.getInvoiceTemplate,\r\n  });\r\n};\r\n\r\nexport const useUpdateInvoiceTemplate = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (templateUpdate: InvoiceTemplateUpdate) => settingsApi.updateInvoiceTemplate(templateUpdate),\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: [",
        "method": "GET",
        "category": "customer",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": "],\r\n    queryFn: settingsApi.getAllRoles,\r\n  });\r\n};\r\n\r\nexport const useCreateRole = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (roleData: RoleCreate) => settingsApi.createRole(roleData),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
        "method": "GET",
        "category": "customer",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": "],\r\n    queryFn: settingsApi.getPermissionStructure,\r\n  });\r\n};\r\n\r\n// User Management Hooks\r\nexport const useUsers = (page: number = 1, perPage: number = 50) => {\r\n  return useQuery({\r\n    queryKey: [",
        "method": "GET",
        "category": "user",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": "system-settings",
        "method": "GET",
        "category": "settings",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": ", params],\r\n    queryFn: () => smsApi.templates.getTemplates(params),\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n};\r\n\r\nexport const useSMSTemplate = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
        "method": "GET",
        "category": "communication",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": ", params],\r\n    () => smsApi.campaigns.getCampaigns(params),\r\n    {\r\n      staleTime: 3 * 60 * 1000, // 3 minutes - increased cache time\r\n      cacheTime: 5 * 60 * 1000, // 5 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useSMSCampaign = (id: string) => {\r\n  return useQuery({\r\n    queryKey: [",
        "method": "GET",
        "category": "communication",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": ", id],\r\n    queryFn: () => smsApi.campaigns.getCampaignStats(id),\r\n    enabled: !!id,\r\n    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\r\n  });\r\n};\r\n\r\n// SMS Batch Operations Hooks\r\nexport const useSendBatchSMS = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  return useMutation({\r\n    mutationFn: (batch: SMSBatchRequest) => smsApi.batch.sendBatch(batch),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [",
        "method": "GET",
        "category": "customer",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      },
      {
        "path": ", filters],\r\n    () => smsApi.history.getHistory(filters),\r\n    {\r\n      staleTime: 2 * 60 * 1000, // 2 minutes - increased cache time\r\n      cacheTime: 5 * 60 * 1000, // 5 minutes garbage collection\r\n      refetchOnWindowFocus: false,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useSMSOverallStats = () => {\r\n  return useQuery(\r\n    [",
        "method": "GET",
        "category": "communication",
        "hasTranslationSupport": false,
        "hasErrorHandling": true
      }
    ]
  }
}