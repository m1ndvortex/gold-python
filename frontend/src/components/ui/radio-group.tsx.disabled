import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "../../lib/utils"

const radioGroupVariants = cva(
  "grid gap-2",
  {
    variants: {
      orientation: {
        vertical: "grid-cols-1",
        horizontal: "grid-flow-col auto-cols-max gap-6",
      },
    },
    defaultVariants: {
      orientation: "vertical",
    },
  }
)

const radioItemVariants = cva(
  "aspect-square h-4 w-4 rounded-full border text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-300",
  {
    variants: {
      variant: {
        default: "border-primary focus-visible:ring-ring",
        // Gradient variants matching reports/charts design
        "gradient-green": "border-green-500 focus-visible:ring-green-500/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-green-500 data-[state=checked]:to-green-600 data-[state=checked]:border-green-600 data-[state=checked]:shadow-lg data-[state=checked]:shadow-green-500/20",
        "gradient-teal": "border-teal-500 focus-visible:ring-teal-500/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-teal-500 data-[state=checked]:to-teal-600 data-[state=checked]:border-teal-600 data-[state=checked]:shadow-lg data-[state=checked]:shadow-teal-500/20",
        "gradient-blue": "border-blue-500 focus-visible:ring-blue-500/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-blue-500 data-[state=checked]:to-blue-600 data-[state=checked]:border-blue-600 data-[state=checked]:shadow-lg data-[state=checked]:shadow-blue-500/20",
        "gradient-purple": "border-purple-500 focus-visible:ring-purple-500/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-purple-500 data-[state=checked]:to-purple-600 data-[state=checked]:border-purple-600 data-[state=checked]:shadow-lg data-[state=checked]:shadow-purple-500/20",
        "gradient-pink": "border-pink-500 focus-visible:ring-pink-500/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-pink-500 data-[state=checked]:to-pink-600 data-[state=checked]:border-pink-600 data-[state=checked]:shadow-lg data-[state=checked]:shadow-pink-500/20",
        "gradient-orange": "border-orange-500 focus-visible:ring-orange-500/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-orange-500 data-[state=checked]:to-orange-600 data-[state=checked]:border-orange-600 data-[state=checked]:shadow-lg data-[state=checked]:shadow-orange-500/20",
        // Professional variant
        professional: "border-slate-500 focus-visible:ring-slate-500/20 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-slate-600 data-[state=checked]:to-slate-700 data-[state=checked]:border-slate-700 data-[state=checked]:shadow-lg data-[state=checked]:shadow-slate-500/10",
      },
      size: {
        default: "h-4 w-4",
        sm: "h-3 w-3",
        lg: "h-5 w-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface RadioGroupProps
  extends React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>,
    VariantProps<typeof radioGroupVariants> {}

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  RadioGroupProps
>(({ className, orientation, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn(radioGroupVariants({ orientation, className }))}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

export interface RadioGroupItemProps
  extends React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>,
    VariantProps<typeof radioItemVariants> {}

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  RadioGroupItemProps
>(({ className, variant, size, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(radioItemVariants({ variant, size, className }))}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className={cn(
          "fill-current text-current",
          size === "sm" ? "h-1.5 w-1.5" : size === "lg" ? "h-2.5 w-2.5" : "h-2 w-2"
        )} />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem, radioGroupVariants, radioItemVariants }