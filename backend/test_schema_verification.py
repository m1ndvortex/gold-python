"""
Schema Verification Tests for Universal Business Platform
Verifies that all schema enhancements are working correctly
"""

import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from decimal import Decimal

# Database setup
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://goldshop_user:goldshop_password@db:5432/goldshop")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)

def test_universal_schema_functionality():
    """Test that universal schema enhancements are working"""
    session = SessionLocal()
    
    try:
        print("Testing Universal Business Platform Schema...")
        
        # 1. Test business configurations
        result = session.execute(text("""
            SELECT business_type, business_name, configuration 
            FROM business_configurations 
            WHERE business_type = 'gold_shop'
        """))
        config = result.fetchone()
        assert config is not None, "Gold shop business configuration not found"
        assert config[1] == "Gold Shop Management System"
        print("‚úì Business configurations working")
        
        # 2. Test enhanced inventory items
        result = session.execute(text("""
            SELECT COUNT(*) FROM inventory_items WHERE sku IS NOT NULL
        """))
        items_with_sku = result.scalar()
        
        result = session.execute(text("""
            SELECT COUNT(*) FROM inventory_items WHERE attributes IS NOT NULL
        """))
        items_with_attributes = result.scalar()
        
        print(f"‚úì Enhanced inventory items: {items_with_sku} items with SKU, {items_with_attributes} with attributes")
        
        # 3. Test chart of accounts
        result = session.execute(text("""
            SELECT COUNT(*) FROM chart_of_accounts 
            WHERE account_type IN ('asset', 'liability', 'equity', 'revenue', 'expense')
        """))
        accounts_count = result.scalar()
        assert accounts_count >= 10, "Insufficient chart of accounts entries"
        print(f"‚úì Chart of accounts: {accounts_count} accounts created")
        
        # 4. Test hierarchical categories
        result = session.execute(text("""
            SELECT COUNT(*) FROM categories 
            WHERE path IS NOT NULL AND level IS NOT NULL
        """))
        categories_count = result.scalar()
        print(f"‚úì Hierarchical categories: {categories_count} categories with path structure")
        
        # 5. Test enhanced invoices
        result = session.execute(text("""
            SELECT COUNT(*) FROM invoices 
            WHERE workflow_stage IS NOT NULL AND invoice_type IS NOT NULL
        """))
        enhanced_invoices = result.scalar()
        print(f"‚úì Enhanced invoices: {enhanced_invoices} invoices with workflow")
        
        # 6. Test OAuth2 tables
        result = session.execute(text("SELECT COUNT(*) FROM oauth2_tokens"))
        oauth_tokens = result.scalar()
        result = session.execute(text("SELECT COUNT(*) FROM oauth2_audit_logs"))
        oauth_logs = result.scalar()
        print(f"‚úì OAuth2 tables: {oauth_tokens} tokens, {oauth_logs} audit logs")
        
        # 7. Test audit logs
        result = session.execute(text("SELECT COUNT(*) FROM audit_logs"))
        audit_count = result.scalar()
        print(f"‚úì Audit logs table: {audit_count} entries")
        
        # 8. Test inventory movements
        result = session.execute(text("SELECT COUNT(*) FROM inventory_movements"))
        movements_count = result.scalar()
        print(f"‚úì Inventory movements: {movements_count} movements tracked")
        
        # 9. Test payment methods
        result = session.execute(text("""
            SELECT name, type FROM payment_methods WHERE is_active = true
        """))
        payment_methods = result.fetchall()
        assert len(payment_methods) >= 3, "Insufficient payment methods"
        method_names = [pm[0] for pm in payment_methods]
        print(f"‚úì Payment methods: {', '.join(method_names)}")
        
        # 10. Test enhanced payments
        result = session.execute(text("""
            SELECT COUNT(*) FROM payments 
            WHERE currency IS NOT NULL AND status IS NOT NULL
        """))
        enhanced_payments = result.scalar()
        print(f"‚úì Enhanced payments: {enhanced_payments} payments with currency and status")
        
        # 11. Test journal entries structure
        result = session.execute(text("SELECT COUNT(*) FROM journal_entries"))
        journal_entries = result.scalar()
        result = session.execute(text("SELECT COUNT(*) FROM journal_entry_lines"))
        journal_lines = result.scalar()
        print(f"‚úì Double-entry accounting: {journal_entries} entries, {journal_lines} lines")
        
        # 12. Test backward compatibility - gold shop features
        result = session.execute(text("""
            SELECT COUNT(*) FROM inventory_items 
            WHERE weight_grams IS NOT NULL AND gold_specific IS NOT NULL
        """))
        gold_items = result.scalar()
        
        result = session.execute(text("""
            SELECT COUNT(*) FROM invoices 
            WHERE gold_price_per_gram IS NOT NULL AND gold_specific IS NOT NULL
        """))
        gold_invoices = result.scalar()
        
        print(f"‚úì Gold shop compatibility: {gold_items} gold items, {gold_invoices} gold invoices")
        
        # 13. Test LTREE extension
        try:
            result = session.execute(text("SELECT 'test.path'::ltree"))
            ltree_result = result.fetchone()
            assert ltree_result is not None
            print("‚úì LTREE extension working")
        except Exception as e:
            print(f"‚ö† LTREE extension issue: {e}")
        
        # 14. Test indexes are working
        result = session.execute(text("""
            SELECT COUNT(*) FROM pg_indexes 
            WHERE tablename IN ('inventory_items', 'chart_of_accounts', 'journal_entries', 'audit_logs')
            AND indexname LIKE 'idx_%'
        """))
        indexes_count = result.scalar()
        assert indexes_count >= 10, "Insufficient indexes created"
        print(f"‚úì Database indexes: {indexes_count} performance indexes created")
        
        # 15. Test foreign key constraints
        result = session.execute(text("""
            SELECT COUNT(*) FROM information_schema.table_constraints 
            WHERE constraint_type = 'FOREIGN KEY' 
            AND table_name IN ('journal_entry_lines', 'inventory_movements', 'audit_logs', 'payments')
        """))
        fk_count = result.scalar()
        assert fk_count >= 5, "Insufficient foreign key constraints"
        print(f"‚úì Foreign key constraints: {fk_count} referential integrity constraints")
        
        print("\n" + "="*70)
        print("üéâ Universal Business Platform Schema Verification PASSED!")
        print("‚úÖ All new tables and columns are functional")
        print("‚úÖ Data migration completed successfully")
        print("‚úÖ Backward compatibility with gold shop maintained")
        print("‚úÖ Performance indexes and constraints in place")
        print("‚úÖ OAuth2 security infrastructure ready")
        print("‚úÖ Double-entry accounting system operational")
        print("‚úÖ Universal business type support enabled")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Schema verification failed: {e}")
        return False
    finally:
        session.close()

def test_sample_data_operations():
    """Test basic CRUD operations on universal schema"""
    session = SessionLocal()
    
    try:
        print("\nTesting Sample Data Operations...")
        
        # Test reading business configuration
        result = session.execute(text("""
            SELECT configuration->'features'->>'inventory_tracking' as inventory_tracking
            FROM business_configurations 
            WHERE business_type = 'gold_shop'
        """))
        config_value = result.fetchone()
        if config_value and config_value[0]:
            print("‚úì JSONB configuration queries working")
        
        # Test inventory item with attributes
        result = session.execute(text("""
            SELECT name, attributes->>'brand' as brand, tags
            FROM inventory_items 
            WHERE attributes IS NOT NULL 
            LIMIT 1
        """))
        item = result.fetchone()
        if item:
            print(f"‚úì Inventory attributes: {item[0]} - Brand: {item[1]}")
        
        # Test chart of accounts hierarchy
        result = session.execute(text("""
            SELECT account_code, account_name, account_type
            FROM chart_of_accounts 
            WHERE account_type = 'asset'
            ORDER BY account_code
            LIMIT 3
        """))
        accounts = result.fetchall()
        if accounts:
            print(f"‚úì Chart of accounts: {len(accounts)} asset accounts found")
        
        # Test enhanced invoice fields
        result = session.execute(text("""
            SELECT invoice_number, workflow_stage, business_type_fields
            FROM invoices 
            WHERE workflow_stage IS NOT NULL
            LIMIT 1
        """))
        invoice = result.fetchone()
        if invoice:
            print(f"‚úì Enhanced invoices: {invoice[0]} in stage '{invoice[1]}'")
        
        # Test payment methods
        result = session.execute(text("""
            SELECT name, type, configuration
            FROM payment_methods 
            WHERE is_active = true
            ORDER BY name
        """))
        methods = result.fetchall()
        if methods:
            print(f"‚úì Payment methods: {len(methods)} active methods")
        
        print("‚úÖ Sample data operations successful")
        return True
        
    except Exception as e:
        print(f"‚ùå Sample data operations failed: {e}")
        return False
    finally:
        session.close()

if __name__ == "__main__":
    print("Universal Business Platform Schema Verification")
    print("=" * 70)
    
    schema_ok = test_universal_schema_functionality()
    data_ok = test_sample_data_operations()
    
    if schema_ok and data_ok:
        print("\nüéâ ALL TESTS PASSED!")
        print("‚úÖ Universal Business Platform database schema is fully operational")
        print("‚úÖ Ready for production use with any business type")
        print("‚úÖ Gold shop compatibility maintained")
        print("‚úÖ Enterprise-grade features enabled")
    else:
        print("\n‚ùå Some tests failed - please check the output above")
        exit(1)